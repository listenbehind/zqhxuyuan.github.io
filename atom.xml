<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zqhxuyuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/zqhxuyuan/"/>
  <updated>2017-11-22T04:18:00.000Z</updated>
  <id>http://github.com/zqhxuyuan/</id>
  
  <author>
    <name>任何忧伤,都抵不过世界的美丽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka技术内幕</title>
    <link href="http://github.com/zqhxuyuan/2018/01/01/Kafka-Code-Index/"/>
    <id>http://github.com/zqhxuyuan/2018/01/01/Kafka-Code-Index/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2017-11-22T04:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>《Kafka技术内幕》<br><a href="http://www.ituring.com.cn/book/1927" target="_blank" rel="external">图灵社区主页</a> |<br><a href="http://product.china-pub.com/6817109" target="_blank" rel="external">ChinaPub购买链接</a> |<br><a href="https://item.jd.com/12234113.html?dist=jd" target="_blank" rel="external">京东购买链接</a> |<br><a id="more"></a></p>
<p><img src="http://img.blog.csdn.net/20171019131423727" alt="book"></p>
<p>Update:</p>
<p>2017-11-22: 公司内部做的一个分享：<a href="https://pan.baidu.com/s/1o85h2K6" target="_blank" rel="external">Kafka构建流式数据处理平台</a></p>
<h2 id="本书介绍：">本书介绍：</h2><p>本书主要以0.10版本的Kafka源码为基础，并通过图文详解的方式分析Kafka内部组件的实现细节，全书原创的图片有近400幅。对于Kafka流处理的一些新特性，也会分析0.11版本的相关源码。本书各个章节的主要内容如下。</p>
<ul>
<li>第一章首先介绍了Kafka作为流式数据平台的三个组成，包括消息系统、存储系统、流处理系统。Kafka基本概念的三种模型，包括分区模型、消费模型、分布式模型。然后介绍了Kafka几个比较重要的设计思路，最后介绍了如何在一台机器上模拟单机模式与分布式模式，以及如何搭建源码开发环境。</li>
<li>第二章从一个生产者的示例开始，引出了新版本生产者的两种消息发送方式。生产者客户端利用记录收集器、发送线程，对消息集进行分组和缓存，并为目标节点创建生产请求，发送到不同的代理节点。接着介绍了与网络相关的Kafka通道、选择器、轮询等NIO操作。另外还介绍了Scala版本的旧生产者，它使用阻塞通道的方式发送请求。最后介绍了服务端采用<code>Reactor</code>模式处理客户端的请求。</li>
<li>第三章首先介绍了消费者相关的基础概念，然后从一个消费者的示例开始，引出了基于ZooKeeper的高级消费者API，理解高级API主要是要理解消费线程的模型以及变量的传递方式。接着介绍了消费者提交分区偏移量的两种方式。最后，我们举了一个低级API的示例，开发者需要自己实现一些比较复杂的逻辑处理才能保证消费程序的健壮性和稳定性。</li>
<li>第四章介绍了新版本的消费者，不同于旧版本的消费者，新版本去除了ZooKeeper的依赖，统一了旧版本的高级API和低级API，并提供了两种消费方式：订阅和分配。新版本引入订阅状态来管理消费者的订阅信息、并使用拉取器拉取消息。新版本的消费者没有使用拉取线程，而是采用轮询的方式拉取消息，它的性能比旧版本的消费者更好。另外还介绍了消费者采用回调器、处理器、监听器、适配器、组合模式、链式调用等实现不同类型的异步请求。最后，我们介绍了新消费者的心跳任务、提交偏移量以及三种消息处理语义的使用方式。</li>
<li>第五章介绍了新版本消费者相关的协调者实现，主要包括“加入组”与“同步组”。每个消费者都有一个客户端的协调者，服务端也有一个消费组级别的协调者负责处理所有消费者客户端的请求。当消费组触发再平衡操作，服务端的协调者会记录消费组元数据的变化，并通过状态机保证消费组状态的正常转换。本章会通过很多不同的示例场景来帮助读者理解消费组相关的实现。</li>
<li>第六章介绍了Kafka的存储层实现，包括日志的读写、日志的管理、日志的压缩等一些常用的日志操作。服务端通过副本管理器处理客户端的生产请求和拉取请求。接着介绍了副本机制相关的分区、副本、最高水位、复制点等一些概念。最后介绍了延迟操作接口与延迟缓存。服务端如果不能立即返回响应结果给客户端，会先将延迟操作缓存起来，直到请求处理完成或超时。</li>
<li>第七章介绍了作为服务端核心的Kafka控制器，它主要负责管理分区状态机和副本状态机，以及多种类型的监听器，比如代理节点上线和下线、删除主题、重新分配分区等。控制器的一个重要职责是选举分区的主副本。不同代理节点根据控制器下发的请求，决定成为分区的主副本还是从副本。另外，我们还分析了本地副本与远程副本的区别，以及元数据缓存的作用。</li>
<li>第八章首先介绍了两种集群的同步工具：Kafka内置的MirrorMaker和Uber开源的uReplicator。接着介绍了新版本Kafka提供的连接器框架，以及如何开发一个自定义的连接器。然后介绍了连接器的架构模型的具体实现，主要包括数据模型、Connector模型、Worker模型。</li>
<li>第九章介绍了Kafka流处理的两种API：低级Processor API和高级DSL。本章我们重点介绍了流处理的线程模型，主要包括流实例、流线程、流任务。我们还介绍了流处理的本地状态存储，它主要用来作为备份任务的数据恢复。高级DSL包括两个组件：<code>KStream</code>与<code>KTable</code>，它们都定义了一些常用的流处理算子操作，比如无状态的操作（过滤、映射等）、有状态的操作（连接、窗口等）。</li>
<li>第十章介绍了Kafka的一些高级特性，比如客户端的配额、新的消息格式、事务特性。</li>
</ul>
<p>本书相关的示例代码在笔者的Github主页<a href="https://github.com/zqhxuyuan/kafka-book">https://github.com/zqhxuyuan/kafka-book</a>上，另外，限于篇幅，本书的附录部分会放在个人博客上。由于个人能力有限，文中的错误在所难免，读者在阅读本书的过程中，发现不妥之处，可以私信笔者的微博：<a href="http://weibo.com/xuyuantree" target="_blank" rel="external">http://weibo.com/xuyuantree</a>，笔者会定期将勘误表更新到个人博客上。</p>
<h2 id="English_Introduce">English Introduce</h2><p>《Apache Kafka Internal》</p>
<p>This book mostly based on Kafka-0.10, and some part of 0.11 for streaming. It has nearly 400 pictures to analysis Kafka internal implementation. The book written from client to coordinator, from storage to controller, and also including Kafka Connect and Kafka Streams. Here is content introduction of each chapter:</p>
<p>Chapter 1: Being a streaming platform, kafka composed of message system, storage and streaming processing. There are three model of Kafka basic concepts: Partition model, Consumer model and Distributed model. We also introduce some important design ideas of kafka, such as file system persistent, data transformation, producer and consumer, replication and HA.</p>
<p>Chapter 2: From a producer example into how client send message. The whole workflow include record accumulator, sender thread, grouping message, create request and at last send to different target broker. Then we introduce Kafka channel, selector and also how server use NIO reactor to handle client request.</p>
<p>Chapter 3: From a old high-level consumer example into zookeeper based api. The most important of high-level consuemr is consumer thread model. Then we introduce two approach to commit consumer offset which is zookeeper or internal topic. After that, we illustrate how to write low-level consumer to ensure processing messages stability and robust.</p>
<p>Chapter 4: New version consumer client use subscription state and polling fetch instead of fetcher thread. We also introduce how consumer use callback, handler, listener, adapter, chain to implement different asynchronous request mode. Last we introduce heartbeat, offset commit and three consumer processing semantic: at-most-once,at-least-once,exactly-once.</p>
<p>Chapter 5: New consumer communicate with server coordinator by ConsumerCoordinator, there’re mainly two request/response involved: Join-group and Sync-group. This process also called consumer group rebalance. We also discussed how server coordinator use state machine to ensure group state transformation, such as PreparingRebalance,AwaitingSync,Stable. This chapter also give some different scene to help reader understand how consumer group worked in production environment.</p>
<p>Chapter 6: Kafka’s storage layer process include log read/write, log manager, log compaction. In server side, ReplicationManager is responsible for client’s request. Then we introduce Replication mechanism concepts, such as Partition, Replication, HW, LEO. Last we introduce delayed operation and delayed purgatory. If server can’t response immediately to client, they have to cache request and send response to client some times later.</p>
<p>Chapter 7: Kafka Controller component is in charge of managing PartitionState, ReplicationState, and some listeners, such as broker up/down, topic deletion, partition reassign. The main duty of controller is selecting partition’s leader and sent LeaderAndIsr request down to brokers. Target brokers receiving request will decide to be partition leader or follower. Furthermore, we introduce the different between local replication and remote replication, also the function of metadata cache.</p>
<p>Chapter 8: First we introduce two kind of cluster synchronization: Kafka internal MirrorMaker and Uber open sourced uReplicator, we also show how apache helix build replicated uReplicator. Next we introduce new build-in kafka connect framework and how to develop a custom connector plugin. Then we deep into connector’s architecture, mainly concentrate on data model, connector model, worker model.</p>
<p>Chapter 9: Introduce Kafka Streams two api: low-level processor and high-level DSL. This chapter focus on streaming thread model, including stream instance, thread and task. We also introduce local state store used by standby task for recovery. After that, we introduce two abstract components in High-level DSL: KStream and KTable, they both based on low-level processor, support common operator and advance function, such as window, join and so on.</p>
<p>Chapter 10: Introduce some advanced features. such as client quota, new message format in 0.11 and also  transaction support.</p>
<h2 id="目录">目录</h2><p><img src="http://img.blog.csdn.net/20171019132244310" alt="toc1"></p>
<p><img src="http://img.blog.csdn.net/20171019132056607" alt="toc"></p>
<h2 id="勘误表">勘误表</h2><p>TODO</p>
<hr>
<p>下面是以前写的一些博客，当然实际的书籍已经改动很大了，下面的一些博文仅供参考。</p>
<h2 id="Introduce">Introduce</h2><ul>
<li><a href="http://zqhxuyuan.github.io/2016/01/05/2016-01-05-Kafka-Unix/" target="_blank" rel="external">使用Unix管道解释Kafka</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/13/2016-01-13-Kafka-Picture/" target="_blank" rel="external">Kafka图文理解</a></li>
</ul>
<h2 id="源码分析汇总">源码分析汇总</h2><ul>
<li><a href="http://zqhxuyuan.github.io/2016/01/06/2016-01-06-Kafka_Producer/" target="_blank" rel="external">生产者(java)</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/07/2016-01-07-Kafka_Producer-scala/" target="_blank" rel="external">生产者(scala)</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/08/2016-01-08-Kafka_SocketServer/" target="_blank" rel="external">网络层SocketServer</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/10/2016-01-10-Kafka_LogAppend/" target="_blank" rel="external">消息存储到日志文件中</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/14/2016-01-14-Kafka-ISR/" target="_blank" rel="external">Partition的ISR工作机制</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/19/2016-01-19-Kafka-Consumer-scala/" target="_blank" rel="external">消费者初始化(scala)</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/01/20/2016-01-20-Kafka-Consumer-fetcher/" target="_blank" rel="external">消费者抓取流程</a></li>
<li>☆☆☆<a href="http://zqhxuyuan.github.io/2016/05/26/2016-05-13-Kafka-Book-Sample/" target="_blank" rel="external">旧的样章</a>  </li>
</ul>
<h2 id="新消费者">新消费者</h2><ul>
<li>☆☆☆☆☆<a href="http://zqhxuyuan.github.io/2016/02/20/Kafka-Consumer-New/" target="_blank" rel="external">译：使用新的Kafka消费者客户端</a></li>
</ul>
<h2 id="Kafka_Connect">Kafka Connect</h2><ul>
<li><a href="http://zqhxuyuan.github.io/2016/02/21/Kafka-Connect/" target="_blank" rel="external">使用Kafka Connect构建一个可扩展的ETL管道</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/02/21/Kafka-connect-pipeline/" target="_blank" rel="external">使用Kafka Connect构建大规模低延迟的数据管道</a></li>
</ul>
<h2 id="Kafka_Streams">Kafka Streams</h2><ul>
<li><a href="http://zqhxuyuan.github.io/2016/11/18/Kafka-CQRS-Streams/" target="_blank" rel="external">译：Kafka事件驱动和流处理</a></li>
<li>☆☆☆☆☆<a href="http://zqhxuyuan.github.io/2016/11/02/Kafka-Streams-cn/" target="_blank" rel="external">Kafka Streams中文翻译</a></li>
<li><a href="http://zqhxuyuan.github.io/2016/10/29/Kafka-Interactive-Query/" target="_blank" rel="external">译：Kafka交互式查询和流处理的统一</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Kafka技术内幕》&lt;br&gt;&lt;a href=&quot;http://www.ituring.com.cn/book/1927&quot;&gt;图灵社区主页&lt;/a&gt; |&lt;br&gt;&lt;a href=&quot;http://product.china-pub.com/6817109&quot;&gt;ChinaPub购买链接&lt;/a&gt; |&lt;br&gt;&lt;a href=&quot;https://item.jd.com/12234113.html?dist=jd&quot;&gt;京东购买链接&lt;/a&gt; |&lt;br&gt;
    
    </summary>
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/categories/kafka/"/>
    
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka技术内幕拾遗</title>
    <link href="http://github.com/zqhxuyuan/2017/12/31/Kafka-Book-Resources/"/>
    <id>http://github.com/zqhxuyuan/2017/12/31/Kafka-Book-Resources/</id>
    <published>2017-12-30T16:00:00.000Z</published>
    <updated>2017-12-19T07:18:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kafka技术内幕拾遗</p>
<ul>
<li>✅ 客户端元数据（Metadata）</li>
<li>✅ 客户端线程模型（ThreadModel）</li>
<li>即席查询（Interactive Query）</li>
<li>EOS事务（Transaction）<a id="more"></a>
</li>
</ul>
<h3 id="客户端的元数据对象">客户端的元数据对象</h3><p>客户端的连接对象（<code>NetworkClient</code>）在轮询时会判断是否需要更新元数据。客户端调用元数据更新器的<code>maybeUpdate()</code>方法，并不一定每次都需要更新元数据。只有当元数据的超时时间（<code>metadataTimeout</code>）等于<code>0</code>时，客户端才会发送元数据请求。</p>
<h4 id="1-_客户端轮询与元数据更新器">1. 客户端轮询与元数据更新器</h4><p>客户端调用选择器的轮询方法，最长的阻塞时间会在“轮询时间（<code>pollTimeout</code>）、元数据的更新时间（<code>metadataTimeout</code>）、请求的超时时间（<code>requestTimeoutMs</code>）”三者中选取最小值。如果元数据的更新时间等于0，表示客户端会立即发送元数据请求，不会阻塞。下面解释这几个时间变量的数据来源，以及它们在发送请求过程中所代表的含义。</p>
<ul>
<li>生产者的<code>requestTimeoutMs</code>变量，对应的配置项是<code>request.timeout.ms</code>，默认值<code>30</code>秒。该配置表示生产者等待收到响应结果的最长时间。如果生产者在这个时间超时后没有收到响应结果，就会认为生产请求失败，它可以重新发送生产请求。</li>
<li>生产者的<code>retryBackoffMs</code>变量，对应的配置项是<code>retry.backoff.ms</code>，默认值<code>100</code>毫秒。该配置表示客户端发送请求失败时，为了避免在短时间内客户端重复地发送请求导致重试次数用光，客户端必须要等待一小会儿才允许发送新的请求。这个配置项可用于元数据请求、生产请求和拉取请求，但只有在发送失败时才会用到。该配置会传给元数据对象（元数据请求）、记录收集器（生产请求）。</li>
<li>生产者的<code>lingerMs</code>变量，对应的配置项是<code>linger.ms</code>，默认值为<code>0</code>毫秒。该配置表示生产者在发送请求之前是否会延迟等待一段时间收集更多的消息。如果等于0，表示生产者会立即发送请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端的网络连接对象在每次轮询之前，都会判断是否需要更新元数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkClient</span> <span class="keyword">implements</span> <span class="title">KafkaClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MetadataUpdater metadataUpdater; <span class="comment">// 元数据的更新器</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产者会由发送线程调用该方法，消费者会由ConsumerNetworkClient调用该方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;ClientResponse&gt; <span class="title">poll</span><span class="params">(<span class="keyword">long</span> pollTimeout, <span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> metadataTimeout = metadataUpdater.maybeUpdate(now);</span><br><span class="line">    selector.poll(Utils.min(pollTimeout,metadataTimeout,requestTimeoutMs));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DefaultMetadataUpdater</span> <span class="keyword">implements</span> <span class="title">MetadataUpdater</span> </span>&#123;</span><br><span class="line">    Metadata metadata;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maybeUpdate</span><span class="params">(<span class="keyword">long</span> now, Node node)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 这里简化了其他一些判断条件，实际的超时时间计算方式比较复杂</span></span><br><span class="line">      <span class="keyword">long</span> metadataTimeout = metadata.timeToNextUpdate(now);</span><br><span class="line">      <span class="keyword">if</span>(metadataTimeout == <span class="number">0</span>) <span class="comment">// 准备发送“获取元数据”的请求</span></span><br><span class="line">        doSend(<span class="keyword">new</span> MetadataRequest(metadata.topics()), now);</span><br><span class="line">      <span class="keyword">return</span> metadataTimeout; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理“获取元数据请求”的响应</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(RequestHeader header, Struct body, <span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">      Cluster cluster = <span class="keyword">new</span> MetadataResponse(body).cluster();</span><br><span class="line">      <span class="keyword">this</span>.metadata.update(cluster, now); <span class="comment">// 更新元数据的具体逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端每次轮询收到元数据请求的响应结果后，会解析成<code>Cluster</code>对象，然后更新元数据对象。</p>
<h4 id="2-_元数据对象">2. 元数据对象</h4><p>元数据对象有多个用于控制元数据更新策略的变量，相关的时间配置项主要有下面几个。</p>
<ul>
<li><code>metadata.fetch.timeout.ms</code>（生产者的<code>maxBlockTimeMs</code>变量，默认值为<code>60</code>秒）：生产者第一次发送消息，如果主题没有分区，它等待元数据更新的最长阻塞时间（第7.3.2节第三小节）。</li>
<li><code>metadata.max.age.ms</code>（元数据的<code>metadataExpireMs</code>变量，默认值为五分钟）：即使不需要更新元数据，客户端也需要间隔一段时间更新一次元数据。</li>
<li><code>retry.backoff.ms</code>（元数据的<code>refreshBackoffMs</code>变量，默认值为<code>100</code>毫秒）：客户端多次发送元数据请求，需要等待一小段时间再发送元数据请求。</li>
</ul>
<p>元数据的更新时间主要与后两项配置有关。<code>refreshBackoffMs</code>变量用来计算允许更新的时间（<code>timeToAllowUpdate</code>），<code>metadataExpireMs</code>变量用来计算失效的时间（<code>timeToExpire</code>）。默认情况下，<code>retry.backoff.ms</code>等于<code>100</code>毫秒时，允许更新的时间一般小于<code>0</code>。<code>timeToNextUpdate()</code>方法主要取决于失效的时间，下面列举了几种不同的场景。</p>
<ul>
<li>需要更新元数据时，失效时间等于<code>0</code>，表示需要立即更新元数据。</li>
<li>当前时间在失效阈值的范围内，即上次更新时间加上失效阈值大于当前时间，失效时间等于上次更新时间加上失效阈值，再减去当前时间，结果会大于0，表示再过指定的失效时间才需要更新元数据。</li>
<li>当前时间超过失效阈值的范围，即当前时间大于上次更新时间加上失效阈值，失效时间也设置为0。</li>
</ul>
<blockquote>
<p><strong>注意：</strong>元数据对象的<code>metadataExpireMs</code>和<code>refreshBackoffMs</code>都是固定的值，<code>timeToNextUpdate()</code>方法依赖<code>needUpdate</code>和上次的更新时间，来计算下次更新元数据的时间。当调用元数据对象的<code>requestUpdate()</code>方法和<code>update()</code>方法时，才会分别更新<code>needUpdate</code>和上次的更新时间。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Metadata</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> refreshBackoffMs; <span class="comment">// 更新失败时，下一次更新的补偿时间</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> metadataExpireMs; <span class="comment">// 每隔多久，更细一次元数据</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> version; <span class="comment">// 版本号，当更新一次元数据，版本号加一</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lastRefreshMs; <span class="comment">// 上一次更新的时间，更新失败也会更新这个值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lastSuccessfulRefreshMs; <span class="comment">// 上一次成功更新的时间</span></span><br><span class="line">  <span class="keyword">private</span> Cluster cluster; <span class="comment">// 集群的配置信息</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> needUpdate; <span class="comment">// 是否需要更新元数据</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">requestUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.needUpdate = <span class="keyword">true</span>; <span class="comment">// 需要更新元数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.version; <span class="comment">// 返回当前的版本号，这个版本号是旧的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">updateRequested</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.needUpdate;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">timeToNextUpdate</span><span class="params">(<span class="keyword">long</span> nowMs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> timeToExpire = needUpdate ? <span class="number">0</span> : Math.max(</span><br><span class="line">      <span class="keyword">this</span>.lastSuccessfulRefreshMs + <span class="keyword">this</span>.metadataExpireMs - nowMs, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">long</span> timeToAllowUpdate=<span class="keyword">this</span>.lastRefreshMs+<span class="keyword">this</span>.refreshBackoffMs-nowMs;</span><br><span class="line">    <span class="keyword">return</span> Math.max(timeToExpire, timeToAllowUpdate);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">awaitUpdate</span><span class="params">(<span class="keyword">int</span> lastVersion,<span class="keyword">long</span> maxWaitMs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> remainingWaitMs = maxWaitMs;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.version &lt;= lastVersion) &#123;</span><br><span class="line">      <span class="keyword">if</span> (remainingWaitMs != <span class="number">0</span>) wait(remainingWaitMs); <span class="comment">// 等待</span></span><br><span class="line">      <span class="keyword">long</span> elapsed = System.currentTimeMillis() - begin;</span><br><span class="line">      <span class="keyword">if</span> (elapsed &gt;= maxWaitMs) <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"failed"</span>)</span><br><span class="line">      remainingWaitMs = maxWaitMs - elapsed;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Cluster cluster, <span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.needUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.version += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.lastRefreshMs = now;</span><br><span class="line">    <span class="keyword">this</span>.lastSuccessfulRefreshMs = now;</span><br><span class="line">    <span class="keyword">for</span>(Listener listener:listeners) listener.onMetadataUpdate(cluster);</span><br><span class="line">    <span class="keyword">this</span>.cluster = cluster;</span><br><span class="line">    notifyAll(); <span class="comment">// 通知</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>元数据对象的每个方法都加上了<code>synchronized</code>关键字，即使有多个客户端线程（用户线程）使用同一个生产者示例，并且访问相同的元数据对象，也是线程安全的。<code>awaitUpdate()</code>方法只会被生产者在的<code>waitOnMetadata()</code>方法调用。如果元数据的版本号（<code>this.version</code>）小于上一次的版本号（<code>lastVersion</code>），用户线程会通过<code>wait()</code>进入阻塞状态。调用元数据对象的<code>update()</code>方法，更新版本号，并通知用户线程退出<code>awaitUpdate()</code>方法。</p>
<p>元数据对象除了会更新元数据内容，还有一个保存集群配置的<code>Cluster</code>对象。<code>Cluster</code>保存了分区信息相关的变量，分区信息包括分区的主副本、<code>ISR</code>、<code>AR</code>等内容。第二章生产者客户端发送消息时，利用“分区信息”为消息指定分区编号。本章从控制器、<code>LeaderAndIsr</code>请求，最后到<code>Metadata</code>请求，与第二章的“分区信息”互相呼应，算是画上了一个圆满的句号。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster</span> </span>&#123; <span class="comment">// 集群配置</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Node&gt; nodes;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; unauthorizedTopics;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;TopicPartition, PartitionInfo&gt; partitionsByTopicPartition;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;PartitionInfo&gt;&gt; partitionsByTopic;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;PartitionInfo&gt;&gt; availablePartitionsByTopic;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, List&lt;PartitionInfo&gt;&gt; partitionsByNode;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; nodesById;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartitionInfo</span> </span>&#123; <span class="comment">// 分区信息</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> partition;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Node leader;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Node[] replicas;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Node[] inSyncReplicas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-_元数据更新的日志与实例">3. 元数据更新的日志与实例</h4><p>下面举例了生产者发送两条消息，为了模拟发送第一条消息时，生产者必须要等待元数据更新完成。下面的代码会在第一条消息发送完成后等待一秒钟才发送第二条消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者发送消息的示例</span></span><br><span class="line">KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">log.info(<span class="string">"start producer client app"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"start send #1 message..."</span>);</span><br><span class="line">producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test"</span>, <span class="string">"m1"</span>));</span><br><span class="line">log.info(<span class="string">"sending #1 message end.."</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>); <span class="comment">// 等待一秒才发送第二条消息</span></span><br><span class="line">log.info(<span class="string">"start send #2 message..."</span>);</span><br><span class="line">producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test"</span>, <span class="string">"m2"</span>));</span><br><span class="line">log.info(<span class="string">"sending #2 message end.."</span>);</span><br></pre></td></tr></table></figure>
<p>为了更清晰地理解元数据、<code>NetworkClient</code>一些变量的含义，在必要的地方加上了日志（比如<code>needUpdate</code>、<code>metadataTimeout</code>等）。将日志级别调成<code>TRACE</code>后，更详细的日志如下。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">18:00:04</span>,<span class="number">596</span>] TRACE Starting the Kafka producer</span><br><span class="line"><span class="list">[<span class="keyword">18:00:04</span>,<span class="number">939</span>] DEBUG Updated cluster metadata version <span class="number">1</span> to Cluster<span class="list">(</span><br><span class="line">  nodes = <span class="list">[<span class="keyword">localhost:9092</span> <span class="list">(<span class="keyword">id:</span> <span class="number">-1</span> rack: null)</span>], partitions = <span class="list">[])</span><br><span class="line"><span class="list">[<span class="keyword">18:00:05</span>,<span class="number">077</span>] DEBUG Starting Kafka producer I/O thread.</span><br><span class="line"><span class="list">[<span class="keyword">18:00:05</span>,<span class="number">079</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"><span class="list">[<span class="keyword">18:00:05</span>,<span class="number">094</span>] DEBUG Kafka producer started</span><br><span class="line"><span class="list">[<span class="keyword">18:00:05</span>,<span class="number">094</span>] INFO start producer client app <span class="list">(<span class="keyword">kafka.examples.Producer</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">103</span>] INFO start send #<span class="number">1</span> message... <span class="list">(<span class="keyword">kafka.examples.Producer</span>)</span></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">109</span>] TRACE Requesting metadata update for topic test. 【1】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">109</span>] TRACE Waking up Sender thread for metadata update.</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">111</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] awaitUpdate begin...</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">117</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">117</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: true</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">118</span>] INFO <span class="list">[<span class="keyword">MetadataUpdater</span>] metadataTimeout: <span class="number">0</span></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">118</span>] DEBUG Initialize connection to node1 for send metadata request</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">118</span>] DEBUG Initiating connection to node1 at localhost:9092. 【2】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">241</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">241</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">246</span>] DEBUG Completed connection to node <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">246</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">246</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: true</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">247</span>] INFO <span class="list">[<span class="keyword">MetadataUpdater</span>] metadataTimeout: <span class="number">0</span></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">443</span>] DEBUG Sending metadata request &#123;topics=<span class="list">[<span class="keyword">test</span>]&#125; to node <span class="number">-1</span> 【3】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">444</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">444</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">448</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">448</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: true</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">449</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:2147483647</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">449</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">628</span>] DEBUG Updated cluster metadata version <span class="number">2</span> to Cluster<span class="list">( 【4】</span><br><span class="line">  nodes = <span class="list">[<span class="keyword">192.168.199.101:9092</span> <span class="list">(<span class="keyword">id:</span> <span class="number">0</span> rack: null)</span>], partitions = <span class="list">[</span><br><span class="line">   Partition<span class="list">(<span class="keyword">topic=test</span>,partition=1,leader=0,replicas=<span class="list">[<span class="keyword">0</span>,],isr=<span class="list">[<span class="keyword">0</span>,], </span><br><span class="line">   Partition<span class="list">(<span class="keyword">topic=test</span>,partition=0,leader=0,replicas=<span class="list">[<span class="keyword">0</span>,],isr=<span class="list">[<span class="keyword">0</span>,], </span><br><span class="line">   Partition<span class="list">(<span class="keyword">topi</span> =test,partition=2,leader=0,replicas=<span class="list">[<span class="keyword">0</span>,],isr=<span class="list">[<span class="keyword">0</span>,]])</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">628</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] awaitUpdate end...</span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">628</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">628</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: false</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">629</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:299839</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">629</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">636</span>] TRACE Sending record ProducerRecord<span class="list">(<span class="keyword">topic=test</span>, partition=null,</span><br><span class="line">  key=null, value=m1, timestamp=null)</span> with callback null to topic test_0 【5】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">636</span>] TRACE Allocating a new <span class="number">16384</span> byte message buffer for test_0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">700</span>] TRACE Waking up the sender, test_0 is full or a new batch 【6】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">700</span>] INFO sending #<span class="number">1</span> message end.. <span class="list">(<span class="keyword">kafka.examples.Producer</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">702</span>] INFO <span class="list">[<span class="keyword">accumulator</span>] batch: test-0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">702</span>] INFO <span class="list">[<span class="keyword">accumulator</span>] ready expired: true</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">702</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: false</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">703</span>] DEBUG Initiating connection to node <span class="number">0</span> at localhost:9092. 【7】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">704</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">705</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:299767</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">705</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">706</span>] DEBUG Completed connection to node <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">706</span>] INFO <span class="list">[<span class="keyword">accumulator</span>] batch: test-0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">707</span>] INFO <span class="list">[<span class="keyword">accumulator</span>] ready expired: true</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">707</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: false</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">707</span>] INFO <span class="list">[<span class="keyword">accumulator</span>] drained batch: test-0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">718</span>] TRACE Nodes with data ready to send: <span class="list">[<span class="keyword">localhost:9092</span>]</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">719</span>] TRACE Created <span class="number">1</span> produce requests: <span class="list">[<span class="keyword">ClientRequest</span><span class="list">( 【8】</span><br><span class="line">  expectResponse=true,callback=o.a.k.c.p.internals.Sender$1@6008d3ea, </span><br><span class="line">  request=RequestSend<span class="list">(<span class="keyword">header=</span>&#123;.&#125;, body=&#123;acks=1,timeout=30000,</span><br><span class="line">    topic_data=<span class="list">[&#123;topic=test,data=<span class="list">[&#123;partition=0,</span><br><span class="line">      record_set=HeapByteBuffer<span class="list">[<span class="keyword">pos=0</span> lim=36 cap=16384]</span><br><span class="line">  &#125;]&#125;]&#125;), createdTimeMs=1494151215706, sendTimeMs=0)]</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">719</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:1</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">720</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] poll timeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">720</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:299761</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">720</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">720</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">721</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: false</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">721</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:299747</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">721</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">737</span>] TRACE Received produce response from node <span class="number">0</span> 【9】</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">740</span>] TRACE Produced messages to test-0 with base offset offset <span class="number">11</span>.</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">741</span>] INFO <span class="list">[<span class="keyword">Sender</span>] readyNodes:0</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">741</span>] INFO <span class="list">[<span class="keyword">Metadata</span>] needUpdate: false</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">741</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] metadataTimeout:299726</span><br><span class="line"><span class="list">[<span class="keyword">18:00:15</span>,<span class="number">741</span>] INFO <span class="list">[<span class="keyword">NetworkClient</span>] select timeout:30000</span><br><span class="line"></span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">705</span>] INFO start send #<span class="number">2</span> message... <span class="list">(<span class="keyword">kafka.examples.Producer</span>)</span></span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">706</span>] TRACE <span class="list">[<span class="keyword">KafkaProducer</span>] waitedOnMetadataMs: <span class="number">0</span></span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">706</span>] TRACE Sending record ProducerRecord<span class="list">(<span class="keyword">topic=test</span>, partition=null,</span><br><span class="line">  key=null, value=m2, timestamp=null)</span> with callback null to test_2</span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">706</span>] TRACE Allocating a new <span class="number">16384</span> byte message buffer for test_2</span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">706</span>] TRACE Waking up the sender, test_2 is full or a new batch</span><br><span class="line"><span class="list">[<span class="keyword">18:00:16</span>,<span class="number">706</span>] INFO sending #<span class="number">2</span> message end.. <span class="list">(<span class="keyword">kafka.examples.Producer</span>)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
<p>如图1所示，将上面日志中一些重要的时间点与事件抽取出来，具体步骤如下。</p>
<ol>
<li>第一次发送消息，唤醒发送线程，等待元数据更新完成；</li>
<li>初始化网络连接，为发送元数据请求做准备；</li>
<li>生产者发送元数据请求；</li>
<li>收到元数据响应，更新元数据对象，步骤(1)等待元数据更新完成正式结束；</li>
<li>生产者发送消息的流程接着执行，为消息指定分区，追加消息到记录收集器；</li>
<li>创建新的批记录（RecordBatch），再次唤醒发送线程；</li>
<li>从记录收集器中获取准备好的目标代理节点，并初始化网络连接，准备发送生产请求；</li>
<li>从记录收集器中再次获取准备好的节点，并获取需要发送的数据，创建生产请求；</li>
<li>发送生产请求，并等待响应结果，一批记录（实际上只有一条记录）的发送流程结束。</li>
</ol>
<p><img src="http://img.blog.csdn.net/20170507223930619" alt="7"></p>
<p>图1 生产者发送消息与更新元数据的过程</p>
<h3 id="客户端线程模型（Thread_Model）">客户端线程模型（Thread Model）</h3><p>Kafka作为一个流式数据平台，对开发者提供了三种客户端：生产者/消费者、连接器、流处理。本文着重分析这三种客户端的线程模型。</p>
<h4 id="消费者的线程模型">消费者的线程模型</h4><p>0.8版本以前的消费者客户端会创建一个基于ZK的消费者连接器，一个消费者客户端是一个Java进程，消费者可以订阅多个主题，每个主题也可以多个线程。为了让消息在多个节点被分布式地消费，提高消息处理的吞吐量，Kafka允许多个消费者订阅同一个主题，这些消费者需要满足“一个分区只能被一个消费者中的一个线程处理”的限制条件。通常，我们会将同一份相同业务处理逻辑的应用程序部署在不同机器上，并且指定一个消费组编号。当不同机器上的消费者进程启动后，所有这些消费者进程就组成了一个逻辑意义上的消费组。</p>
<p>消费组中的消费者数量是动态变化的，当有新消费者加入消费组，或者旧消费者离开消费组，都会触发基于ZK的消费组“再平衡”操作。当“再平衡”操作发生时，每个消费者都会在客户端执行分区分配算法，然后从全局的分配结果中获取属于自己的分区。它的缺点是消费者会和ZK产生频繁的交互，造成ZK集群的压力过大，并且容易产生羊群效应和脑裂等问题。</p>
<p>在0.8版本以后，Kafka重新设计了客户端，并且引入了“协调者”和“消费组管理协议”。新的消费者将“消费组管理协议”和“分区分配策略”进行了分离。协调者负责消费组的管理，而分区分配则会在消费组的一个主消费者中完成。采用这种方式，每个消费者都需要发送下面两种请求给协调者。</p>
<ul>
<li><strong>加入组请求：</strong>协调者收集消费组的所有消费者，并选举一个主消费者执行分区分配工作。</li>
<li><strong>同步组请求：</strong>主消费者完成分区分配，由协调者将分区的分配结果传播给每个消费者。</li>
</ul>
<p>新版本的消费者客户端引入了一个客户端协调者的抽象类，它的实现除了消费者的协调者，还有一个连接器的实现。</p>
<h4 id="连接器的线程模型">连接器的线程模型</h4><p>Kafka连接器的出现标准化了Kafka与各种外部存储系统的数据同步。用户开发和使用连接器就变得非常简单，只需要在配置文件中定义连接器，就可以将外部系统的数据导入Kafka或将Kafka数据导出到外部系统。如图1所示，中间部分都是Kafka连接器的内部组件，包括源连接器（Source Connector）和目标连接器（Sink Connector）。</p>
<p><img src="http://img.blog.csdn.net/20170514212056357" alt="1"></p>
<p><strong>图1 Kafka连接器的源连接器与目标连接器</strong></p>
<p>Kafka连接器的单机模式会在一个进程内启动一个Worker以及所有的连接器和任务。分布式模式的每个进程都有一个Worker，而连接器和任务则分别运行在各个节点上。图2列举了连接器和任务在不同Worker上的四种分布方式：</p>
<ol>
<li>一个Worker，一个源任务、一个目标任务</li>
<li>一个Worker，两个源任务、两个目标任务</li>
<li>两个Worker，两个源任务、两个目标任务</li>
<li>三个Worker，两个源任务、两个目标任务</li>
</ol>
<p><img src="http://img.blog.csdn.net/20170515130348447" alt="2"></p>
<p><strong>图2 分布式模式的Kafka连接器集群</strong></p>
<p>分布式模式下，不同Worker进程之间的协调工作类似于消费者的协调。消费者通过协调者获取分配的分区，Worker也会通过协调者获取分配的连接器与任务。如图3所示，消费者客户端和Worker客户端为了加入到组管理中，分别通过客户端的协调者对象来和服务端的消费组协调者（GroupCoordinator）通信。</p>
<p><img src="http://img.blog.csdn.net/20170526103919908" alt="8"></p>
<p><strong>图3 消费者和Worker的工作都是通过协调者分配的</strong></p>
<h4 id="流处理的线程模型">流处理的线程模型</h4><p>Kafka流处理的工作流程简单来看分成三个步骤：消费者读取输入分区的数据、流式地处理每条数据、生产者将处理结果写入输出分区，这里面步骤1也充分利用了“消费组管理协议”。Kafka流处理的输入数据源基于具有分布式分区模型的Kafka主题，它的线程模型主要由下面三个类组成：</p>
<ul>
<li><strong>流实例（KafkaStreams）：</strong>通常一个节点（一台机器）只运行一个流实例。</li>
<li><strong>流线程（StreamThread）：</strong>一个流实例可以配置多个流线程。</li>
<li><strong>流任务（StreamTask）：</strong>一个流线程可以运行多个流任务，根据输入主题的分区数确定任务数。</li>
</ul>
<p>如图4所示，输入主题有六个分区，Kafka流处理总共就会产生六个流任务。流实例可以动态扩展，流线程的个数也可以动态配置。图中一共有三个流线程，则每个流线程会有两个流任务，每个流任务都对应输入主题的一个分区。</p>
<p><img src="http://img.blog.csdn.net/20170614142554625" alt="4"></p>
<p><strong>图4 Kafka流处理的线程模型</strong> </p>
<p>Kafka的流处理框架使用并行的线程模型处理输入主题的数据集，这种设计思路和Kafka的消费者线程模型非常类似。消费者分配到订阅主题的不同分区，流处理框架的流任务也分配到输入主题的不同分区。如图5所示，输入主题1的分区P1和输入主题2的分区P1分配给流线程1的流任务，输入主题1的分区P2和输入主题2的分区P2分配给流线程2的流任务。流处理相比消费者，还会将拓扑的计算结果写到输出主题。</p>
<p><img src="http://img.blog.csdn.net/20170530171408924" alt="5"></p>
<p><strong>图5 消费者模型与流处理的线程模型</strong> </p>
<p>消费者和流处理的故障容错机制也是类似的。如图6所示，假设消费者2进程挂掉，它所持有的分区会被分配给同一个消费组中的消费者1，这样消费者1会分配到订阅主题的所有分区。对于流处理而言，如果流线程2挂掉了，流线程2中的流任务会分配给流线程1。即流线程1会运行两个流任务，每个流任务分配的分区仍然保持不变。</p>
<p><img src="http://img.blog.csdn.net/20170530171420377" alt="6">·</p>
<p><strong>图6 消费者与流处理的故障容错机制</strong> </p>
<h4 id="小结">小结</h4><p>Kafka客户端抽象出来的的“组管理协议”充分运用在消费者、连接器、流处理三个使用场景中。客户端中的消费者、连接器中的工作者、流处理中的流进程都可以看做“组”的一个成员。当增加或减少组成员时，在这个协议的约束下，每个组成员都可以获取到最新的任务，从而做到无缝的任务迁移。一旦理解了“组管理协议”，对于理解Kafka的架构设计是很有帮助的。</p>
<p>参考文档</p>
<ul>
<li>《Kafka技术内幕》</li>
</ul>
<h3 id="即席查询（Interactive_Query）">即席查询（Interactive Query）</h3><p>参考文档：</p>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-67%3A+Queryable+state+for+Kafka+Streams" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/KAFKA/KIP-67%3A+Queryable+state+for+Kafka+Streams</a></li>
<li><a href="https://docs.confluent.io/current/streams/developer-guide/interactive-queries.html" target="_blank" rel="external">https://docs.confluent.io/current/streams/developer-guide/interactive-queries.html</a></li>
<li><a href="http://kafka.apache.org/10/documentation/streams/developer-guide#streams_interactive_queries" target="_blank" rel="external">http://kafka.apache.org/10/documentation/streams/developer-guide#streams_interactive_queries</a></li>
</ul>
<h3 id="全局表（Global_Tables）">全局表（Global Tables）</h3><ul>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-99%3A+Add+Global+Tables+to+Kafka+Streams" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/KAFKA/KIP-99%3A+Add+Global+Tables+to+Kafka+Streams</a></li>
</ul>
<h3 id="EOS事务（Transaction）">EOS事务（Transaction）</h3><p>参考文档</p>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-98+-+Exactly+Once+Delivery+and+Transactional+Messaging" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/KAFKA/KIP-98+-+Exactly+Once+Delivery+and+Transactional+Messaging</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/Transactional+Messaging+in+Kafka" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/KAFKA/Transactional+Messaging+in+Kafka</a></li>
</ul>
<p><img src="" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kafka技术内幕拾遗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ 客户端元数据（Metadata）&lt;/li&gt;
&lt;li&gt;✅ 客户端线程模型（ThreadModel）&lt;/li&gt;
&lt;li&gt;即席查询（Interactive Query）&lt;/li&gt;
&lt;li&gt;EOS事务（Transaction）
    
    </summary>
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/categories/kafka/"/>
    
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka技术内幕附录</title>
    <link href="http://github.com/zqhxuyuan/2017/12/31/Kafka-Book-Appendix/"/>
    <id>http://github.com/zqhxuyuan/2017/12/31/Kafka-Book-Appendix/</id>
    <published>2017-12-30T16:00:00.000Z</published>
    <updated>2017-10-19T05:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kafka技术内幕附录<br><a id="more"></a></p>
<h1 id="第11章：附录">第11章：附录</h1><h2 id="11-1_Kafka基本操作">11.1 Kafka基本操作</h2><h3 id="11-1-1_创建、修改、删除、查看主题">11.1.1 创建、修改、删除、查看主题</h3><p>我们可以手动创建主题或者让Kafka自动创建主题，手动创建主题必须指定分区数和副本因子。如果服务端开启了自动创建主题，新数据写入一个不存在的主题，服务端会自动创建这个主题。自动模式下主题的配置信息在server.properties文件中，比如分区数默认只有一个。因为分区是Kafka的最小并行单位，所以我们一般会根据集群规模设置合理的分区数，来达到客户端和服务端的负载均衡。副本因子（<code>replication-factor</code>）是分区的副本数量，每条消息会复制到多个节点上，一般设置为3个副本。假设副本数为<em>N</em>，则最多允许<em>N</em> - 1个节点宕机。 下面的实验在本机安装Kafka，假设ZK的端口为2181，Kafka的端口为9092。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 创建主题</span></span><br><span class="line">$ bin/kafka-topics.sh --zookeeper localhost:<span class="number">2181</span> --create \</span><br><span class="line">    --topic test --partitions <span class="number">1</span> --replication-factor <span class="number">3</span></span><br><span class="line"><span class="preprocessor"># 修改主题的分区数</span></span><br><span class="line">$ bin/kafka-topics.sh --zookeeper localhost:<span class="number">2181</span> --alter \</span><br><span class="line">    --topic test --partitions <span class="number">2</span></span><br><span class="line"><span class="preprocessor"># 列出所有的主题</span></span><br><span class="line">$ bin/kafka-topics.sh --<span class="built_in">list</span> --zookeeper localhost:<span class="number">2181</span></span><br><span class="line">test</span><br><span class="line"><span class="preprocessor"># 查看某个主题的详细信息</span></span><br><span class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:<span class="number">2181</span> --topic test</span><br><span class="line">Topic:test  PartitionCount:<span class="number">1</span>    ReplicationFactor:<span class="number">1</span> Configs:</span><br><span class="line">    Topic: test Partition: <span class="number">0</span>    主副本: <span class="number">0</span>   Replicas: <span class="number">0</span> Isr: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>在0.8.2版本之后，Kafka提供了删除主题的功能，但是默认并不会直接将Topic数据物理删除。如果要启用物理删除（即删除主题后，日志文件也会一同删除），需要在server.properties中设置<code>delete.topic.enable=true</code>。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh <span class="comment">--zookeeper localhost:2181 --delete --topic test</span></span><br><span class="line">Topic test is marked for deletion.</span><br><span class="line">Note: This will have no impact if <span class="operator"><span class="keyword">delete</span>.topic.<span class="keyword">enable</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="literal">true</span>.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">bin</span>/kafka-topics.sh <span class="comment">--list --zookeeper localhost:2181</span></span><br><span class="line"><span class="keyword">test</span> - marked <span class="keyword">for</span> deletion</span></span><br></pre></td></tr></table></figure>
<p>管理员创建好主题后，主题会被生产者和消费者使用。注意下面的实验中，新版本的生产者和消费者都是使用Broker地址连接Kafka集群，旧版本的消费者则使用ZK地址连接Kafka集群。</p>
<h3 id="11-1-2_生产者和消费者">11.1.2 生产者和消费者</h3><p>在终端控制台模拟生产消息和消费消息，每个控制台的消费者都会被分配唯一的消费组：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 生产者</span></span><br><span class="line">$ bin/kafka-console-producer.sh --broker-<span class="built_in">list</span> localhost:<span class="number">9092</span> --topic test</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="preprocessor"># 旧消费者（控制台）</span></span><br><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:<span class="number">2181</span> --topic test</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="preprocessor"># 新消费者（控制台）</span></span><br><span class="line">$ bin/kafka-console-consumer.sh --bootstrap-server localhost:<span class="number">9092</span> \</span><br><span class="line">  --<span class="keyword">new</span>-consumer --topic test --from-beginning</span><br></pre></td></tr></table></figure>
<p>执行查看消费组列表的操作，可以列出当前活动的消费组，默认控制台的消费组是<code>console-consumer</code>加上一个随机数。上面由于分别启动了两个版本的消费者，所以对应了两个消费组。当然，也可以在控制台通过其他参数来指定消费组。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 查看使用旧消费者的消费组列表</span></span><br><span class="line">$ bin/kafka-consumer-groups.sh --<span class="built_in">list</span> --zookeeper localhost:<span class="number">2181</span></span><br><span class="line">console-consumer-<span class="number">36296</span></span><br><span class="line"><span class="preprocessor"># 查询使用新消费者的消费组列表</span></span><br><span class="line">$ bin/kafka-consumer-groups.sh --<span class="built_in">list</span> --bootstrap-server localhost:<span class="number">9092</span></span><br><span class="line">console-consumer-<span class="number">89231</span></span><br></pre></td></tr></table></figure>
<p>查看消费组对某个主题的消费状态，需要指定主题和消费组，这会打印出主题的所有分区、日志的大小、所属的消费者等。<br>采用新消费者方式的<code>Owner</code>为<code>none</code>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-consumer-offset-checker.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">  --topic test --group console-consumer-<span class="number">36296</span></span><br><span class="line">Group         Topic Pid Offset logSize Lag Owner</span><br><span class="line">console-<span class="number">36296</span> test  <span class="number">0</span>   <span class="number">2</span>      <span class="number">2</span>       <span class="number">0</span>   dp0652-f94edaea-<span class="number">0</span></span><br><span class="line">console-<span class="number">36296</span> test  <span class="number">1</span>   <span class="number">1</span>      <span class="number">1</span>       <span class="number">0</span>   dp0652-f94edaea-<span class="number">0</span></span><br><span class="line">console-<span class="number">36296</span> test  <span class="number">2</span>   <span class="number">2</span>      <span class="number">2</span>       <span class="number">0</span>   dp0652-f94edaea-<span class="number">0</span></span><br><span class="line"></span><br><span class="line">$ bin/kafka-consumer-offset-checker.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">  --topic test --group console-consumer-<span class="number">89231</span></span><br><span class="line">Group         Topic Pid Offset logSize Lag Owner</span><br><span class="line">console-<span class="number">89231</span> test  <span class="number">0</span>   <span class="number">2</span>      <span class="number">2</span>       <span class="number">0</span>   none</span><br><span class="line">console-<span class="number">89231</span> test  <span class="number">1</span>   <span class="number">1</span>      <span class="number">1</span>       <span class="number">0</span>   none</span><br><span class="line">console-<span class="number">89231</span> test  <span class="number">2</span>   <span class="number">2</span>      <span class="number">2</span>       <span class="number">0</span>   none</span><br></pre></td></tr></table></figure>
<h3 id="11-1-3_扩展集群">11.1.3 扩展集群</h3><p>要向已有的Kafka集群添加新节点，我们只需要保证<code>broker.id</code>编号是唯一的，即可启动Kafka服务。但是新节点不会自动地分配到分区，除非在新加节点之后，新创建了主题。因此，通常我们希望在新添加节点后，能够将旧节点上的分区迁移一部分到新节点上，从而达到负载均衡的目的。迁移分区，实际上是将新节点作为分区的备份副本，当新节点完全复制了一个分区的所有数据，并且加入分区的ISR集合后，旧节点已有的一个副本就会被删除。在整个迁移过程中，分区的副本数保持不变，只不过分区的所属节点从旧节点迁移到了新节点。Kafka提供了分区重新分配（<code>partition reassignment tool</code>）的工具来在不同节点之间移动分区，但该工具并不会自动学习Kafka集群的数据分布来移动分区达到数据的均匀分布，管理员需要手动指定哪些主题或分区需要移动。使用该工具需要执行下面的3个步骤。</p>
<ol>
<li><code>--generate</code>：给定主题和需要移动到的目标节点，生成候选的分区分配计划。</li>
<li><code>--execute</code>：根据上一步的分区分配计划或者手动定义的计划执行数据迁移的任务。</li>
<li><code>--verify</code>：验证上一步执行任务涉及的所有分区的分配状态是否已经完成。</li>
</ol>
<p>下面的示例会将<code>foo1</code>和<code>foo2</code>主题的所有分区全部移动到新的节点5、6上，最后这两个主题的所有分区都只在5、6节点上。第一步生成计划时，会列举出当前主题所有分区目前所在的节点，如果执行失败，管理员还可以进行回滚操作。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># [<span class="number">1</span>] 生成分区分配计划，指定需要移动的主题和需要移动到的目标节点</span></span><br><span class="line">$ cat topics-to-move.json</span><br><span class="line">&#123;<span class="string">"topics"</span>: [&#123;<span class="string">"topic"</span>: <span class="string">"foo1"</span>&#125;, &#123;<span class="string">"topic"</span>: <span class="string">"foo2"</span>&#125;], <span class="string">"version"</span>:<span class="number">1</span>&#125;</span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper localhost:<span class="number">2181</span> </span><br><span class="line">    --topics-to-move-json-file topics-to-move.json \</span><br><span class="line">    --broker-<span class="built_in">list</span> <span class="string">"5,6"</span> --generate</span><br><span class="line">Current partition replica assignment</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">2</span>,<span class="string">"replicas"</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">3</span>,<span class="number">4</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">2</span>,<span class="string">"replicas"</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">3</span>,<span class="number">4</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Proposed partition reassignment configuration</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">2</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">2</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># [<span class="number">2</span>] 执行分区重新分配的任务</span></span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">  --reassignment-json-file expand-cluster-reassignment.json --execute</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># [<span class="number">3</span>] 验证分区重新分配的进度</span></span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">    --reassignment-json-file expand-cluster-reassignment.json --verify</span><br><span class="line">Status of partition reassignment:</span><br><span class="line">Reassignment of partition [foo1,<span class="number">0</span>] completed successfully</span><br><span class="line">Reassignment of partition [foo1,<span class="number">1</span>] is in progress</span><br><span class="line">Reassignment of partition [foo1,<span class="number">2</span>] is in progress</span><br><span class="line">Reassignment of partition [foo2,<span class="number">0</span>] completed successfully</span><br><span class="line">Reassignment of partition [foo2,<span class="number">1</span>] completed successfully</span><br><span class="line">Reassignment of partition [foo2,<span class="number">2</span>] completed successfully</span><br></pre></td></tr></table></figure>
<p>除了给定主题，由工具生成所有分区的执行计划，我们也可以直接指定主题需要迁移的分区（当然在<code>execute</code>阶段，工具还是会列出指定主题分区当前所在的节点）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat custom-reassignment.json</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>,<span class="string">"partitions"</span>:[</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">]&#125;</span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">  --reassignment-json-file custom-reassignment.json --execute</span><br><span class="line">Current partition replica assignment</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">3</span>,<span class="number">4</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Save <span class="keyword">this</span> to use as the --reassignment-json-file option during rollback</span><br><span class="line">Successfully started reassignment of partitions</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo1"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;,</span><br><span class="line">  &#123;<span class="string">"topic"</span>:<span class="string">"foo2"</span>,<span class="string">"partition"</span>:<span class="number">1</span>,<span class="string">"replicas"</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，迁移工具还适用于给分区增加副本数。增加副本数是复制（而不是移动）已有的分区到其他节点，不管使用手动还是自动生成的分配计划，都要包含分区之前所在的节点。下面的示例中，<code>foo</code>主题的分区0只有一个副本是存在节点5上，增加到3个副本后，存在的节点有5、6、7这3个节点。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cat increase-replication-factor.json</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">    --reassignment-json-file increase-replication-factor.json --execute</span><br><span class="line">Current partition replica assignment</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[&#123;</span><br><span class="line">    <span class="string">"topic"</span>:<span class="string">"foo"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Save <span class="keyword">this</span> to use as the --reassignment-json-file option during rollback</span><br><span class="line">Successfully started reassignment of partitions</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>, <span class="string">"partitions"</span>:[</span><br><span class="line">    &#123;<span class="string">"topic"</span>:<span class="string">"foo"</span>,<span class="string">"partition"</span>:<span class="number">0</span>,<span class="string">"replicas"</span>:[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 副本数为一个时的主题信息</span></span><br><span class="line">$ bin/kafka-topics.sh --zookeeper localhost:<span class="number">2181</span> --topic foo --describe</span><br><span class="line">Topic:foo PartitionCount:<span class="number">1</span>  ReplicationFactor:<span class="number">1</span> Configs:</span><br><span class="line">    Topic: foo  Partition: <span class="number">0</span>  主副本: <span class="number">5</span> Replicas: <span class="number">5</span> Isr: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 增加副本数后的主题信息</span></span><br><span class="line">$ bin/kafka-topics.sh --zookeeper localhost:<span class="number">2181</span> --topic foo --describe</span><br><span class="line">Topic:foo PartitionCount:<span class="number">1</span>  ReplicationFactor:<span class="number">3</span> Configs:</span><br><span class="line">    Topic: foo  Partition: <span class="number">0</span>  主副本: <span class="number">5</span> Replicas: <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> Isr: <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>修改主题的分区数可以直接采用修改主题的方式，但是修改分区的副本数涉及数据的复制，需要用到上面的分区迁移工具。</p>
</blockquote>
<h2 id="11-2_安全机制（Security）">11.2 安全机制（<code>Security</code>）</h2><p>Kafka的安全机制主要分为下面两个部分：</p>
<ul>
<li>身份认证（<code>Authentication</code>）：对客户端与服务器的连接进行身份认证。Kafka目前支持<code>SSL</code>、<code>SASL/Kerberos</code>、<code>SASL/PLAIN</code>三种认证机制。</li>
<li>权限控制（<code>Authorization</code>）：对消息级别的访问控制列表（ACL）权限控制。</li>
</ul>
<p>下面以<code>SASL/PLAIN</code>的身份认证为例，服务端需要先修改下面三个配置文件，然后启动服务端：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vi config/server.properties</span><br><span class="line">listeners=<span class="constant">SASL_PLAINTEXT</span><span class="symbol">://localhost</span><span class="symbol">:</span><span class="number">9092</span></span><br><span class="line">security.inter.broker.protocol=<span class="constant">SASL_PLAINTEXT</span></span><br><span class="line">sasl.mechanism.inter.broker.protocol=<span class="constant">PLAIN</span></span><br><span class="line">sasl.enabled.mechanisms=<span class="constant">PLAIN</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>vi config/jaas.conf</span><br><span class="line"><span class="constant">KafkaServer</span> &#123;</span><br><span class="line">  org.apache.kafka.common.security.plain.<span class="constant">PlainLoginModule</span> required</span><br><span class="line">  username=<span class="string">"admin"</span></span><br><span class="line">  password=<span class="string">"admin"</span></span><br><span class="line">  user_admin=<span class="string">"admin"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="constant">KafkaClient</span> &#123;</span><br><span class="line">  org.apache.kafka.common.security.plain.<span class="constant">PlainLoginModule</span> required</span><br><span class="line">  username=<span class="string">"admin"</span></span><br><span class="line">  password=<span class="string">"admin"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>vi bin/kafka-run-<span class="class"><span class="keyword">class</span>.<span class="title">sh</span></span></span><br><span class="line"><span class="constant">KAFKA_SASL_OPTS</span>=<span class="string">"-Djava.security.auth.login.config=../config/jaas.conf"</span></span><br><span class="line"><span class="constant">KAFKA_OPTS</span>=<span class="string">"$KAFKA_SASL_OPTS $KAFKA_OPTS"</span></span><br></pre></td></tr></table></figure>
<p>客户端也需要添加两个配置项，下面以控制台的生产者和消费者为例，说明客户端的身份认证：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vi config/producer<span class="class">.properties</span></span><br><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=PLAIN</span><br><span class="line"></span><br><span class="line">$ vi config/consumer<span class="class">.properties</span></span><br><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=PLAIN</span><br><span class="line"></span><br><span class="line">$ bin/kafka-console-producer<span class="class">.sh</span> --broker-list localhost:<span class="number">9092</span> \</span><br><span class="line">  --topic test-security --producer<span class="class">.config</span> config/producer<span class="class">.properties</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">$ bin/kafka-console-consumer<span class="class">.sh</span> --new-consumer \</span><br><span class="line">  --bootstrap-server localhost:<span class="number">9092</span> --topic test-security \</span><br><span class="line">  --from-beginning --consumer<span class="class">.config</span> config/consumer<span class="class">.properties</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>如果使用代码，还需要设置<code>java.security.auth.login.config</code>为系统的环境变量配置。下面是生产者使用身份认证的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置客户端登陆的身份认证机制，指定配置文件</span></span><br><span class="line">    System.setProperty(<span class="string">"java.security.auth.login.config"</span>, </span><br><span class="line">      <span class="string">"/Users/zhengqh/.../resources/kafka_client_jaas.conf"</span>);</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"client.id"</span>, <span class="string">"DemoProducer"</span>);</span><br><span class="line">    props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.IntegerSerializer"</span>);</span><br><span class="line">    props.put(<span class="string">"value.serializer"</span>,  <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">    props.put(<span class="string">"security.protocol"</span>, <span class="string">"SASL_PLAINTEXT"</span>); <span class="comment">// 安全协议类型</span></span><br><span class="line">    props.put(<span class="string">"sasl.mechanism"</span>, <span class="string">"PLAIN"</span>); <span class="comment">// 安全机制</span></span><br><span class="line">    KafkaProducer&lt;Integer, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">    ProducerRecord&lt;Integer, String&gt; record1 = <span class="keyword">new</span> ProducerRecord&lt;Integer, String&gt;(<span class="string">"test-security"</span>, <span class="number">1</span>, <span class="string">"one"</span>);</span><br><span class="line">    producer.send(record1, <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata recordMetadata,Exception e)</span></span>&#123;</span><br><span class="line">        System.out.println(recordMetadata);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    producer.flush();</span><br><span class="line">    producer.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们只分析了<code>SASL_PLAINTEXT</code>安全协议的例子，Kafka支持的其他安全协议以及权限认证可以参考官方的文档。另外，服务端与ZooKeeper以及服务端之间也都有安全机制和身份认证机制，这里就不再深入分析。</p>
<h2 id="11-3_Kafka配置">11.3 Kafka配置</h2><p>Kafka官方文档中针对服务端（代理节点）、主题、生产者、消费者都有完整的配置说明，下面列举了比较重要的一些配置项。</p>
<h3 id="11-3-1_服务端的配置项">11.3.1 服务端的配置项</h3><p>服务端的配置项参见表1。</p>
<p>表1 服务端配置信息</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>broker.id</code></td>
<td>Kafka服务器的编号，同一个集群不同节点的编号应该唯一</td>
</tr>
<tr>
<td><code>zookeeper.connect</code></td>
<td>连接ZooKeeper的地址，不同Kafka集群如果连接到同一个ZooKeeper，应该使用不同的chroot路径</td>
</tr>
<tr>
<td><code>auto.create.topics.enable</code></td>
<td>自动创建主题，默认为<code>true</code></td>
</tr>
<tr>
<td><code>auto.leader.rebalance.enable</code></td>
<td>开启主副本自动平衡，当节点宕机后，会影响这个节点上的主副本转移到其他节点，宕机的节点重启后只能作为备份副本，如果开启平衡，则会将主副本转移到原节点</td>
</tr>
<tr>
<td><code>delete.topic.enable</code></td>
<td>自动删除主题，默认为<code>false</code>，通过<code>delete</code>命令删除主题，并不会物理删除，只有开启该选项才会真正删除主题的日志文件</td>
</tr>
<tr>
<td><code>log.dirs</code></td>
<td>日志文件的目录，可以指定多个目录。默认是/tmp/kafka-logs</td>
</tr>
<tr>
<td><code>log.flush.interval.messages</code></td>
<td>在消息集刷写到磁盘之前需要收集的消息数量，默认值为<code>Long.MAX</code></td>
</tr>
<tr>
<td><code>log.flush.scheduler.interval.ms</code></td>
<td>日志刷新线程过久，检查一次是否有日志文件需要刷写到磁盘，默认值为<code>Long.MAX</code>。</td>
</tr>
<tr>
<td><code>log.retention.bytes</code></td>
<td>日志文件超过最大大小时删除旧数据，默认值为<code>-1</code>，即永不会删除</td>
</tr>
<tr>
<td><code>log.retention.hours</code></td>
<td>日志文件保留的时间，默认为168小时，即7天</td>
</tr>
<tr>
<td><code>log.segment.bytes</code></td>
<td>单个日志文件片段的最大值，默认为1 GB，日志超过1 GB后会刷写到磁盘</td>
</tr>
<tr>
<td><code>message.max.bytes</code></td>
<td>服务端接收的消息最大值，默认为1 MB，即一批消息最大不能超过1 MB</td>
</tr>
<tr>
<td><code>min.insync.replicas</code></td>
<td>当生产者的应答策略设置为<code>all</code>时，写操作的数量必须满足该值才算成功。默认值为<code>1</code>，表示只要写到一个节点就算成功</td>
</tr>
<tr>
<td><code>offsets.commit.required.acks</code></td>
<td>消费者提交偏移量和生产者写消息的行为类似，用应答来表示写操作是否成功，默认值为<code>-1</code></td>
</tr>
<tr>
<td><code>offsets.commit.timeout.ms</code></td>
<td>类似于生产者的请求超时时间，写请求会被延迟，默认5秒</td>
</tr>
<tr>
<td><code>offsets.topic.num.partitions</code></td>
<td>消费者提交偏移量内部主题的分区数量，默认为50个</td>
</tr>
<tr>
<td><code>offsets.topic.replication.factor</code></td>
<td>消费者提交偏移量内部主题的副本数量，默认为3个</td>
</tr>
<tr>
<td><code>replica.fetch.min.bytes</code></td>
<td>每个拉取请求最少要拉取的字节数量，默认为1byte。</td>
</tr>
<tr>
<td><code>replica.fetch.wait.max.ms</code></td>
<td>每个拉取请求的最大等待时间，默认为500毫秒</td>
</tr>
<tr>
<td><code>replica.lag.time.max.ms</code></td>
<td>备份副本在指定时间内都没有发送拉取请求，或者在这个时间内仍然没有赶上主副本，它将会被从ISR中移除，默认10秒</td>
</tr>
<tr>
<td><code>request.timeout.ms</code></td>
<td>客户端从发送请求到接收响应的超时时间，默认30秒</td>
</tr>
<tr>
<td><code>zookeeper.session.timeout.ms</code></td>
<td>ZooKeeper会话的超时时间，默认6秒</td>
</tr>
<tr>
<td><code>default.replication.factor</code></td>
<td>自动创建的主题的副本数，默认为1个</td>
</tr>
<tr>
<td><code>log.cleaner.delete.retention.ms</code></td>
<td>被删除的记录保存的时间，默认为1天</td>
</tr>
<tr>
<td><code>log.cleaner.enable</code></td>
<td>是否开启日志清理线程，当清理策略为<code>compact</code>时，建议开启</td>
</tr>
<tr>
<td><code>log.index.interval.bytes</code></td>
<td>添加1条索引到日志文件的间隔，默认为4096条</td>
</tr>
<tr>
<td><code>log.index.size.max.bytes</code></td>
<td>索引文件的最大大小，默认为10 MB</td>
</tr>
<tr>
<td><code>num.partitions</code></td>
<td>每个主题的分区数量，默认为1个</td>
</tr>
<tr>
<td><code>replica.fetch.max.bytes</code></td>
<td>拉取请求中每个分区的消息最大值，默认为1 MB</td>
</tr>
<tr>
<td><code>replica.fetch.response.max.bytes</code></td>
<td>整个拉取请求的消息最大值，默认为10 MB</td>
</tr>
</tbody>
</table>
<p>主题级别的一些配置和服务端级别的设置类似，比如<code>flush.messages</code>类似<code>log.flush.interval.messages</code>，表示刷写到磁盘的消息数量；<code>flush.ms</code>类似<code>log.flush.scheduler.interval.ms</code>，表示刷写到磁盘的时间间隔；<code>max.message.bytes</code>类似<code>message.max.bytes</code>，表示服务端接收的单条消息大小。</p>
<h3 id="11-3-2_生产者的配置项">11.3.2 生产者的配置项</h3><p>生产者配置信息参见表2。</p>
<p>表2 生产者配置信息</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bootstrap.servers</code></td>
<td>生产者客户端连接Kafka集群的地址和端口，多个节点用逗号分隔</td>
</tr>
<tr>
<td><code>acks</code></td>
<td>生产者请求要求主副本收到的应答数量满足后，写请求才算成功。<code>0</code>表示记录添加到网络缓冲区后就认为已经发送，生产者不会等待服务端的任何应答；<code>1</code>表示主副本会将记录到本地日志文件，但不会等待任何备份副本的应答；<code>-1</code>或<code>all</code>表示主副本必须等待ISR中所有副本都返回应答给它</td>
</tr>
<tr>
<td><code>retries</code></td>
<td>发送时出现短暂的错误或者收到错误码，客户端会重新发送记录。如果<code>max.in.flight.requests.per.connection</code>没有设置为<code>1</code>，在异常重试时，服务端收到的记录可能是乱序的</td>
</tr>
<tr>
<td><code>buffer.memory</code></td>
<td>生产者发送记录给服务端在客户端的缓冲区，默认为32 MB</td>
</tr>
<tr>
<td><code>batch.size</code></td>
<td>当多条记录发送到同一个分区，生产者会尝试将一批记录分成更少的请求，来提高客户端和服务端的性能，默认每一个Batch的大小为16 KB。如果一条记录就超过了16 KB，则这条记录不会和其他记录组成Batch。Batch太小会减小吞吐量，Batch太大会占用太多的内存</td>
</tr>
<tr>
<td><code>max.request.size</code></td>
<td>一个请求的最大值，实际上也是记录的最大值。注意服务端关于记录的最大值（Broker的<code>message.max.bytes</code>，或者Topic的<code>max.message.bytes</code>）可能和它不同（实际上默认值都是1 MB）。这个配置项会限制生产者一个请求中Batch的记录数，防止发送过大的请求</td>
</tr>
<tr>
<td><code>partitioner.class</code></td>
<td>消息的分区语义，对消息进行路由到指定的分区，实现分区接口</td>
</tr>
<tr>
<td><code>request.timeout.ms</code></td>
<td>客户端等待一个请求的响应的最长时间，超时后客户端会重新发送或失败</td>
</tr>
<tr>
<td><code>timeout.ms</code></td>
<td>服务端等待备份的应答来达到生产者设置的<code>ack</code>的最长时间，超时后不满足失败</td>
</tr>
</tbody>
</table>
<h3 id="11-3-3_新消费者的配置项">11.3.3 新消费者的配置项</h3><p>新消费者的配置信息参见表3。</p>
<p>表3 新消费者的配置信息</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fetch.min.bytes</code></td>
<td>拉取请求要求服务端返回的数据最小值，如果服务端的数据量还不够，客户端的请求会一直等待，直到服务端收集到足够的数据才会返回响应给客户端。默认值为1个字节，表示服务端处理的拉取请求数据量只要达到1个字节就立即收到响应，或者因为在等待数据的到达一直没有满足最小值时而超时后，拉取请求也会结束。将该值设置大一点，可以牺牲一些延迟来获取服务端更高的吞吐量</td>
</tr>
<tr>
<td><code>fetch.max.bytes</code></td>
<td>服务端对一个拉取请求返回数据的最大值，默认值为50 MB</td>
</tr>
<tr>
<td><code>fetch.max.wait.ms</code></td>
<td>在没有收集到满足<code>fetch.min.bytes</code>大小的数据之前，服务端对拉取请求的响应会阻塞直到超时，默认500毫秒</td>
</tr>
<tr>
<td><code>group.id</code></td>
<td>消费者所述的唯一消费组名称，在使用基于Kafka的偏移量管理策略，或者使用消费组管理协议的订阅方法时，必须指定消费组名称</td>
</tr>
<tr>
<td><code>heartbeat.interval.ms</code></td>
<td>使用消费组管理协议时消费者和协调者的心跳间隔，心跳用来确保消费者的会话保持活动的状态，以及当有新消费者加入或消费者离开时可以更容易地进行平衡，该选项必须比<code>session.timeout.ms</code>小，通常设置为不大于它的1/3。默认值为3秒，我们可以将心跳值设置得更低，来更好地控制平衡：需要平衡时，心跳间隔越短就能越快地感知到</td>
</tr>
<tr>
<td><code>max.partition.fetch.bytes</code></td>
<td>服务端返回的数据中每个分区的最大值，默认值为1 MB</td>
</tr>
<tr>
<td><code>session.timeout.ms</code></td>
<td>使用消费组管理协议检测到消费者失败的最大时间，消费者定时地向Broker发送心跳表示处于存活状态。服务端的Broker会记录消费者的心跳时间，如果在指定的会话时间内都没有收到消费者的心跳，Broker会将其从消费组中移除并启动一次平衡</td>
</tr>
<tr>
<td><code>auto.offset.reset</code></td>
<td>Kafka中没有分区的初始偏移量，消费者任何定位分区位置。<code>earliest</code>表示重置到最旧的位置；<code>latest</code>表示重置到最新的位置，默认值为<code>latest</code></td>
</tr>
<tr>
<td><code>enable.auto.commit</code></td>
<td>消费者的偏移量是否会在后台定时地提交，默认值为<code>true</code></td>
</tr>
<tr>
<td><code>auto.commit.interval.ms</code></td>
<td>消费者自动提交偏移量的时间间隔，默认值为5秒</td>
</tr>
<tr>
<td><code>max.poll.interval.ms</code></td>
<td>使用消费组管理协议时，在调用<code>poll()</code>之间的最大延迟，它设置了消费者在下一次拉取更多记录之前允许的最长停顿时间。如果超时后消费者仍然没有调用<code>poll()</code>，那么消费者就会被认为失败了，就会启动消费组的平衡，默认值为5秒</td>
</tr>
<tr>
<td><code>max.poll.records</code></td>
<td>在一次<code>poll()</code>调用中允许返回的最大记录数，默认值为500条</td>
</tr>
<tr>
<td><code>partition.assignment.strategy</code></td>
<td>使用消费者管理协议时，消费者实例之间用来进行分区分配的策略，默认值为<code>RangeAssignor</code></td>
</tr>
</tbody>
</table>
<h2 id="11-4_Kafka其他操作实验">11.4 Kafka其他操作实验</h2><h3 id="11-4-1_ZooKeeper连接配置">11.4.1 ZooKeeper连接配置</h3><p>Kafka的ZooKeeper配置和命令行的ZooKeeper地址不一致导致连接不上ZooKeeper，下面是server.properties的ZooKeeper连接配置，指定了Kafka在ZooKeeper中的根节点是<code>/kafka</code>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">broker.id=<span class="number">0</span></span><br><span class="line"><span class="preprocessor">#listeners=PLAINTEXT:<span class="comment">//:9092</span></span></span><br><span class="line">zookeeper.connect=localhost:<span class="number">2181</span>/kafka</span><br><span class="line"><span class="built_in">log</span>.dirs=/tmp/kafka-logs</span><br></pre></td></tr></table></figure>
<p>如果命令行中连接的ZooKeeper地址没有加上<code>/kafka</code>，创建主题会报错可用的节点为0，加上<code>/kafka</code>后可以成功创建主题：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics<span class="class">.sh</span> --create --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">--replication-factor <span class="number">1</span> --partitions <span class="number">1</span> --topic test</span><br><span class="line">Error while executing topic command : RF: <span class="number">1</span> larger than available brokers: <span class="number">0</span></span><br><span class="line">ERROR AdminOperationException: RF: <span class="number">1</span> larger than available brokers: <span class="number">0</span></span><br><span class="line">    at kafka<span class="class">.admin</span><span class="class">.AdminUtils</span>$.<span class="function"><span class="title">assignReplicasToBrokers</span><span class="params">(AdminUtils.scala:<span class="number">117</span>)</span></span></span><br><span class="line">    at kafka<span class="class">.admin</span><span class="class">.AdminUtils</span>$.<span class="function"><span class="title">createTopic</span><span class="params">(AdminUtils.scala:<span class="number">403</span>)</span></span></span><br><span class="line">    at kafka<span class="class">.admin</span><span class="class">.TopicCommand</span>$.<span class="function"><span class="title">createTopic</span><span class="params">(TopicCommand.scala:<span class="number">110</span>)</span></span></span><br><span class="line">    at kafka<span class="class">.admin</span><span class="class">.TopicCommand</span>$.<span class="function"><span class="title">main</span><span class="params">(TopicCommand.scala:<span class="number">61</span>)</span></span></span><br><span class="line">    at kafka<span class="class">.admin</span><span class="class">.TopicCommand</span><span class="class">.main</span>(TopicCommand.scala)</span><br><span class="line"></span><br><span class="line">$ bin/kafka-topics<span class="class">.sh</span> --create --zookeeper localhost:<span class="number">2181</span>/kafka \</span><br><span class="line">--replication-factor <span class="number">1</span> --partitions <span class="number">1</span> --topic test</span><br><span class="line">Created topic <span class="string">"test"</span>.</span><br><span class="line">$ bin/kafka-topics<span class="class">.sh</span> --list --zookeeper localhost:<span class="number">2181</span>/kafka</span><br><span class="line">test</span><br></pre></td></tr></table></figure>
<p>生产者连接的是Kafka代理节点的地址，和ZooKeeper没有关系。而旧消费者连接的是ZooKeeper，所以也要加上<code>/kafka</code>才能读取到消息：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-<span class="built_in">console</span>-producer.sh --broker-list <span class="attribute">localhost</span>:<span class="number">9092</span> --topic test</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> a message</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> another message</span><br><span class="line">$ bin/kafka-<span class="built_in">console</span>-consumer.sh --zookeeper <span class="attribute">localhost</span>:<span class="number">2181</span>/kafka <span class="string">\</span></span><br><span class="line">  --topic test --<span class="keyword">from</span>-beginning</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> a message</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> another message</span><br></pre></td></tr></table></figure>
<p>上面的实验通过在Kafka服务端的配置文件中设置ZooKeeper根节点，可以在一个ZooKeeper中区分多个Kafka集群。下面的实验就利用了该功能。</p>
<h3 id="11-4-2_MirrorMaker演示消费者线程数量">11.4.2 <code>MirrorMaker</code>演示消费者线程数量</h3><p>单机模拟多个Kafka集群，每个集群各自只有一台服务器。不同Kafka集群的<code>zookeeper.connect</code>配置项分别是：<code>localhost:2181/kafka</code>和<code>localhost:2181/kafka_dc</code>（这两个集群叫作kafka集群、kafka_dc集群）。查看ZooKeeper的节点，因为是不同的Kafka集群，所以代理节点的编号可以一样（当然由于在本机模拟多个集群，端口号不能一样）：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">zk:</span> localhost:2181<span class="list">(<span class="keyword">CONNECTED</span>)</span> <span class="number">0</span>] ls /</span><br><span class="line"><span class="list">[<span class="keyword">kafka_dc</span>, zookeeper, kafka]</span><br><span class="line"><span class="list">[<span class="keyword">zk:</span> localhost:2181<span class="list">(<span class="keyword">CONNECTED</span>)</span> <span class="number">3</span>] ls /kafka/brokers/ids</span><br><span class="line"><span class="list">[<span class="keyword">0</span>]</span><br><span class="line"><span class="list">[<span class="keyword">zk:</span> localhost:2181<span class="list">(<span class="keyword">CONNECTED</span>)</span> <span class="number">4</span>] ls /kafka_dc/brokers/ids</span><br><span class="line"><span class="list">[<span class="keyword">0</span>]</span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
<p>在Kafka集群创建分区数只有一个的主题<code>test</code>，然后启动<code>MirrorMaker</code>，设置消费者线程数量为3：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-mirror-maker<span class="class">.sh</span> --num<span class="class">.streams</span> <span class="number">3</span> \</span><br><span class="line">  --consumer<span class="class">.config</span> config/consumer_source<span class="class">.properties</span> \</span><br><span class="line">  --producer<span class="class">.config</span> config/producer_dest<span class="class">.properties</span> --whitelist test</span><br></pre></td></tr></table></figure>
<p>ZooKeeper中消费者的数量也有3个，但是因为分区只有一个，消费者<code>Owner</code>也只有一个：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>] ls <span class="regexp">/kafka/</span>consumers<span class="regexp">/mm/</span>ids</span><br><span class="line">[mm_zqhmac-dd52d0ea, mm_zqhmac-<span class="number">60</span>c27086, mm_zqhmac-d0eece39]</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>] get <span class="regexp">/kafka/</span>consumers<span class="regexp">/mm/</span>owners<span class="regexp">/test/</span><span class="number">0</span></span><br><span class="line">mm_zqhmac-<span class="number">60</span>c27086-<span class="number">0</span></span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>] get <span class="regexp">/kafka/</span>consumers<span class="regexp">/mm/</span>ids/mm_zqhmac-<span class="number">60</span>c27086</span><br><span class="line">&#123;<span class="string">"version"</span>:<span class="number">1</span>,<span class="string">"subscription"</span>:&#123;<span class="string">"test"</span>:<span class="number">1</span>&#125;,<span class="string">"pattern"</span>:<span class="string">"white_list"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>因为消费者数量比分区的数量要多，所以有些消费者会分配不到分区。在执行<code>MirrorMaker</code>程序时，控制台会提示有两个消费者线程没有分配到分区。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARN <span class="keyword">No</span> broker partitions consumed <span class="keyword">by</span> consumer thread </span><br><span class="line">  mm_zqhmac-d0eece39-0 <span class="keyword">for</span> topic <span class="keyword">test</span> (kafka.consumer.RangeAssignor)</span><br><span class="line">WARN <span class="keyword">No</span> broker partitions consumed <span class="keyword">by</span> consumer thread </span><br><span class="line">  mm_zqhmac-dd52d0ea-0 <span class="keyword">for</span> topic <span class="keyword">test</span> (kafka.consumer.RangeAssignor)</span><br></pre></td></tr></table></figure>
<p>通过控制台的消费者检查<code>Mirror</code>（kafka_dc）目标集群是否有数据写入，可以看到虽然我们没有在kafka_dc集群创建<code>test</code>主题，但是通过镜像工具，源集群的数据会复制到目标集群。</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --list --zookeeper <span class="attribute">localhost</span>:<span class="number">2181</span>/kafka_dc</span><br><span class="line">test</span><br><span class="line">$ bin/kafka-<span class="built_in">console</span>-consumer.sh --zookeeper <span class="attribute">localhost</span>:<span class="number">2181</span>/kafka_dc <span class="string">\</span></span><br><span class="line">  --topic test --<span class="keyword">from</span>-beginning</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> third message</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> fouth message</span><br></pre></td></tr></table></figure>
<p>检查消费组所有消费者的消费情况，也只有一个消费者：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-run-<span class="keyword">class</span>.sh kafka.tools.ConsumerOffsetChecker \</span><br><span class="line">    --group mm --zookeeper localhost:<span class="number">2181</span>/kafka --topic test</span><br><span class="line">Group  Topic  Pid   Offset  logSize   Lag    Owner</span><br><span class="line">mm     test   <span class="number">0</span>     <span class="number">4</span>       <span class="number">4</span>         <span class="number">0</span>      mm_zqhmac-<span class="number">60</span>c27086-<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="11-4-3_生产者和消费者性能测试">11.4.3 生产者和消费者性能测试</h3><p>Kafka提供了一些工具类，包括生产者和消费者的性能测试，端到端的延迟。下面的实验是在一个小型的Kafka集群上，并且测试主题<code>test-rep-3</code>有3个副本、6个分区：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ zookeeper=<span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>,<span class="number">192.168</span><span class="number">.6</span><span class="number">.56</span>:<span class="number">2181</span>,<span class="number">192.168</span><span class="number">.6</span><span class="number">.57</span>:<span class="number">2181</span>/kafka010</span><br><span class="line">$ kafka=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">9092</span>,<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">9093</span>,<span class="number">192.168</span><span class="number">.6</span><span class="number">.53</span>:<span class="number">9094</span>,<span class="number">192.168</span><span class="number">.6</span><span class="number">.53</span>:<span class="number">9095</span></span><br><span class="line">$ bin/kafka-topics.sh --zookeeper $zookeeper --create \</span><br><span class="line">    --topic test-rep-<span class="number">3</span> --partitions <span class="number">6</span> --replication-factor <span class="number">3</span></span><br><span class="line">$ bin/kafka-topics.sh --describe --zookeeper $zookeeper --topic test-rep-<span class="number">3</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>    PartitionCount:<span class="number">6</span>    ReplicationFactor:<span class="number">3</span> Configs:</span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">0</span>    主副本: <span class="number">3</span>   Replicas: <span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span> Isr: <span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span></span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">1</span>    主副本: <span class="number">0</span>   Replicas: <span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span> Isr: <span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span></span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">2</span>    主副本: <span class="number">1</span>   Replicas: <span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span> Isr: <span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span></span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">3</span>    主副本: <span class="number">2</span>   Replicas: <span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span> Isr: <span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">4</span>    主副本: <span class="number">3</span>   Replicas: <span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span> Isr: <span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">Topic: test-rep-<span class="number">3</span>   Partition: <span class="number">5</span>    主副本: <span class="number">0</span>   Replicas: <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span> Isr: <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>接着对生产者和消费者进行性能测试（笔者的测试环境还有其他服务，所以测试结果并不是很理想，如果要对Kafka进行压测，最好模拟线上的机器配置）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#####生产者性能测试#####</span></span><br><span class="line">$ bin/kafka-run-<span class="keyword">class</span>.sh org.apache.kafka.tools.ProducerPerformance \</span><br><span class="line">    --topic test-rep-<span class="number">3</span> --num-records <span class="number">50000000</span> --record-size <span class="number">100</span> \</span><br><span class="line">    --throughput -<span class="number">1</span> --producer-props acks=<span class="number">1</span> buffer.memory=<span class="number">67108864</span> \</span><br><span class="line">    batch.size=<span class="number">8196</span> bootstrap.servers=$kafka</span><br><span class="line"><span class="preprocessor">## 第一次在集群内测试</span></span><br><span class="line"><span class="number">50000000</span> records sent, <span class="number">749906.261717</span> records/sec (<span class="number">71.52</span> MB/sec), </span><br><span class="line"><span class="number">50.73</span> ms avg latency, <span class="number">1356.00</span> ms max latency, </span><br><span class="line"><span class="number">2</span> ms <span class="number">50</span>th, <span class="number">266</span> ms <span class="number">95</span>th, <span class="number">603</span> ms <span class="number">99</span>th, <span class="number">1327</span> ms <span class="number">99.9</span>th.</span><br><span class="line"><span class="preprocessor">## 第二次在集群内测试</span></span><br><span class="line"><span class="number">50000000</span> records sent, <span class="number">84956.858907</span> records/sec (<span class="number">8.10</span> MB/sec), </span><br><span class="line"><span class="number">5781.48</span> ms avg latency, <span class="number">17968.00</span> ms max latency, </span><br><span class="line"><span class="number">9872</span> ms <span class="number">50</span>th, <span class="number">16705</span> ms <span class="number">95</span>th, <span class="number">17492</span> ms <span class="number">99</span>th, <span class="number">17909</span> ms <span class="number">99.9</span>th.</span><br><span class="line"><span class="preprocessor">## 第三次在集群外测试</span></span><br><span class="line"><span class="number">50000000</span> records sent, <span class="number">42554.459069</span> records/sec (<span class="number">4.06</span> MB/sec), </span><br><span class="line"><span class="number">11455.58</span> ms avg latency, <span class="number">51425.00</span> ms max latency, </span><br><span class="line"><span class="number">82</span> ms <span class="number">50</span>th, <span class="number">29290</span> ms <span class="number">95</span>th, <span class="number">30192</span> ms <span class="number">99</span>th, <span class="number">36732</span> ms <span class="number">99.9</span>th.</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#####消费者性能测试#####</span></span><br><span class="line">$ bin/kafka-consumer-perf-test.sh --zookeeper $zookeeper \</span><br><span class="line">    --messages <span class="number">50000000</span> --topic test-rep-<span class="number">3</span> --threads <span class="number">1</span></span><br><span class="line"><span class="preprocessor">## 第一次在集群内测试</span></span><br><span class="line">start, end, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec</span><br><span class="line"><span class="number">17</span>:<span class="number">00</span>:<span class="number">32</span>:<span class="number">149</span>, <span class="number">17</span>:<span class="number">00</span>:<span class="number">56</span>:<span class="number">811</span>, <span class="number">4767.4932</span>, <span class="number">193.3133</span>, <span class="number">49990789</span>, <span class="number">2027037.1016</span></span><br><span class="line"><span class="preprocessor">## 第二次在集群内测试</span></span><br><span class="line"><span class="number">17</span>:<span class="number">39</span>:<span class="number">11</span>:<span class="number">883</span>, <span class="number">17</span>:<span class="number">44</span>:<span class="number">03</span>:<span class="number">117</span>, <span class="number">4768.3716</span>, <span class="number">16.3730</span>, <span class="number">50000000</span>, <span class="number">171683.2513</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 消费者性能测试（多线程）</span></span><br><span class="line">$ bin/kafka-consumer-perf-test.sh --zookeeper $zookeeper \</span><br><span class="line">    --messages <span class="number">50000000</span> --topic test-rep-<span class="number">3</span> --threads <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>在生产者的测试过程中，有些分区由于网络或者其他原因会对ISR进行调整，日志如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO Partition [test-rep-<span class="number">3</span>,<span class="number">1</span>] on broker <span class="number">0</span>: Shrinking ISR from <span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span> to <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">INFO Partition [test-rep-<span class="number">3</span>,<span class="number">5</span>] on broker <span class="number">0</span>: Expanding ISR from <span class="number">0</span>,<span class="number">1</span> to <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">INFO Partition [test-rep-<span class="number">3</span>,<span class="number">1</span>] on broker <span class="number">0</span>: Expanding ISR from <span class="number">0</span>,<span class="number">1</span> to <span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>这时如果查看主题信息，会发现主题中每个分区的ISR和最开始创建的时候不同。不过等生产者测试运行完毕，再过一段时间，就会恢复到刚开始的ISR，这是因为默认开启了主副本自动迁移：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --describe --zookeeper $zookeeper --topic test-rep-<span class="number">3</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>    PartitionCount:<span class="number">6</span>    ReplicationFactor:<span class="number">3</span> Configs:</span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">0</span>    主副本: <span class="number">3</span>   Replicas: <span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span> Isr: <span class="number">3</span>,<span class="number">2</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">1</span>    主副本: <span class="number">0</span>   Replicas: <span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span> Isr: <span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">2</span>    主副本: <span class="number">1</span>   Replicas: <span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span> Isr: <span class="number">1</span>,<span class="number">0</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">3</span>    主副本: <span class="number">2</span>   Replicas: <span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span> Isr: <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">4</span>    主副本: <span class="number">3</span>   Replicas: <span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span> Isr: <span class="number">3</span></span><br><span class="line">Topic:test-rep-<span class="number">3</span>   Partition: <span class="number">5</span>    主副本: <span class="number">0</span>   Replicas: <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span> Isr: <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="11-5_第三方工具">11.5 第三方工具</h2><h3 id="11-5-1_Confluent_Platform">11.5.1 Confluent Platform</h3><p>Confluent的各个组件和默认端口如下：</p>
<table>
<thead>
<tr>
<th>Component</th>
<th>Default Port</th>
</tr>
</thead>
<tbody>
<tr>
<td>Zookeeper</td>
<td>2181</td>
</tr>
<tr>
<td>Apache Kafka brokers (plain text)</td>
<td>9092</td>
</tr>
<tr>
<td>Schema Registry REST API</td>
<td>8081</td>
</tr>
<tr>
<td>REST Proxy</td>
<td>8082</td>
</tr>
<tr>
<td>Kafka Connect REST API</td>
<td>8083</td>
</tr>
<tr>
<td>Confluent Control Center</td>
<td>9021</td>
</tr>
</tbody>
</table>
<p>安装包主要有三个目录：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">confluent-<span class="number">3.3</span><span class="number">.0</span>/bin/        <span class="preprocessor"># Driver scripts for starting/stopping services</span></span><br><span class="line">confluent-<span class="number">3.3</span><span class="number">.0</span>/etc/        <span class="preprocessor"># Configuration files</span></span><br><span class="line">confluent-<span class="number">3.3</span><span class="number">.0</span>/share/java/ <span class="preprocessor"># Jars</span></span><br></pre></td></tr></table></figure>
<p>启动各个组件：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/zookeeper-server-<span class="operator"><span class="keyword">start</span> ./etc/kafka/zookeeper.properties &amp;</span><br><span class="line">./<span class="keyword">bin</span>/kafka-<span class="keyword">server</span>-<span class="keyword">start</span> ./etc/kafka/<span class="keyword">server</span>.properties &amp;</span><br><span class="line">./<span class="keyword">bin</span>/<span class="keyword">schema</span>-registry-<span class="keyword">start</span> ./etc/<span class="keyword">schema</span>-registry/<span class="keyword">schema</span>-registry.properties &amp;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-_控制中心（Controll_Center）">1. 控制中心（Controll Center）</h4><p>Confluent商业产品的一个重要功能是控制中心（Controll Center）。在启动控制中心之前呢，需要修改下面三个文件的配置信息：</p>
<ul>
<li>Kafka服务端的配置文件：etc/kafka/server.properties</li>
<li>Kafka Connect集群的配置文件：etc/kafka/connect-distributed.properties</li>
<li>控制中心中心的配置文件：etc/confluent-control-center/control-center.properties</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/#metric.reporters=io.confluent.metrics.reporter.ConfluentMetricsReporter/metric.reporters=io.confluent.metrics.reporter.ConfluentMetricsReporter/g'</span> &amp;&amp; \</span><br><span class="line">sed <span class="string">'s/#confluent.metrics.reporter.bootstrap.servers=localhost:9092/confluent.metrics.reporter.bootstrap.servers=localhost:9092/g'</span> &amp;&amp; \</span><br><span class="line">sed <span class="string">'s/#confluent.metrics.reporter.zookeeper.connect=localhost:2181/confluent.metrics.reporter.zookeeper.connect=localhost:2181/g'</span> &amp;&amp; \</span><br><span class="line">sed <span class="string">'s/#confluent.metrics.reporter.topic.replicas=1/confluent.metrics.reporter.topic.replicas=1/g'</span> \</span><br><span class="line">etc/kafka/server.properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> &lt;&lt;EOF &gt;&gt; etc/kafka/connect-distributed.properties</span><br><span class="line"></span><br><span class="line"># Interceptor setup</span><br><span class="line">consumer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor</span><br><span class="line">producer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> &lt;&lt;EOF &gt;&gt; etc/confluent-control-<span class="keyword">center</span>/control-<span class="keyword">center</span>.properties</span><br><span class="line"></span><br><span class="line"># Quickstart partition <span class="built_in">and</span> replication <span class="built_in">values</span></span><br><span class="line">confluent.controlcenter.internal.topics.partitions=<span class="number">1</span></span><br><span class="line">confluent.controlcenter.internal.topics.replication=<span class="number">1</span></span><br><span class="line">confluent.controlcenter.<span class="keyword">command</span>.topic.replication=<span class="number">1</span></span><br><span class="line">confluent.monitoring.interceptor.topic.partitions=<span class="number">1</span></span><br><span class="line">confluent.monitoring.interceptor.topic.replication=<span class="number">1</span></span><br><span class="line">confluent.metrics.topic.partition=<span class="number">1</span></span><br><span class="line">confluent.metrics.topic.replication=<span class="number">1</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>接着启动confluent-control-center和分布式的Kafka连接器集群：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/control-center-<span class="operator"><span class="keyword">start</span> etc/confluent-control-center/control-center.properties &amp;</span><br><span class="line"><span class="keyword">bin</span>/<span class="keyword">connect</span>-<span class="keyword">distributed</span> etc/kafka/<span class="keyword">connect</span>-<span class="keyword">distributed</span>.properties  &amp;</span></span><br></pre></td></tr></table></figure>
<p>然后执行一些性能测试，比如执行生产者和消费者的性能测试脚本：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics --zookeeper localhost:<span class="number">2181</span> --create \</span><br><span class="line">    --topic test-<span class="number">1</span> --partitions <span class="number">1</span> --replication-factor <span class="number">1</span></span><br><span class="line"></span><br><span class="line">bin/kafka-run-<span class="keyword">class</span> org.apache.kafka.tools.ProducerPerformance \</span><br><span class="line">    --topic test-<span class="number">1</span> --num-records <span class="number">50000000</span> --record-size <span class="number">100</span> \</span><br><span class="line">    --throughput -<span class="number">1</span> --producer-props acks=<span class="number">1</span> buffer.memory=<span class="number">67108864</span> \</span><br><span class="line">    batch.size=<span class="number">8196</span> bootstrap.servers=localhost:<span class="number">9092</span></span><br><span class="line"></span><br><span class="line">bin/kafka-consumer-perf-test --zookeeper localhost:<span class="number">2181</span> \</span><br><span class="line">    --messages <span class="number">50000000</span> --topic test-<span class="number">1</span> --threads <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>打开浏览器：<a href="http://192.168.6.53:9021" target="_blank" rel="external">http://192.168.6.53:9021</a>，观察到页面实时显示集群的相关度量曲线图：</p>
<p><img src="http://img.blog.csdn.net/20170928175456695" alt="controlcenter"></p>
<h4 id="2-_连接器（Kafka_Connect）">2. 连接器（Kafka Connect）</h4><p>自带的kafka-connect-elasticsearch插件的相关文件：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0653 confluent-<span class="number">3.2</span><span class="number">.1</span>]$ ll etc/kafka-connect-elasticsearch/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users <span class="number">803</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">11</span> quickstart-elasticsearch.properties</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0653 confluent-<span class="number">3.2</span><span class="number">.1</span>]$ ll share/java/kafka-connect-elasticsearch/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">263965</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> commons-codec-<span class="number">1.9</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">434678</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> commons-lang3-<span class="number">3.4</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users   <span class="number">61829</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> commons-logging-<span class="number">1.2</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">212164</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> gson-<span class="number">2.4</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users <span class="number">2256213</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> guava-<span class="number">18.0</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">177013</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> httpasyncclient-<span class="number">4.1</span><span class="number">.1</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">732765</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> httpclient-<span class="number">4.5</span><span class="number">.1</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">326724</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> httpcore-<span class="number">4.4</span><span class="number">.4</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">356091</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> httpcore-nio-<span class="number">4.4</span><span class="number">.4</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users   <span class="number">18398</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> jest-<span class="number">2.0</span><span class="number">.0</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users  <span class="number">216228</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> jest-common-<span class="number">2.0</span><span class="number">.0</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users   <span class="number">44524</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> kafka-connect-elasticsearch-<span class="number">3.2</span><span class="number">.1</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users   <span class="number">41071</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> slf4j-api-<span class="number">1.7</span><span class="number">.21</span>.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> qihuang.zheng users   <span class="number">10680</span> <span class="number">9</span>月  <span class="number">28</span> <span class="number">16</span>:<span class="number">12</span> slf4j-simple-<span class="number">1.7</span><span class="number">.5</span>.jar</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kafka技术内幕附录&lt;br&gt;
    
    </summary>
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/categories/kafka/"/>
    
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>中间件系列：TCC（尝试-确认-取消）事务</title>
    <link href="http://github.com/zqhxuyuan/2017/12/24/Midd-TCC-Transactions/"/>
    <id>http://github.com/zqhxuyuan/2017/12/24/Midd-TCC-Transactions/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2017-12-20T04:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>TCC事务<br><a id="more"></a></p>
<p>重拾了一把JavaWeb的部署流程，使用Jetty在Idea专业版上运行。步骤如下：</p>
<ol>
<li>本地下载Jetty，Idea启用Jetty Intergration插件（注意：不是Jetty Runner）</li>
<li>在Run Configuration中选择Jetty Server/Local，配置本地的Jetty服务器（图1）</li>
<li>新建Jetty Server，在Deployment中添加web工程的war exploded（图2）</li>
<li>保存后，点击右上角的三角箭头启动Jetty</li>
</ol>
<p><img src="http://img.blog.csdn.net/20171124234107133" alt="1"></p>
<p><img src="http://img.blog.csdn.net/20171124234123638" alt="2"></p>
<p>坑爹的是由于有三个工程，第二个Jetty工程即使在vm.options中添加-Djetty.http.port=8081，使用的还是8080端口</p>
<p><img src="http://img.blog.csdn.net/20171124234137287" alt="3"></p>
<p>遂放弃，采用mvn jetty:run的方式</p>
<p>在根pom.xml中添加jetty-plugin的配置（注意：不需要在capital/order/red下添加）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>9.4.7.v20170914<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后进入到tcc-transaction的根目录（注意不要进入到实际的capital/order/red等目录）分别执行（开三个终端）：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  tcc-<span class="keyword">transaction</span> git:(master-<span class="number">1.2</span>.x) ✗ mvn jetty:<span class="command">run</span> -projects tcc-<span class="keyword">transaction</span>-tutorial-sample/tcc-<span class="keyword">transaction</span>-http-sample/tcc-<span class="keyword">transaction</span>-http-capital -am</span><br><span class="line">➜  tcc-<span class="keyword">transaction</span> git:(master-<span class="number">1.2</span>.x) ✗ mvn -Djetty.http.port=<span class="number">8088</span> jetty:<span class="command">run</span> -projects tcc-<span class="keyword">transaction</span>-tutorial-sample/tcc-<span class="keyword">transaction</span>-http-sample/tcc-<span class="keyword">transaction</span>-http-redpacket -am</span><br><span class="line">➜  tcc-<span class="keyword">transaction</span> git:(master-<span class="number">1.2</span>.x) ✗ mvn -Djetty.http.port=<span class="number">8086</span> jetty:<span class="command">run</span> -projects tcc-<span class="keyword">transaction</span>-tutorial-sample/tcc-<span class="keyword">transaction</span>-http-sample/tcc-<span class="keyword">transaction</span>-http-order -am</span><br></pre></td></tr></table></figure>
<p>解释下这里的参数含义：</p>
<ul>
<li>-Djetty.http.port=8088表示web端口，端口不能相同，默认是8080</li>
<li>通过-projects定位到具体的web子项目</li>
<li>最后还要加上-am，表示会编译相关的依赖模块</li>
</ul>
<p>比如capital的依赖：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[INFO]</span> tcc-transaction</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-api</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-core</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-spring</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-tutorial-sample</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-sample</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-capital-api</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-capital</span><br></pre></td></tr></table></figure>
<p>red的依赖：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[INFO]</span> tcc-transaction</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-api</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-core</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-spring</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-tutorial-sample</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-sample</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-redpacket-api</span><br><span class="line"><span class="string">[INFO]</span> tcc-transaction-http-redpacket</span><br></pre></td></tr></table></figure>
<p>order的依赖：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-api</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-core</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-spring</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-tutorial-sample</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-http-sample</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-http-capital-api</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-http-redpacket-api</span><br><span class="line"><span class="attr_selector">[INFO]</span> tcc-transaction-http-<span class="attribute">order</span></span><br></pre></td></tr></table></figure>
<p>如果没有报错，会输出下面类似的启动成功日志（以order的8086端口为例）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Started ServerConnector@<span class="number">6</span>bc6692e&#123;HTTP/<span class="number">1.1</span>,[http/<span class="number">1.1</span>]&#125;&#123;<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8086</span>&#125;</span><br><span class="line">[INFO] Started @<span class="number">17821</span>ms</span><br><span class="line">[INFO] Started Jetty Server</span><br></pre></td></tr></table></figure>
<p>既然命令行方式启动，也可以通过Idea的maven插件代替执行：</p>
<p><img src="http://img.blog.csdn.net/20171125105731746" alt="5"></p>
<p>但是要使用Debug时，还是会出现地址已经被使用的情况。可以通过在命令行启动mvnDebug：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  tcc-transaction <span class="string">git:</span>(master-<span class="number">1.2</span>.x) ✗ mvnDebug -Djetty.http.port=<span class="number">8086</span> <span class="string">jetty:</span>run -projects tcc-transaction-tutorial-sample<span class="regexp">/tcc-transaction-http-sample/</span>tcc-transaction-http-order -am</span><br><span class="line">Preparing to Execute Maven <span class="keyword">in</span> Debug Mode</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM <span class="string">warning:</span> ignoring option MaxPermSize=<span class="number">512</span>M; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">Listening <span class="keyword">for</span> transport dt_socket at <span class="string">address:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当下一步执行Debug后，在终端这里会打印日志：</span></span><br><span class="line">...</span><br><span class="line">[INFO] Started ServerConnector@<span class="number">74</span>d776fb&#123;HTTP<span class="regexp">/1.1,[http/</span><span class="number">1.1</span>]&#125;&#123;<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8086</span>&#125;</span><br><span class="line">[INFO] Started @<span class="number">113766</span>ms</span><br><span class="line">[INFO] Started Jetty Server</span><br></pre></td></tr></table></figure>
<p>然后在Idea中配置Remote，保存后，在右上角点击Debug（也只有Debug，无法选Run）：</p>
<p><img src="http://img.blog.csdn.net/20171125105941840" alt="6"></p>
<p>打开order的页面，这里是<a href="http://localhost:8086" target="_blank" rel="external">http://localhost:8086</a></p>
<p><img src="http://img.blog.csdn.net/20171124235054711" alt="4"></p>
<p>购买一个IPhonx后，三个终端的日志如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资金终端</span></span><br><span class="line">capital <span class="keyword">try</span> record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">29</span></span><br><span class="line">capital confirm record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">33</span></span><br><span class="line">capital <span class="keyword">try</span> record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//红包终端</span></span><br><span class="line">red packet <span class="keyword">try</span> record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">31</span></span><br><span class="line">red packet confirm record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//订单终端</span></span><br><span class="line">order <span class="keyword">try</span> make payment called.time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">28</span></span><br><span class="line">order confirm make payment called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">32</span></span><br><span class="line">order <span class="keyword">try</span> make payment called.time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">49</span></span><br></pre></td></tr></table></figure>
<p>再买一个Mac，资金都不够了，最终订单失败：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资金终端</span></span><br><span class="line">java.lang.RuntimeException: not enough balance!</span><br><span class="line">capital cancel record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">52</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//红包终端没有新的输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//订单终端</span></span><br><span class="line">java.lang.RuntimeException: not enough balance!</span><br><span class="line">order cancel make payment called.time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">24</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">51</span></span><br></pre></td></tr></table></figure>
<p>数据库信息：</p>
<p><img src="http://img.blog.csdn.net/20171125114005926" alt="6"></p>
<p>TCC的事务调用流程设计本地事务和远程事务、根事务与分支事务，并且还有一个Proxy代理层。<br>本地事务、代理事务、远程事务都加上了@Conpensable注解，并且都定义了try/confirm/cancel方法。<br>为了弄清楚各种事务的调用链，在相关代码上加上日志（补偿事务、资源协调者、业务类）：</p>
<p>sample-http-order（订单主事务）: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>根事务（订单）的两个拦截器</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">476</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:ROOT</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">548</span> [CompensableTransactionInterceptor] ⭐️root transaction begin, participants size:<span class="number">0</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">607</span> [ResourceCoordinatorInterceptor] 添加参与者到事务中,participant:Participant@<span class="number">23</span>b7d68f,当前参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">610</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,状态:TRYING,参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">835</span> [PaymentServiceImpl] ⭐️order <span class="keyword">try</span> make payment called.time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>分支事务<span class="number">1</span>（账户代理）的两个拦截器。这里会先远程RPC调用账户远程事务，完成后，才会接着执行分支事务<span class="number">2</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">843</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:NORMAL</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">871</span> [ResourceCoordinatorInterceptor] 添加参与者到事务中,participant:Participant@a03f70e,当前参与者数量:<span class="number">2</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">871</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,状态:TRYING,参与者数量:<span class="number">2</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">891</span> [TradeOrderServiceProxy] ⭐️capital proxy record..事务状态:TRYING</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>分支事务<span class="number">2</span>（红包代理）的两个拦截器。等待账户分支事务的<span class="keyword">try</span>方法完成后（包括RPC调用），才会开始分支事务<span class="number">2</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">321</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:NORMAL</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">345</span> [ResourceCoordinatorInterceptor] 添加参与者到事务中,participant:Participant@<span class="number">226f</span>03da,当前参与者数量:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">345</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,状态:TRYING,参与者数量:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">346</span> [TradeOrderServiceProxy] ⭐️redPacket proxy record..事务状态:TRYING</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>根事务的<span class="keyword">try</span>方法执行完成，两个分支事务代理以及远程事务的<span class="keyword">try</span>方法也都完成了</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">737</span> [CompensableTransactionInterceptor] root transaction proceed finished!</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>根事务的commit方法开始。订单（第一个参与者）：<span class="number">23</span>b7d68f，账户（第二个参与者）：a03f70e，红包（最后一个参与者）：<span class="number">226f</span>03da。</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">737</span> [CompensableTransactionInterceptor] root transaction commit begins, participants size:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">744</span> [TransactionManager] 事务状态更新为CONFIRMING,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,参与者数量:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">744</span> [Transaction] 参与者提交事务,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">78226</span>cf3-<span class="number">348f</span>-<span class="number">327</span>d-a21d-<span class="number">4</span>df15d8a1c0b,participant:Participant@<span class="number">23</span>b7d68f</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>根事务的confirm方法。注意这里调用参与者的commit方法先从订单（第一个参与者）开始，而不是红包（最后一个参与者）开始。</span><br><span class="line">️<span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">746</span> [PaymentServiceImpl] ⭐️order confirm make payment called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>分支事务（账户代理，第二个参与者）的confirm方法</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">756</span> [Transaction] 参与者提交事务,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:e9e80142-<span class="number">1477</span>-<span class="number">3161</span>-ad50-fc474e70ade1,participant:Participant@a03f70e</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">756</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:NORMAL</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">757</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,状态:CONFIRMING,参与者数量:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">757</span> [TradeOrderServiceProxy] ⭐️capital proxy record..事务状态:CONFIRMING</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>分支事务（红包代理，第三个参与者）的confirm方法</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">873</span> [Transaction] 参与者提交事务,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">16</span>a32620-<span class="number">06</span>a8-<span class="number">3228</span>-<span class="number">8046</span>-e60516206fdd,participant:Participant@<span class="number">226f</span>03da</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">874</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:NORMAL</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">874</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">11137112</span>-<span class="number">7f</span>ee-<span class="number">3</span>a85-b17d-<span class="number">13</span>cc79e2f02b,状态:CONFIRMING,参与者数量:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">874</span> [TradeOrderServiceProxy] ⭐️redPacket proxy record..事务状态:CONFIRMING</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>根事务的commit完成</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>,<span class="number">959</span> [CompensableTransactionInterceptor] root transaction commit finish, participants size:<span class="number">3</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>,<span class="number">960</span> [CompensableTransactionInterceptor] root transaction finally, participants size:<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>sample-http-capital（资金分支事务）:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>远程事务的<span class="keyword">try</span>方法：</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">23</span>,<span class="number">024</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:PROVIDER</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">23</span>,<span class="number">068</span> [CompensableTransactionInterceptor] [TRYING]provider transaction propagationNewBegin, participants size:<span class="number">0</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">23</span>,<span class="number">096</span> [ResourceCoordinatorInterceptor] 添加参与者到事务中,participant:Participant@<span class="number">3</span>d279b8e,当前参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">23</span>,<span class="number">097</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:e9e80142-<span class="number">1477</span>-<span class="number">3161</span>-ad50-fc474e70ade1,状态:TRYING,参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">276</span> [CapitalTradeOrderServiceImpl] ⭐️capital <span class="keyword">try</span> record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>TRYING</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">315</span> [CompensableTransactionInterceptor] [TRYING]provider transaction proceed finish, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">315</span> [CompensableTransactionInterceptor] provider transaction finally, participants size:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>远程事务的confirm方法：</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">770</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:PROVIDER</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">771</span> [CompensableTransactionInterceptor] [CONFIRMING]provider transaction propagationExistBegin, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">782</span> [TransactionManager] 事务状态更新为CONFIRMING,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:e9e80142-<span class="number">1477</span>-<span class="number">3161</span>-ad50-fc474e70ade1,参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">26</span>,<span class="number">782</span> [Transaction] 参与者提交事务,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:f4b5c1ed-f64c-<span class="number">3e1</span>d-b99d-b57bc2449937,participant:Participant@<span class="number">3</span>d279b8e</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">788</span> [CapitalTradeOrderServiceImpl] ⭐️capital confirm record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>CONFIRMING</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">871</span> [CompensableTransactionInterceptor] [CONFIRMING]provider transaction commit finish, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">871</span> [CompensableTransactionInterceptor] provider transaction finally, participants size:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>sample-http-redpacket（红包分支事务）:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span>远程事务的<span class="keyword">try</span>方法：</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">404</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:PROVIDER</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">432</span> [CompensableTransactionInterceptor] [TRYING]provider transaction propagationNewBegin, participants size:<span class="number">0</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">468</span> [ResourceCoordinatorInterceptor] 添加参与者到事务中,participant:Participant@<span class="number">403700</span>a,当前参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">24</span>,<span class="number">469</span> [ResourceCoordinatorInterceptor] 事务xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">16</span>a32620-<span class="number">06</span>a8-<span class="number">3228</span>-<span class="number">8046</span>-e60516206fdd,状态:TRYING,参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">705</span> [RedPacketTradeOrderServiceImpl] ⭐️red packet <span class="keyword">try</span> record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>TRYING</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">732</span> [CompensableTransactionInterceptor] [TRYING]provider transaction proceed finish, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">25</span>,<span class="number">732</span> [CompensableTransactionInterceptor] provider transaction finally, participants size:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>远程事务的confirm方法：</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">886</span> [CompensableTransactionInterceptor] [CompensableTransactionInterceptor拦截器],方法类型:PROVIDER</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">886</span> [CompensableTransactionInterceptor] [CONFIRMING]provider transaction propagationExistBegin, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">895</span> [TransactionManager] 事务状态更新为CONFIRMING,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">16</span>a32620-<span class="number">06</span>a8-<span class="number">3228</span>-<span class="number">8046</span>-e60516206fdd,参与者数量:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">27</span>,<span class="number">897</span> [Transaction] 参与者提交事务,xid:globalTransactionId:c1acaf66-<span class="number">0151</span>-<span class="number">3</span>d16-<span class="number">874</span>d-b89840ba49b5,branchQualifier:<span class="number">4812</span>b875-<span class="number">712e-3</span>cd7-<span class="number">92e5</span>-<span class="number">42</span>c1d8d0d8f1,participant:Participant@<span class="number">403700</span>a</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>,<span class="number">901</span> [RedPacketTradeOrderServiceImpl] ⭐️red packet confirm record called. time seq:<span class="number">2017</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>CONFIRMING</span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>,<span class="number">935</span> [CompensableTransactionInterceptor] [CONFIRMING]provider transaction commit finish, participants size:<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">48</span>:<span class="number">28</span>,<span class="number">935</span> [CompensableTransactionInterceptor] provider transaction finally, participants size:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>调用图如下：</p>
<p><img src="http://img.blog.csdn.net/20171126195052058" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TCC事务&lt;br&gt;
    
    </summary>
    
      <category term="midd" scheme="http://github.com/zqhxuyuan/categories/midd/"/>
    
    
      <category term="midd" scheme="http://github.com/zqhxuyuan/tags/midd/"/>
    
  </entry>
  
  <entry>
    <title>图解Java多线程</title>
    <link href="http://github.com/zqhxuyuan/2017/10/25/Java-Threads/"/>
    <id>http://github.com/zqhxuyuan/2017/10/25/Java-Threads/</id>
    <published>2017-10-24T16:00:00.000Z</published>
    <updated>2017-10-25T14:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>图解Java多线程笔记：<a href="http://tutorials.jenkov.com/java-concurrency/java-memory-model.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/java-memory-model.html</a><br><a id="more"></a></p>
<p>Java内存模型（JMM）定义了：how and when <strong>different threads</strong> can see<br>values written to <strong>shared variables</strong> by other threads,<br>and how to <strong>synchronize access</strong> to shared variables when necessary.</p>
<p><img src="http://img.blog.csdn.net/20171025223259352" alt="1"></p>
<p>Java堆和栈中的对象存储位置：</p>
<p><img src="http://img.blog.csdn.net/20171025223319776" alt="2"></p>
<p>Java内存模型与硬件模型：</p>
<p><img src="http://img.blog.csdn.net/20171025223335612" alt="3"></p>
<p>线程读取主内存的数据到CPU缓冲中，当数据放在不同位置时，会有两个问题：可见性与静态条件</p>
<p><img src="http://img.blog.csdn.net/20171025223349934" alt="4"></p>
<p>A synchronized block in Java is synchronized on some object.<br>All synchronized blocks synchronized on the same object can only<br>have one thread executing inside them at the same time.<br>All other threads attempting to enter the synchronized block are blocked<br>until the thread inside the synchronized block exits the block.</p>
<p>The synchronized keyword can be used to mark four different types of blocks:</p>
<ol>
<li>Instance methods -&gt; on the instance (object) owning the method</li>
<li>Static methods -&gt; on the class object of the class belongs to …</li>
<li>Code blocks inside instance methods</li>
<li>Code blocks inside static methods</li>
</ol>
<p>Synchronized Instance methods（实例方法的同步）：</p>
<p><img src="http://img.blog.csdn.net/20171025223405659" alt="5"></p>
<p>静态方法的同步：</p>
<p><img src="http://img.blog.csdn.net/20171025223425575" alt="6"></p>
<p>代码块的同步：</p>
<p><img src="http://img.blog.csdn.net/20171025223439855" alt="7"></p>
<p>用jstack查看，同一个监视器对象只允许有一个线程访问：</p>
<p><img src="http://img.blog.csdn.net/20171025223505856" alt="d"></p>
<p>实例方法的同步加上代码块this的同步，仍然针对同一个实例对象：</p>
<p><img src="http://img.blog.csdn.net/20171025223526228" alt="e"></p>
<p>自定义监视器对象：</p>
<p><img src="http://img.blog.csdn.net/20171025223540422" alt="f"></p>
<p>同一个实例对象的加锁：</p>
<p><img src="http://img.blog.csdn.net/20171025223553349" alt="g"></p>
<p>不同实例对象的加锁：</p>
<p><img src="http://img.blog.csdn.net/20171025223606644" alt="17"></p>
<p>Volatile keyword guarantees visibility of changes to variables across threads.</p>
<blockquote>
<p>every read of a volatile variable will be<br>read from the computer’s main memory,<br>and not from the CPU cache.</p>
<p>every write to a volatile variable will be<br>written to main memory,<br>and not just to the CPU cache.</p>
</blockquote>
<p>If Thread A writes to a volatile variable and Thread B subsequently reads the same volatile variable, then all variables visible to Thread A before writing the volatile variable, will also be visible to Thread B after it has read the volatile variable. </p>
<p>The reading and writing instructions of volatile variables cannot be reordered by the JVM. Instructions before and after can be reordered, but the volatile read or write cannot be mixed with these instructions. Whatever instructions follow a read or write of a volatile variable are guaranteed to happen after the read or write.</p>
<p>volatile变量不保证事务：</p>
<p><img src="http://img.blog.csdn.net/20171025223619840" alt="56"></p>
<p>volatile变量仍然会存在竞态条件：</p>
<p><img src="http://img.blog.csdn.net/20171025223635898" alt="27"></p>
<p>volatile变量会禁止重排序：</p>
<p><img src="http://img.blog.csdn.net/20171025223648548" alt="49"></p>
<p>如果变量在volatile变量更新之后，不保证写到主存：</p>
<p><img src="http://img.blog.csdn.net/20171025223702928" alt="11"></p>
<p>为了保证可见性，不需要为每个变量都定义为volatile类型：</p>
<p><img src="http://img.blog.csdn.net/20171025223715760" alt="36"></p>
<p>volatile变量是个内存屏障，在这之前和之后的指令可以重排序：</p>
<p><img src="http://img.blog.csdn.net/20171025223729652" alt="56"></p>
<p>本地线程的示例：</p>
<p><img src="http://img.blog.csdn.net/20171025223744977" alt="15"></p>
<p>下面的上图没有使用本地线程，下图使用了本地线程：</p>
<p><img src="http://img.blog.csdn.net/20171025223805363" alt="29"></p>
<p>线程的信号量实现方式–busy waiting：</p>
<p><img src="http://img.blog.csdn.net/20171025223821970" alt="53"></p>
<p>或者可以用volatile变量：</p>
<p><img src="http://img.blog.csdn.net/20171025223835313" alt="16"></p>
<p>wait和notify的示例：</p>
<p><img src="http://img.blog.csdn.net/20171025223847929" alt="34"></p>
<p>notify与notifyAll的示例：</p>
<p><img src="http://img.blog.csdn.net/20171025223900285" alt="51"></p>
<p>等待线程有可能意外被唤醒，需要用while循环继续判断是否被唤醒线程notify：</p>
<p><img src="http://img.blog.csdn.net/20171025223915171" alt="05"></p>
<p>一次唤醒所有线程，或者每次一个个地唤醒：</p>
<p><img src="http://img.blog.csdn.net/20171025223931103" alt="21"></p>
<p>不同线程之间采用字符串作为监视器锁，会唤醒别的线程：</p>
<p><img src="http://img.blog.csdn.net/20171025223943618" alt="43"></p>
<p>不同线程之间的信号没有共享，等待线程被唤醒后继续进入wait状态：</p>
<p><img src="http://img.blog.csdn.net/20171025223957776" alt="03"></p>
<p>不同线程的等待与唤醒示例：</p>
<p><img src="http://img.blog.csdn.net/20171025224010374" alt="18"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解Java多线程笔记：&lt;a href=&quot;http://tutorials.jenkov.com/java-concurrency/java-memory-model.html&quot;&gt;http://tutorials.jenkov.com/java-concurrency/java-memory-model.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://github.com/zqhxuyuan/categories/java/"/>
    
    
      <category term="java" scheme="http://github.com/zqhxuyuan/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Design Data Intensive Applications</title>
    <link href="http://github.com/zqhxuyuan/2017/10/22/BookNote-DDIA/"/>
    <id>http://github.com/zqhxuyuan/2017/10/22/BookNote-DDIA/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-23T15:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Design Data Intensive Applications<br><a id="more"></a></p>
<h2 id="Ch3:_Storage_and_Retrieval">Ch3: Storage and Retrieval</h2><p>Hash Index的目的是为数据库构建一份索引，方便根据key快速查询对应的value。</p>
<p>Compaction操作合并多个文件，相同key只会保存一份最新的value。</p>
<p>SSTables和LSM树：数据写到MemTable中是排序的，刷写到磁盘上也是有序的，最后通过定期的Compaction再合并数据。</p>
<p>由于每个SSTable的key都是唯一的，多个SSTable文件合并时，如果key重复，选取最新Segment的值，去掉旧Segment的所有值。</p>
<p>读取Segment不可避免地要扫描文件，所以可以对文件进行压缩，提高I/O带宽和传输速率。</p>
<p>不需要为所有SSTable的key建全量索引，只需要稀疏索引。由于key是有序的，可以通过二分查找快速定位key的位置。</p>
<p>稀疏索引不是必须的，不过通常需要稀疏索引。如果key和value的长度是固定的，就可以不需要稀疏索引，不同实际情况value一般是变长的。</p>
<p>LSM树的优化方法有：为文件添加BloomFilter、不同的合并策略。</p>
<p>传统数据库使用B树就地更新数据。B树一般将数据库分成固定的块或页，比如4K。这样读写操作每次也是一页。<br>这种方式和底层硬件对应起来，比如磁盘就是按照4K固定块组织的。</p>
<p>新增key到B树会调整树的结构，比如拆分出两个子Page，然后更新父Page。</p>
<p>B树的优化方法有：Copy-On-Write、不存储整个key，而是对key进行简写、范围查询时，子页之间会有指针。</p>
<p>为了容错，B树和LSM都有WAL预写日志，用于节点宕机后的数据恢复。</p>
<p>虽然LSM在后台执行增量的Compaction操作，但是磁盘资源有限，当执行一个昂贵的Compaction，<br>客户端请求可能需要等待Compaction完成，造成响应时间上升。</p>
<p>磁盘的写带宽会被三个操作共享：写WAL日志、MemTable刷写磁盘、Compaction。<br>数据库一旦变得越来越大，Compaction操作需要的带宽也会越来越多。</p>
<p>Compaction如果没有配置好，一旦写吞吐量很高，那么Compaction操作跟不上写请求。未合并的文件会越来越多，读请求也会越来越慢。</p>
<p>B树和LSM树的区别是：每个键在B树中只有一条记录，但在LSM中可能存在多条。这也是B树可以提供强一致性事务的保证（只对行进行加锁）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Design Data Intensive Applications&lt;br&gt;
    
    </summary>
    
      <category term="book" scheme="http://github.com/zqhxuyuan/categories/book/"/>
    
    
      <category term="book" scheme="http://github.com/zqhxuyuan/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>深入解析中间件之-RocketMQ</title>
    <link href="http://github.com/zqhxuyuan/2017/10/18/Midd-RocketMQ/"/>
    <id>http://github.com/zqhxuyuan/2017/10/18/Midd-RocketMQ/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2017-11-02T10:27:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache RocketMQ: <a href="http://rocketmq.apache.org/" target="_blank" rel="external">http://rocketmq.apache.org/</a><br><a id="more"></a></p>
<h1 id="QuickStart">QuickStart</h1><p>分别启动NameServer、Broker、生产者、消费者</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; nohup sh bin/mqnamesrv &amp;</span><br><span class="line">&gt; nohup sh bin/mqbroker -n localhost:<span class="number">9876</span> &amp;</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">export</span> NAMESRV_ADDR=localhost:<span class="number">9876</span></span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D36B0000, offsetMsgId=AC112A0100002A9F0000000000000000, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">3</span>], queueOffset=<span class="number">0</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D3F50001, offsetMsgId=AC112A0100002A9F00000000000000B2, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">0</span>], queueOffset=<span class="number">0</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D3FB0002, offsetMsgId=AC112A0100002A9F0000000000000164, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">1</span>], queueOffset=<span class="number">0</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D4000003, offsetMsgId=AC112A0100002A9F0000000000000216, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">2</span>], queueOffset=<span class="number">0</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D4040004, offsetMsgId=AC112A0100002A9F00000000000002C8, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">3</span>], queueOffset=<span class="number">1</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D4080005, offsetMsgId=AC112A0100002A9F000000000000037A, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">0</span>], queueOffset=<span class="number">1</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D40C0006, offsetMsgId=AC112A0100002A9F000000000000042C, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">1</span>], queueOffset=<span class="number">1</span>]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=AC112A0140641B6D35866042D4100007, offsetMsgId=AC112A0100002A9F00000000000004DE, messageQueue=MessageQueue [topic=TopicTest, brokerName=dp0652, queueId=<span class="number">2</span>], queueOffset=<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line">Consumer Started.</span><br><span class="line">ConsumeMessageThread_6 Receive New Messages: [MessageExt [queueId=<span class="number">1</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">1</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192396</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192398</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F000000000000042C, commitLogOffset=<span class="number">1068</span>, bodyCRC=<span class="number">1307562618</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D40C0006, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_11 Receive New Messages: [MessageExt [queueId=<span class="number">1</span>, storeSize=<span class="number">179</span>, queueOffset=<span class="number">2</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192410</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192412</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F00000000000006F4, commitLogOffset=<span class="number">1780</span>, bodyCRC=<span class="number">193412630</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243399</span>, UNIQ_KEY=AC112A0140641B6D35866042D41A000A, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">17</span>]]]</span><br><span class="line">ConsumeMessageThread_2 Receive New Messages: [MessageExt [queueId=<span class="number">2</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">0</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192384</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192386</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F0000000000000216, commitLogOffset=<span class="number">534</span>, bodyCRC=<span class="number">1032136437</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D4000003, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_1 Receive New Messages: [MessageExt [queueId=<span class="number">0</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">0</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192373</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192377</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F00000000000000B2, commitLogOffset=<span class="number">178</span>, bodyCRC=<span class="number">1401636825</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D3F50001, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_4 Receive New Messages: [MessageExt [queueId=<span class="number">3</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">0</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192236</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192319</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F0000000000000000, commitLogOffset=<span class="number">0</span>, bodyCRC=<span class="number">613185359</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243397</span>, UNIQ_KEY=AC112A0140641B6D35866042D36B0000, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_7 Receive New Messages: [MessageExt [queueId=<span class="number">3</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">1</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192388</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192390</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F00000000000002C8, commitLogOffset=<span class="number">712</span>, bodyCRC=<span class="number">601994070</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D4040004, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_8 Receive New Messages: [MessageExt [queueId=<span class="number">2</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">1</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192400</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192401</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F00000000000004DE, commitLogOffset=<span class="number">1246</span>, bodyCRC=<span class="number">988340972</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D4100007, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line">ConsumeMessageThread_3 Receive New Messages: [MessageExt [queueId=<span class="number">1</span>, storeSize=<span class="number">178</span>, queueOffset=<span class="number">0</span>, sysFlag=<span class="number">0</span>, bornTimestamp=<span class="number">1508402192379</span>, bornHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">55844</span>, storeTimestamp=<span class="number">1508402192382</span>, storeHost=/<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>:<span class="number">10911</span>, msgId=AC112A0100002A9F0000000000000164, commitLogOffset=<span class="number">356</span>, bodyCRC=<span class="number">1250039395</span>, reconsumeTimes=<span class="number">0</span>, preparedTransactionOffset=<span class="number">0</span>, toString()=Message [topic=TopicTest, flag=<span class="number">0</span>, properties=&#123;MIN_OFFSET=<span class="number">0</span>, MAX_OFFSET=<span class="number">250</span>, CONSUME_START_TIME=<span class="number">1508402243398</span>, UNIQ_KEY=AC112A0140641B6D35866042D3FB0002, WAIT=<span class="literal">true</span>, TAGS=TagA&#125;, body=<span class="number">16</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="number">17884</span> org.apache.rocketmq.namesrv.NamesrvStartup</span><br><span class="line"><span class="number">17965</span> org.apache.rocketmq.broker.BrokerStartup -n localhost:<span class="number">9876</span></span><br></pre></td></tr></table></figure>
<p>RocketMQ的数据目录在store下</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 ~]$ tree store</span><br><span class="line">store</span><br><span class="line">├── abort</span><br><span class="line">├── checkpoint</span><br><span class="line">├── commitlog</span><br><span class="line">│   ├── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│   └── <span class="number">00000000001</span><span class="number">073741824</span></span><br><span class="line">├── config</span><br><span class="line">│   ├── consumerFilter.json</span><br><span class="line">│   ├── consumerOffset.json</span><br><span class="line">│   ├── delayOffset.json</span><br><span class="line">│   ├── subscriptionGroup.json</span><br><span class="line">│   ├── topics.json</span><br><span class="line">├── consumequeue</span><br><span class="line">│   └── TopicTest</span><br><span class="line">│       ├── 0</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       ├── 1</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       ├── 2</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       └── 3</span><br><span class="line">│           └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">└── index</span><br><span class="line">    └── <span class="number">20171019163632</span>344</span><br></pre></td></tr></table></figure>
<p>数据相关的文件夹有三个：</p>
<ul>
<li>commitlog：提交日志</li>
<li>consumequeue：消费队列</li>
<li>index：索引文件</li>
</ul>
<p>查看commitlog的内容</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 ~]$ strings store/commitlog/<span class="number">00000000000000000000</span> | head -<span class="number">30</span></span><br><span class="line">Hello RocketMQ <span class="number">0</span>    TopicTest</span><br><span class="line">&gt;UNIQ_KEY</span><br><span class="line">AC112A0140641B6D35866042D36B0000</span><br><span class="line">WAIT</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">TAGS</span><br><span class="line">TagA</span><br><span class="line">Hello RocketMQ <span class="number">1</span>    TopicTest</span><br><span class="line">&gt;UNIQ_KEY</span><br><span class="line">AC112A0140641B6D35866042D3F50001</span><br><span class="line">WAIT</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">TAGS</span><br><span class="line">TagA</span><br><span class="line">Hello RocketMQ <span class="number">2</span>    TopicTest</span><br><span class="line">&gt;UNIQ_KEY</span><br><span class="line">AC112A0140641B6D35866042D3FB0002</span><br><span class="line">WAIT</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">TAGS</span><br><span class="line">TagA</span><br><span class="line">Hello RocketMQ <span class="number">3</span>    TopicTest</span><br></pre></td></tr></table></figure>
<p>消费者的相关配置：</p>
<ul>
<li>消费者对订阅主题的消费进度存储在<code>consumerOffset.json</code>配置文件中</li>
<li>消费者所属的消费组信息存储在<code>subscriptionGroup.json</code>配置文件中</li>
<li>消费者订阅的主题存储在<code>topics.json</code>配置文件中</li>
</ul>
<blockquote>
<p>Kafka中消费者订阅信息存储在ZooKeeper中</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 ~]$ cat store/config/consumerFilter.json</span><br><span class="line">&#123;</span><br><span class="line">    "filterDataByTopic":&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">[qihuang.zheng@dp0652 ~]$ cat store/config/delayOffset.json</span><br><span class="line">&#123;</span><br><span class="line">    "offsetTable":&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0652 ~]$ cat store/config/consumerOffset.json</span><br><span class="line">&#123;</span><br><span class="line">    "offsetTable":&#123;</span><br><span class="line">        "TopicTest@please_rename_unique_group_name_4":&#123;0:250,1:250,2:250,3:250</span><br><span class="line">        &#125;,</span><br><span class="line">        "%RETRY%please_rename_unique_group_name_4@please_rename_unique_group_name_4":&#123;0:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0652 ~]$ cat store/config/subscriptionGroup.json</span><br><span class="line">&#123;</span><br><span class="line">    "dataVersion":&#123;</span><br><span class="line">        "counter":1,</span><br><span class="line">        "timestamp":1508402243205</span><br><span class="line">    &#125;,</span><br><span class="line">    "subscriptionGroupTable":&#123;</span><br><span class="line">        "please_rename_unique_group_name_4":&#123;</span><br><span class="line">            "brokerId":0,</span><br><span class="line">            "consumeBroadcastEnable":true,</span><br><span class="line">            "consumeEnable":true,</span><br><span class="line">            "consumeFromMinEnable":true,</span><br><span class="line">            "groupName":"please_rename_unique_group_name_4",</span><br><span class="line">            "notifyConsumerIdsChangedEnable":true,</span><br><span class="line">            "retryMaxTimes":16,</span><br><span class="line">            "retryQueueNums":1,</span><br><span class="line">            "whichBrokerWhenConsumeSlowly":1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0652 ~]$ cat store/config/topics.json</span><br><span class="line">&#123;</span><br><span class="line">    "dataVersion":&#123;</span><br><span class="line">        "counter":2,</span><br><span class="line">        "timestamp":1508402243219</span><br><span class="line">    &#125;,</span><br><span class="line">    "topicConfigTable":&#123;</span><br><span class="line">        "TopicTest":&#123;</span><br><span class="line">            "order":false,</span><br><span class="line">            "perm":6,</span><br><span class="line">            "readQueueNums":4,</span><br><span class="line">            "topicFilterType":"SINGLE_TAG",</span><br><span class="line">            "topicName":"TopicTest",</span><br><span class="line">            "topicSysFlag":0,</span><br><span class="line">            "writeQueueNums":4</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在本机测试时，没有遇到问题。但是IDE连接远程机器时，报错连接不上，这是因为服务端装了docker导致IP有问题：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.client</span><span class="class">.exception</span><span class="class">.MQClientException</span>: Send [<span class="number">3</span>] times, still failed, cost [<span class="number">6915</span>]ms, Topic: TopicTestA, BrokersSent: [dp0652, dp0652, dp0652]</span><br><span class="line">See http:<span class="comment">//rocketmq.apache.org/docs/faq/ for further details.</span></span><br><span class="line">    at org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.client</span><span class="class">.impl</span><span class="class">.producer</span><span class="class">.DefaultMQProducerImpl</span><span class="class">.sendDefaultImpl</span>(DefaultMQProducerImpl<span class="class">.java</span>:<span class="number">544</span>)</span><br><span class="line">    at org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.client</span><span class="class">.impl</span><span class="class">.producer</span><span class="class">.DefaultMQProducerImpl</span><span class="class">.send</span>(DefaultMQProducerImpl<span class="class">.java</span>:<span class="number">1065</span>)</span><br><span class="line">    at org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.client</span><span class="class">.impl</span><span class="class">.producer</span><span class="class">.DefaultMQProducerImpl</span><span class="class">.send</span>(DefaultMQProducerImpl<span class="class">.java</span>:<span class="number">1023</span>)</span><br><span class="line">    at org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.client</span><span class="class">.producer</span><span class="class">.DefaultMQProducer</span><span class="class">.send</span>(DefaultMQProducer<span class="class">.java</span>:<span class="number">212</span>)</span><br><span class="line">    at org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.example</span><span class="class">.quickstart</span><span class="class">.Producer</span><span class="class">.main</span>(Producer<span class="class">.java</span>:<span class="number">69</span>)</span><br><span class="line">    at sun<span class="class">.reflect</span><span class="class">.NativeMethodAccessorImpl</span><span class="class">.invoke0</span>(Native Method)</span><br><span class="line">    at sun<span class="class">.reflect</span><span class="class">.NativeMethodAccessorImpl</span><span class="class">.invoke</span>(NativeMethodAccessorImpl<span class="class">.java</span>:<span class="number">62</span>)</span><br><span class="line">    at sun<span class="class">.reflect</span><span class="class">.DelegatingMethodAccessorImpl</span><span class="class">.invoke</span>(DelegatingMethodAccessorImpl<span class="class">.java</span>:<span class="number">43</span>)</span><br><span class="line">    at java<span class="class">.lang</span><span class="class">.reflect</span><span class="class">.Method</span><span class="class">.invoke</span>(Method<span class="class">.java</span>:<span class="number">497</span>)</span><br><span class="line">    at com<span class="class">.intellij</span><span class="class">.rt</span><span class="class">.execution</span><span class="class">.application</span><span class="class">.AppMain</span><span class="class">.main</span>(AppMain<span class="class">.java</span>:<span class="number">144</span>)</span><br><span class="line">Caused by: org<span class="class">.apache</span><span class="class">.rocketmq</span><span class="class">.remoting</span><span class="class">.exception</span><span class="class">.RemotingConnectException</span>: connect to &lt;<span class="number">172.17</span>.<span class="number">42.1</span>:<span class="number">10909</span>&gt; failed</span><br></pre></td></tr></table></figure>
<p>172.17.42.1这个IP地址是docker的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 rocketmq]$ ifconfig</span><br><span class="line">docker0   Link encap:Ethernet  HWaddr CA:<span class="number">3</span>E:ED:C2:<span class="number">67</span>:<span class="number">20</span></span><br><span class="line">          inet addr:<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>  Bcast:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>  Mask:<span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">em1       Link encap:Ethernet  HWaddr B0:<span class="number">83</span>:FE:C7:<span class="number">02</span>:B3</span><br><span class="line">          inet addr:<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>  Bcast:<span class="number">192.168</span><span class="number">.6</span><span class="number">.255</span>  Mask:<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>用模板生成，可以看到brokerIP1就是docker的IP:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 rocketmq]$ sh bin/mqbroker -m &gt; broker.p</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0652 rocketmq]$ cat broker.p</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">19</span> <span class="number">17</span>\:<span class="number">58</span>\:<span class="number">00</span> INFO main - namesrvAddr=localhost:<span class="number">9876</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">19</span> <span class="number">17</span>\:<span class="number">58</span>\:<span class="number">00</span> INFO main - brokerIP1=<span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">19</span> <span class="number">17</span>\:<span class="number">58</span>\:<span class="number">00</span> INFO main - brokerName=dp0652</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">19</span> <span class="number">17</span>\:<span class="number">58</span>\:<span class="number">00</span> INFO main - brokerClusterName=DefaultCluster</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">19</span> <span class="number">17</span>\:<span class="number">58</span>\:<span class="number">00</span> INFO main - brokerId=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>接下来重启broker:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 rocketmq]$ sh bin/mqshutdown broker</span><br><span class="line">The <span class="function"><span class="title">mqbroker</span><span class="params">(<span class="number">29723</span>)</span></span> is running...</span><br><span class="line">Send shutdown request to <span class="function"><span class="title">mqbroker</span><span class="params">(<span class="number">29723</span>)</span></span> OK</span><br><span class="line">[qihuang.zheng@dp0652 rocketmq]$ nohup sh bin/mqbroker -n localhost:<span class="number">9876</span> -c broker<span class="class">.properties</span> &amp;</span><br></pre></td></tr></table></figure>
<p>重启后发送消息正常，这里把Topic改成TopicTestA：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SendResult [sendStatus=SEND_OK, msgId=0A39F12CF5A6355DA<span class="number">25460935C28</span>0000, offsetMsgId=C<span class="number">0A80634000</span><span class="number">02A9F00000</span><span class="number">0000002</span>BEB2, messageQueue=MessageQueue [topic=TopicTestA, brokerName=dp0652, queueId=0], queueOffset=0]</span><br></pre></td></tr></table></figure>
<p>查看store，可以看到commitlog没有新增文件夹，而consumequeue则新增了TopicTestA文件夹：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── commitlog</span><br><span class="line">│   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">├── consumequeue</span><br><span class="line">│   ├── TopicTest</span><br><span class="line">│   │   ├── 0</span><br><span class="line">│   │   │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│   │   ├── 1</span><br><span class="line">│   │   │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│   │   ├── 2</span><br><span class="line">│   │   │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│   │   └── 3</span><br><span class="line">│   │       └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│   └── TopicTestA</span><br><span class="line">│       ├── 0</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       ├── 1</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       ├── 2</span><br><span class="line">│       │   └── <span class="number">00000000000</span><span class="number">000000000</span></span><br><span class="line">│       └── 3</span><br><span class="line">│           └── <span class="number">00000000000</span><span class="number">000000000</span></span><br></pre></td></tr></table></figure>
<h1 id="API示例">API示例</h1><h2 id="生产者">生产者</h2><p><strong>同步</strong>的生产者：<a href="http://rocketmq.apache.org/docs/simple-example/" target="_blank" rel="external">http://rocketmq.apache.org/docs/simple-example/</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">producer.setNamesrvAddr(<span class="string">"192.168.6.52:9876"</span>);</span><br><span class="line">producer.start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTestA"</span>, <span class="string">"TagA"</span>, </span><br><span class="line">      (<span class="string">"RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">    );</span><br><span class="line">    SendResult sendResult = producer.send(msg);</span><br><span class="line">    System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">&#125;</span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure>
<p><strong>异步</strong>的生产者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">producer.send(msg, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%-10d OK %s %n"</span>, index, sendResult.getMsgId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>一次性</strong>的生产者，主要用于日志收集：</p>
<p>一个 RPC 调用,通常是这样一个过程:</p>
<ol>
<li>客户端发送请求到服务器</li>
<li>服务器处理该请求</li>
<li>服务器向客户端返回应答</li>
</ol>
<p>所以一个 RPC 的耗时时间是上述三个步骤的总和,而某些场景要求耗时非常短,但是对可靠性要求并不高,<br>例如日志收集类应用,此类应用可以采用 oneway 形式调用,oneway 形式只发送请求不等待应答,<br>而发送请求在客户端实现层面仅仅是一个 os 系统调用的开销,即将数据写入客户端的 socket 缓冲区,此过程耗时通常在微秒级。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.sendOneway(msg);</span><br></pre></td></tr></table></figure>
<p><strong>有序</strong>的生产者：<a href="http://rocketmq.apache.org/docs/order-example/" target="_blank" rel="external">http://rocketmq.apache.org/docs/order-example/</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"example_group_name"</span>);</span><br><span class="line">producer.start();</span><br><span class="line">String[] tags = <span class="keyword">new</span> String[] &#123;<span class="string">"TagA"</span>, <span class="string">"TagB"</span>, <span class="string">"TagC"</span>, <span class="string">"TagD"</span>, <span class="string">"TagE"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> orderId = i % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//Create a message instance, specifying topic, tag , message key and body.</span></span><br><span class="line">    Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTestjjj"</span>, tags[i % tags.length], <span class="string">"KEY"</span> + i, (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">    SendResult sendResult = producer.send(msg, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">            Integer id = (Integer) arg;</span><br><span class="line">            <span class="keyword">int</span> index = id % mqs.size();</span><br><span class="line">            <span class="keyword">return</span> mqs.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, orderId); <span class="comment">// 最后一个参数orderId作为第二个参数的arg值</span></span><br><span class="line">    System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">&#125;</span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure>
<p><strong>定时</strong>生产者：<a href="http://rocketmq.apache.org/docs/schedule-example/" target="_blank" rel="external">http://rocketmq.apache.org/docs/schedule-example/</a></p>
<p>定时消息是指消息发到 Broker 后,不能立刻被 Consumer 消费,要到特定的时间点或者等待特定的时间后才能被消费。<br>如果要支持任意的时间精度,在 Broker 局面,必须要做消息排序,如果再涉及到持久化,那么消息排序要不可避免的产生巨大性能开销。</p>
<p>RocketMQ 支持定时消息,但是不支持任意时间精度,仅支持特定的 level,例如定时 5s,10s,1m 等。<br>定时消息是在生产者端设置DelayTimeLevel，消费者端不做任何处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledMessageProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"ExampleProducerGroup"</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">int</span> totalMessagesToSend = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalMessagesToSend; i++) &#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"TestTopic"</span>, (<span class="string">"Hello scheduled message "</span> + i).getBytes());</span><br><span class="line">            <span class="comment">// This message will be delivered to consumer 10 seconds later.</span></span><br><span class="line">            message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">            producer.send(message);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>批量消息：<a href="http://rocketmq.apache.org/docs/batch-example/" target="_blank" rel="external">http://rocketmq.apache.org/docs/batch-example/</a></p>
<p>简单的批量消息只需要构造List<message>，调用producer.send()即可。不过在一个Batch中消息大小不能超过1Mib，需要程序手动进行切分。</message></p>
<h2 id="消费者">消费者</h2><p><strong>拉取</strong>消费者（PullConsumer）：</p>
<ul>
<li>首先根据Topic获取订阅的MessageQueue</li>
<li>对每个MessageQueue，都会调用pullBlockIfNotFound方法消费这个队列里的消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class="keyword">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        DefaultMQPullConsumer consumer = <span class="keyword">new</span> DefaultMQPullConsumer(<span class="string">"please_rename_unique_group_name_5"</span>);</span><br><span class="line">        consumer.start();</span><br><span class="line">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class="string">"TopicTest1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Consume from the queue: "</span> + mq + <span class="string">"%n"</span>);</span><br><span class="line">            SINGLE_MQ:</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                PullResult pullResult = consumer.pullBlockIfNotFound(mq, <span class="keyword">null</span>, getMessageQueueOffset(mq), <span class="number">32</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%s%n"</span>, pullResult);</span><br><span class="line">                putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class="line">                <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> FOUND:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> NO_MATCHED_MSG:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> NO_NEW_MSG:</span><br><span class="line">                        <span class="keyword">break</span> SINGLE_MQ;</span><br><span class="line">                    <span class="keyword">case</span> OFFSET_ILLEGAL:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        consumer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMessageQueueOffset</span><span class="params">(MessageQueue mq)</span> </span>&#123;</span><br><span class="line">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class="line">        <span class="keyword">if</span> (offset != <span class="keyword">null</span>) <span class="keyword">return</span> offset;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putMessageQueueOffset</span><span class="params">(MessageQueue mq, <span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        OFFSE_TABLE.put(mq, offset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推送</strong>消费者（PushConsumer）：</p>
<ul>
<li>订阅方法的第二个参数为<code>*</code>，表示所有的Tag，不进行过滤</li>
<li>Push推送方式采用注册消息监听器的方式，当收到Broker推送的消息，就会触发监听器的回调</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"CID_JODIE_1"</span>);</span><br><span class="line">consumer.subscribe(<span class="string">"Jodie_topic_1023"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个采用Push模式的消费者的监听器都一样</span></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">        System.out.printf(Thread.currentThread().getName() + <span class="string">" Receive New Messages: "</span> + msgs + <span class="string">"%n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumer.start();</span><br><span class="line">System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>广播</strong>模式的推送消费者，相比上一个示例增加了设置消息模型（<code>setMessageModel</code>），其他没有变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name_1"</span>);</span><br><span class="line">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"TagA || TagC || TagD"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>过滤器</strong>的消费者。过滤器采用Push方式时，过滤逻辑在Broker实现，Broker把过滤过的数据发送给消费者。<br>如果过滤器采用Pull模式，所有的数据都会传送到消费者，然后在消费者端执行过滤逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"ConsumerGroupNamecc4"</span>);</span><br><span class="line">ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">File classFile = <span class="keyword">new</span> File(classLoader.getResource(<span class="string">"MessageFilterImpl.java"</span>).getFile());</span><br><span class="line">String filterCode = MixAll.file2String(classFile);</span><br><span class="line"><span class="comment">// 订阅方法的第二个参数是过滤器的实现类，而前面示例的第二个参数是Tag过滤</span></span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"org.apache.rocketmq.example.filter.MessageFilterImpl"</span>, filterCode);</span><br></pre></td></tr></table></figure>
<p><strong>SQL</strong>消费者（生产者发送消息时通过putUserProperty可以指定自定义的属性，除了Tag外，自定义属性也可以被过滤）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name_4"</span>);</span><br><span class="line"><span class="comment">// 订阅方法的第二个参数是消息选择器</span></span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, MessageSelector.bySql(</span><br><span class="line">    <span class="string">"(TAGS is not null and TAGS in ('TagA', 'TagB'))"</span> +</span><br><span class="line">    <span class="string">"and (a is not null and a between 0  3)"</span>));</span><br></pre></td></tr></table></figure>
<p><strong>有序</strong>的消费者：前面几种消费者注册的监听器是：MessageListenerConcurrently，这里是MessageListenerOrderly。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"example_group_name"</span>);</span><br><span class="line">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"TagA || TagC || TagD"</span>);</span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line">    AtomicLong consumeTimes = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class="line">        context.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        System.out.printf(Thread.currentThread().getName() + <span class="string">" Receive New Messages: "</span> + msgs + <span class="string">"%n"</span>);</span><br><span class="line">        <span class="keyword">this</span>.consumeTimes.incrementAndGet();</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.get() % <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.get() % <span class="number">3</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.get() % <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.consumeTimes.get() % <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            context.setSuspendCurrentQueueTimeMillis(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">consumer.start();</span><br></pre></td></tr></table></figure>
<p>消费者的监听器有两种形式：并发和有序。参考：<a href="http://rocketmq.apache.org/docs/best-practice-consumer/" target="_blank" rel="external">http://rocketmq.apache.org/docs/best-practice-consumer/</a></p>
<table>
<thead>
<tr>
<th>监听器</th>
<th>上下文</th>
<th>返回状态</th>
<th>返回码</th>
</tr>
</thead>
<tbody>
<tr>
<td>MessageListenerConcurrently</td>
<td>ConsumeConcurrentlyContext</td>
<td>ConsumeConcurrentlyStatus</td>
<td>CONSUME_SUCCESS</td>
</tr>
<tr>
<td>MessageListenerOrderly</td>
<td>ConsumeOrderlyContext</td>
<td>ConsumeOrderlyStatus</td>
<td>SUCCESS、ROLLBACK、COMMIT、SUSPEND_CURRENT_QUEUE_A_MOMENT</td>
</tr>
</tbody>
</table>
<p>消息消费的顺序问题：</p>
<ul>
<li>并发情况下，返回RECONSUME_LATER，表示过一会儿再消费，先去消费其他消息</li>
<li>有序情况下，返回SUSPEND_CURRENT_QUEUE_A_MOMENT，表示等一会儿再消费，无法消费其他消息</li>
</ul>
<h1 id="基本流程">基本流程</h1><h2 id="Remoting_RPC示例">Remoting RPC示例</h2><p>rocketmq-remoting模块采用Netty封装了RPC的调用，包括客户端和服务端之间的交互。</p>
<p>不同分布式系统在通信上都会实现RPC模块，比如Kafka、Hadoop等都有各自的RPC实现。</p>
<p>先来查看测试用例RemotingServerTest的使用方法：</p>
<ul>
<li>启动RemotingServer和RemotingClient</li>
<li>调用RemotingClient的invokeAsync()或者invokeSync()、invokeOneway()方法</li>
</ul>
<p>以异步调用为例，RemotingClient的invokeAsync()方法主要有三个参数：</p>
<ul>
<li>服务端地址，RPC调用需要指定服务端的地址，这样客户端才能发送请求，让服务端处理</li>
<li>远程指令（RemotingCommand），即客户端发送的请求</li>
<li>回调对象（InvokeCallback），即客户端收到服务端返回的响应结果后，如何处理</li>
</ul>
<p>RPC调用的具体步骤如下：</p>
<ul>
<li>启动客户端和服务端</li>
<li>客户端构造远程指令对象</li>
<li>客户端通过RemotingClient同步或者异步调用</li>
<li>服务端在启动时注册的处理器，会处理客户端发送的请求，即调用处理器的processRequest()方法</li>
<li>服务端处理完请求后，返回响应给客户端</li>
<li>客户端收到服务端返回的响应结果，会触发回调对象调用operationComplete()方法</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">RemotingServer <span class="title">createRemotingServer</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    NettyServerConfig config = <span class="keyword">new</span> NettyServerConfig();</span><br><span class="line">    RemotingServer remotingServer = <span class="keyword">new</span> NettyRemotingServer(config);</span><br><span class="line">    remotingServer.registerProcessor(<span class="number">0</span>, <span class="keyword">new</span> NettyRequestProcessor() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function">RemotingCommand <span class="title">processRequest</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand request)</span> </span>&#123;</span><br><span class="line">            request.setRemark(<span class="string">"Hi "</span> + ctx.channel().remoteAddress());</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Executors.newCachedThreadPool());</span><br><span class="line">    remotingServer.start();</span><br><span class="line">    <span class="keyword">return</span> remotingServer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testInvokeAsync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, RemotingConnectException,</span><br><span class="line">    RemotingTimeoutException, RemotingTooMuchRequestException, RemotingSendRequestException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    RemotingCommand request = RemotingCommand.createRequestCommand(<span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    request.setRemark(<span class="string">"messi"</span>);</span><br><span class="line">    remotingClient.invokeAsync(<span class="string">"localhost:8888"</span>, request, <span class="number">1000</span> * <span class="number">3</span>, <span class="keyword">new</span> InvokeCallback() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ResponseFuture responseFuture)</span> </span>&#123;</span><br><span class="line">            latch.countDown();</span><br><span class="line">            assertThat(responseFuture.getResponseCommand().getExtFields()).hasSize(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    latch.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RemotingServer的registerProcessor()方法有三个参数：</p>
<ul>
<li>请求编码，比如SEND_MESSAGE表示（生产者）客户端发送消息的请求</li>
<li>请求处理器，比如服务端如何处理客户端发送消息的处理器，实现类为：SendMessageProcessor</li>
<li>处理线程，每种请求编码都对应一个处理线程池。如果没有指定，则使用默认的线程池</li>
</ul>
<p>客户端调用服务端有三种方式：同步（Sync）、异步（Async）、一次性（OneWay）。前两种有响应结果，最后一种不产生响应结果。</p>
<h2 id="Netty_RPC">Netty RPC</h2><p><code>NettyRemotingServer</code>在启动时，会绑定NettyServerHandler。Netty RPC的特点如下：</p>
<ul>
<li>请求和响应都是用RemotingCommand对象来表示</li>
<li>服务端（NettyRemotingServer）和客户端（NettyRemotingClient）实现了抽象的NettyRemotingAbstract</li>
<li>抽象类根据不同的指令类型调用不同的处理方法，比如处理请求调用processRequestCommand，处理响应调用processResponseCommand</li>
</ul>
<p>下面举例客户端和服务端执行一次RPC调用链路的过程：</p>
<ul>
<li>客户端发送请求给服务端，通过Netty的Channel发送请求给服务端</li>
<li>服务端处理客户端发送的请求，NettyServerHandler接收的消息类型为REQUEST_COMMAND，调用processRequestCommand方法</li>
<li>服务端处理完成后，通过Netty的Channel发送响应结果给客户端</li>
<li>客户端处理服务端发送的响应，NettyClientHandler接收的消息类型为RESPONSE_COMMAND，调用processResponseCommand方法</li>
</ul>
<p>NettyRemotingAbstract用<code>processorTable</code>变量记录了请求编码、处理器、线程池之间的关系。</p>
<ul>
<li>每个请求编码都对应了一种唯一的处理器，相同请求编码的处理器是相同的</li>
<li>由于处理器与线程池组成一对，所以相同请求编码的请求在相同的线程池中执行</li>
</ul>
<p>不同的请求编码在不同的线程池中运行，以发送消息和消费消息为例：</p>
<table>
<thead>
<tr>
<th>请求编码（request code）</th>
<th>处理器</th>
<th>线程池</th>
</tr>
</thead>
<tbody>
<tr>
<td>SEND_MESSAGE</td>
<td>SendMessageProcessor</td>
<td>ExecutorService#1</td>
</tr>
<tr>
<td>GET_MESSAGE</td>
<td>PullMessageProcessor</td>
<td>ExecutorService#2</td>
</tr>
</tbody>
</table>
<p>以经典的RPC通信模型来看，客户端向服务端发起RPC调用请求。那么<code>processorTable</code>主要针对服务端，<code>responseTable</code>则主要针对客户端。</p>
<ul>
<li>客户端发起RPC调动时，会创建异步的响应对象，并放入将opaque和ResponseFuture的映射关系放入responseTable</li>
<li>当客户端收到服务端发送的响应结果后，会将opaque以及ResponseFuture从responseTable中移除</li>
</ul>
<p>那么opaque是如何在请求和响应之间进行关联的呢？下面代码中的注释说明了opaque在请求和响应之间的设置和获取流程。</p>
<blockquote>
<p>opaque表示：请求发起方在同一连接上不同的请求标识代码,多线程连接复用使用</p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> HashMap&lt;Integer<span class="comment">/* request code */</span>, Pair&lt;NettyRequestProcessor, ExecutorService&gt;&gt; processorTable =</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;Integer, Pair&lt;NettyRequestProcessor, ExecutorService&gt;&gt;(<span class="number">64</span>);</span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">final</span> ConcurrentMap&lt;Integer <span class="comment">/* opaque */</span>, ResponseFuture&gt; responseTable =</span><br><span class="line">    <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, ResponseFuture&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">processMessageReceived</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RemotingCommand cmd = msg;</span><br><span class="line">    <span class="keyword">if</span> (cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (cmd.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_COMMAND:</span><br><span class="line">                processRequestCommand(ctx, cmd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESPONSE_COMMAND:</span><br><span class="line">                processResponseCommand(ctx, cmd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求，比如服务端处理客户端发送的请求，NettyServerHandler会调用到这里</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">processRequestCommand</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Pair&lt;NettyRequestProcessor, ExecutorService&gt; matched = <span class="keyword">this</span>.processorTable.get(cmd.getCode());</span><br><span class="line">    <span class="comment">// 4. 从请求对象中获取opaque，那么什么时候opaque设置到请求中？</span></span><br><span class="line">    <span class="comment">// 这里的cmd实际上是步骤3的request，因为步骤1已经有opaque，所以这里也能取到opaque</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> opaque = cmd.getOpaque();</span><br><span class="line">    <span class="keyword">final</span> RemotingCommand response = pair.getObject1().processRequest(ctx, cmd);</span><br><span class="line">    <span class="comment">// 5. 将opaque设置到响应对象中</span></span><br><span class="line">    response.setOpaque(opaque);</span><br><span class="line">    <span class="comment">// 6. 发送响应对象给客户端</span></span><br><span class="line">    ctx.writeAndFlush(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理响应，比如客户端处理服务端发送的响应，NettyClientHandler会调用到这里</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">processResponseCommand</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand cmd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 7. 从响应对象中获取opaque，那么什么时候opaque设置到响应里？答案在步骤5中</span></span><br><span class="line">    <span class="comment">// 这里的cmd是步骤5的response，而response的opaque来自于request</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> opaque = cmd.getOpaque();</span><br><span class="line">    <span class="comment">// 8. 根据opaque从responseTable中获取出对应的ResponseFuture</span></span><br><span class="line">    <span class="keyword">final</span> ResponseFuture responseFuture = responseTable.get(opaque);</span><br><span class="line">    <span class="keyword">if</span> (responseFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">        responseFuture.setResponseCommand(cmd);</span><br><span class="line">        responseFuture.release();</span><br><span class="line">        <span class="comment">// 9. 将opaque与ResponseFuture的映射关系从responseTable中移除，与步骤2互相对应</span></span><br><span class="line">        responseTable.remove(opaque);</span><br><span class="line">        <span class="comment">// 执行客户端在发送RPC调用时定义的回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (responseFuture.getInvokeCallback() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executeInvokeCallback(responseFuture);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            responseFuture.putResponse(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端发起RPC调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">RemotingCommand <span class="title">invokeSyncImpl</span><span class="params">(<span class="keyword">final</span> Channel channel, <span class="keyword">final</span> RemotingCommand request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 从请求中获取opaque</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> opaque = request.getOpaque();</span><br><span class="line">    <span class="keyword">final</span> ResponseFuture responseFuture = <span class="keyword">new</span> ResponseFuture(opaque, timeoutMillis, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 2. 创建ResponseFuture，并记录到responseTable</span></span><br><span class="line">    <span class="keyword">this</span>.responseTable.put(opaque, responseFuture);</span><br><span class="line">    <span class="keyword">final</span> SocketAddress addr = channel.remoteAddress();</span><br><span class="line">    <span class="comment">// 3. 发起RPC调用</span></span><br><span class="line">    channel.writeAndFlush(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生产者发送消息">生产者发送消息</h2><p>以example/quickstart下的Producer发送消息为例，入口方法走到DefaultMQProducerImpl的sendDefaultImpl()方法。</p>
<p>发送消息过程涉及下面几个步骤：</p>
<ul>
<li>tryToFindTopicPublishInfo()：根据消息的Topic获取TopicPublishInfo</li>
<li>selectOneMessageQueue()：选择一个MessageQueue</li>
<li>sendKernelImpl()：调用内核的发送方法</li>
<li>如果是同步调用，返回SendResult，否则返回空</li>
</ul>
<p>接下来进入DefaultMQProducerImpl的内核发送方法，主要的参数有：Message、MessageQueue、TopicPublishInfo</p>
<ul>
<li>如果有Hook，构造SendMessageContext，将Message、MessageQueue等都设置为上下文对象的成员变量</li>
<li>构造SendMessageRequestHeader</li>
<li>从MQClientFactory获取getMQClientAPIImpl()实现类MQClientAPIImpl，调用sendMessage()方法</li>
</ul>
<p>接下来进入MQClientAPIImpl的sendMessage()方法</p>
<ul>
<li>根据RequestCode.SEND_MESSAGE（请求编码）和SendMessageRequestHeader（请求头）创建RemotingCommand对象</li>
<li>设置请求的body为消息内容：request.setBody(msg.getBody())</li>
<li>调用remotingClient.invokeAsync()或者invokeSync()方法</li>
<li>对于同步调用，因为要等待结果返回，所以会立即调用processSendResponse()</li>
<li>processSendResponse()方法返回一个SendResult对象</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SendResult sendMessageSync(</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> addr, <span class="comment">// Broker的地址</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> brokerName, <span class="comment">// Broker的名字</span></span><br><span class="line">    <span class="keyword">final</span> Message msg, <span class="comment">// 消息内容</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis,</span><br><span class="line">    <span class="keyword">final</span> RemotingCommand request <span class="comment">// 请求对象</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// RPC调用示例，这里的客户端是生产者，通过MQClientAPIImpl调用</span></span><br><span class="line">    RemotingCommand response = <span class="keyword">this</span>.remotingClient.invokeSync(addr, request, timeoutMillis);</span><br><span class="line">    <span class="keyword">assert</span> response != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.processSendResponse(brokerName, msg, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产者通过MQClientAPIImpl发起RPC调用，request请求对象的编码是SEND_MESSAGE。这里的地址指的是Broker的地址，而不是NameServer。<br>虽然生产者连接的是NameServer，但这中间会有选择MessageQueue，再选择Broker的过程，由于这里先关注整体的流程，暂时不去分析具体的细节。</p>
<p>客户端通过<code>RemotingClient</code>调用了服务端Broker，接下来看服务端<code>BrokerController</code>的处理。</p>
<p>BrokerController启动时会为各种请求类型注册不同的请求处理器，比如SEND_MESSAGE注册了SendMessageProcessor处理器：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">registerProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SendMessageProcessor sendProcessor = <span class="keyword">new</span> SendMessageProcessor(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// SendMessageProcessor有两个Hook：发送消息和消费消息的Hook。</span></span><br><span class="line">    sendProcessor.registerSendMessageHook(sendMessageHookList);</span><br><span class="line">    sendProcessor.registerConsumeMessageHook(consumeMessageHookList);</span><br><span class="line">    <span class="keyword">this</span>.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, <span class="keyword">this</span>.sendMessageExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SendMessageProcessor的processRequest()方法会处理生产者客户端发送的SEND_MESSAGE请求。</p>
<p>客户端在发送请求之前构建了<code>SendMessageContext</code>和<code>SendMessageRequestHeader</code>，这里对应的会首先从RemotingCommand反解析出着两个对象</p>
<ul>
<li>解析请求的body，创建MessageExtBrokerInner对象</li>
<li>获取MessageStore，并调用putMessage方法，传入MessageExtBrokerInner对象</li>
<li>返回PutMessageResult，并调用handlePutMessageResult方法</li>
<li>最后返回的是一个RemotingCommand响应对象，会返回给客户端</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">RemotingCommand <span class="title">processRequest</span><span class="params">(ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException </span>&#123;</span><br><span class="line">    SendMessageContext mqtraceContext;</span><br><span class="line">    <span class="keyword">switch</span> (request.getCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.consumerSendMsgBack(ctx, request);</span><br><span class="line">        <span class="keyword">default</span>: // SEND_MESSAGE的处理逻辑...</span><br><span class="line">            SendMessageRequestHeader requestHeader = parseRequestHeader(request);</span><br><span class="line">            mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class="line">            <span class="keyword">this</span>.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class="line">            RemotingCommand response;</span><br><span class="line">            <span class="keyword">if</span> (requestHeader.isBatch()) &#123;</span><br><span class="line">                response = <span class="keyword">this</span>.sendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response = <span class="keyword">this</span>.sendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.executeSendMessageHookAfter(response, mqtraceContext);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来进入DefaultMessageStore的putMessage()方法，这个方法会调用CommitLog的putMessage()方法</p>
<ul>
<li>BrokerController和SendMessageProcessor都在broker模块</li>
<li>MessageStore和CommitLog则在store模块</li>
</ul>
<p>CommitLog首先获取最近的MappedFile，然后追加消息到映射文件中。</p>
<ul>
<li>追加消息的回调类DefaultAppendMessageCallback是执行数据写入文件的真正方法。</li>
<li>追加完成后，有多种的磁盘刷写方式，比如同步和异步</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="type">PutMessageResult</span> putMessage(final <span class="type">MessageExtBrokerInner</span> msg) &#123;</span><br><span class="line">    <span class="type">MappedFile</span> mappedFile = this.mappedFileQueue.getLastMappedFile();</span><br><span class="line">    <span class="type">AppendMessageResult</span> <span class="literal">result</span> = mappedFile.appendMessage(msg, this.appendMessageCallback);</span><br><span class="line">    <span class="type">PutMessageResult</span> putMessageResult = new <span class="type">PutMessageResult</span>(<span class="type">PutMessageStatus</span>.<span class="type">PUT_OK</span>, <span class="literal">result</span>);</span><br><span class="line">    handleDiskFlush(<span class="literal">result</span>, putMessageResult, msg);</span><br><span class="line">    handleHA(<span class="literal">result</span>, putMessageResult, msg);</span><br><span class="line">    <span class="keyword">return</span> putMessageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，我们省略了具体写入到CommitLog中的细节，以及如何处理磁盘的刷写、HA等细枝末节。实际上，到这里为止，<br>生产者客户端发起RPC调用，到服务端处理请求，服务端返回响应，客户端接收响应结果，这个过程已经分析完毕了。</p>
<h2 id="Pull_Consumer">Pull Consumer</h2><p>PULL_MESSAGE对应的处理器是PullMessageProcessor。与生产消息调用MessageStore的putMessage()类似，<br>消费消息调用MessageStore的getMessage()方法，并返回GetMessageResult。</p>
<table>
<thead>
<tr>
<th>请求编码</th>
<th>消息处理器</th>
<th>消息存储</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>SEND_MESSAGE</td>
<td>SendMessageProcessor</td>
<td>putMessage()</td>
<td>PutMessageResult</td>
</tr>
<tr>
<td>PULL_MESSAGE</td>
<td>PullMessageProcessor</td>
<td>getMessage()</td>
<td>GetMessageResult</td>
</tr>
</tbody>
</table>
<p>消费者还需要提交偏移量，对应ConsumerOffsetManager的commitOffset()方法。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function">RemotingCommand <span class="title">processRequest</span><span class="params">(<span class="keyword">final</span> Channel channel, RemotingCommand request, <span class="keyword">boolean</span> brokerAllowSuspend)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> GetMessageResult getMessageResult = <span class="keyword">this</span>.brokerController.getMessageStore().getMessage(</span><br><span class="line">            requestHeader.getConsumerGroup(),   <span class="comment">// 消费组</span></span><br><span class="line">            requestHeader.getTopic(),           <span class="comment">// 主题</span></span><br><span class="line">            requestHeader.getQueueId(),         <span class="comment">// 队列编号</span></span><br><span class="line">            requestHeader.getQueueOffset(),     <span class="comment">// 队列的偏移量</span></span><br><span class="line">            requestHeader.getMaxMsgNums(),      <span class="comment">// 最大的消息数量</span></span><br><span class="line">            messageFilter);                     <span class="comment">// 过滤器</span></span><br><span class="line">    <span class="comment">// .......................................................</span></span><br><span class="line">    <span class="keyword">if</span> (storeOffsetEnable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brokerController.getConsumerOffsetManager().commitOffset(</span><br><span class="line">            RemotingHelper.parseChannelRemoteAddr(channel),</span><br><span class="line">            requestHeader.getConsumerGroup(), </span><br><span class="line">            requestHeader.getTopic(), </span><br><span class="line">            requestHeader.getQueueId(), </span><br><span class="line">            requestHeader.getCommitOffset());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存储层设计到文件操作时，生产消息会写到CommitLog，消费消息则会调用getMessage方法，给定偏移量和大小。</p>
<h1 id="设计">设计</h1><h2 id="架构">架构</h2><p><img src="http://rocketmq.apache.org/assets/images/rmq-basic-arc.png" alt="arch"></p>
<ul>
<li><strong>NameServer Cluster</strong>：<br>Name Servers provide lightweight <em>service discovery and routing</em>.<br>Each Name Server records full routing information（路由信息表）,<br>provides corresponding reading and writing service,<br>and supports fast storage expansion.</li>
<li><strong>Broker Cluster</strong>：<br>Brokers take care of message storage by providing lightweight TOPIC and QUEUE mechanisms.<br>They support the Push and Pull model, contains fault tolerance mechanism (2 copies or 3 copies),<br>and provides strong padding of peaks and capacity of accumulating hundreds of billion messages in their original time order.<br>In addition, Brokers provide disaster recovery, rich metrics statistics, and alert mechanisms, all of which are lacking in traditional messaging systems.</li>
<li><strong>Producer Cluster</strong>：<br>Producers support distributed deployment.<br>Distributed Producers send messages to the Broker cluster through multiple load balancing modes.<br>The sending processes support fast failure and have low latency.</li>
<li><strong>Consumer Cluster</strong>：<br>Consumers support distributed deployment in the Push and Pull model as well.<br>It also supports cluster consumption（集群消费） and message broadcasting（消息广播）.<br>It provides real-time message subscription mechanism and can meet most consumer requirements. R</li>
</ul>
<p>NameServer is a fully functional server, which mainly includes two features:</p>
<ul>
<li>Broker Management, NameServer accepts the <em>register</em> from Broker cluster and provides <em>heartbeat</em> mechanism to check whether a broker is alive.</li>
<li>Routing Management, each NameServer will hold whole <em>routing info</em> about the broker cluster and the <em>queue info</em> for clients query.</li>
</ul>
<p>Broker server is responsible for message store and delivery, message query, HA guarantee, and so on.</p>
<ul>
<li>Remoting Module, the entry of broker, handles the requests from clients（处理客户端请求）.</li>
<li>Client Manager, manages the clients (Producer/Consumer) and maintains topic subscription of consumer（维护消费者的主题订阅）.</li>
<li>Store Service, provides simple APIs to store or query message in physical disk（磁盘文件存储和查询消息）.</li>
<li>HA Service, provides data sync feature between master broker and slave broker（主从节点的数据同步）.</li>
<li>Index Service, builds index for messages by specified key and provides quick message query（构建消息索引）.</li>
</ul>
<p>Name server follows the share-nothing design paradigm. Brokers send heartbeat data to all name servers.<br>Producers and consumers can query meta data from any of name servers available while sending / consuming messages.</p>
<p>Brokers can be divided into two categories according to their roles: master and slave.<br>Master brokers provide <em>RW</em> access while slave brokers only accept <em>read</em> access.</p>
<p>To deploy a high-availability RocketMQ cluster with no single point of failure, a series of broker sets should be deployed.<br>A broker set contains one master with brokerId set to 0 and several slaves with non-zero brokerIDs.<br>All of the brokers in one set have the same brokerName. In serious scenarios,<br>we should have at least two brokers in one broker set. Each topic resides in two or more brokers.</p>
<p>Broker is a major component of the RocketMQ system.<br>It receives messages sent from producers, store them and prepare to handle pull requests from consumers.<br>It also stores message related meta data, including consumer groups, consuming progress offsets and topic / queue info.</p>
<p><img src="http://img.blog.csdn.net/20171021122552876" alt="mqs"></p>
<h2 id="物理部署结构（服务端）">物理部署结构（服务端）</h2><p><img src="http://img.blog.csdn.net/20171019140724552" alt="brokers"></p>
<p>Name Server 是一个几乎无状态节点,可集群部署,节点之间无任何信息同步。</p>
<p>Broker 部署相对复杂,Broker 分为 Master 与 Slave,<br>一个 Master 可以对应多个 Slave, 但是一个 Slave 只能对应一个 Master,<br>Master 与 Slave 的对应关系通过指定相同的 BrokerName,不同的 BrokerId 来定义,<br>BrokerId为 0 表示 Master,非 0 表示 Slave。Master 也可以部署多个。<br><strong>每个 Broker 与 Name Server 集群中的所有节点建立长连接,定时注册 Topic 信息到所有 Name Server。</strong></p>
<p>Producer 与 Name Server 集群中的其中一个节点(随机选择)建立长连接,<br>定期从 Name Server 取 Topic 路由信息,<br>并<strong>向提供 Topic 服务的 Master 建立长连接</strong>,<br>且定时向 Master 发送心跳。<br>Producer 完全无状态,可集群部署。  </p>
<p>Consumer 与 Name Server 集群中的其中一个节点(随机选择)建立长连接,<br>定期从 Name Server 取 Topic 路由信息,<br>并<strong>向提供 Topic 服务的 Master、Slave 建立长连接</strong>,<br>且定时向 Master、Slave 发送心跳。<br>Consumer 既可以从 Master 订阅消息,也可以从 Slave 订阅消息,订阅规则由 Broker 配置决定。</p>
<h2 id="逻辑部署结构（客户端）">逻辑部署结构（客户端）</h2><p><img src="http://img.blog.csdn.net/20171019141837964" alt="logical"></p>
<p><strong>Producer Group</strong> 用来表示一个发送消息应用,一个 Producer Group 下包含多个 Producer 实例,<br>可以是多台机器,也可以是一台机器的多个进程,或者一个进程的多个 Producer 对象。<br>一个 Producer Group 可以发送多个 Topic 消息,Producer Group 作用如下:  </p>
<ol>
<li>标识一类 Producer</li>
<li>可以通过运维工具查询这个发送消息应用下有多个 Producer 实例</li>
<li>发送分布式事务消息时,如果 Producer 中途意外宕机,Broker 会主动回调 Producer Group 内的任意一台机器来确认事务状态</li>
</ol>
<p><strong>Consumer Group</strong> 用来表示一个消费消息应用,一个 Consumer Group 下包含多个 Consumer 实例,<br>可以是多台机器,也可以是多个进程,或者是一个进程的多个 Consumer 对象。<br>一个 Consumer Group 下的多个 Consumer 以均摊/集群（CLUSTER）方式消费消息,<br>如果设置为广播方式(BROADCAST),那么这个 Consumer Group 下的每个实例都消费全量数据。  </p>
<h2 id="存储结构">存储结构</h2><p><img src="http://img.blog.csdn.net/20171019195642571" alt="store"></p>
<p><img src="http://img.blog.csdn.net/20171019195656785" alt="store"></p>
<ol>
<li>所有数据单独存储到一个 Commit Log,完全顺序写,随机读。<br>RocketMQ 的所有消息都是持久化,先写入系统 PAGECACHE,然后刷盘,可以保证内存不磁盘都有一份数据, 访问时,直接从内存读叏。</li>
<li>对最终用户展现的队列(ConsumeQueue)实际只存储消息在CommitLog的位置信息,并且串行方式刷盘。</li>
<li>消费者的读取流程是：先读ConsumeQueue,再读CommitLog</li>
<li>由于ConsumeQueue存储数据量极少,并且是顺序读,在PAGECACHE预读作用下,<br>ConsumeQueue的读性能几乎与内存一致,即使堆积情况下。所以可认为 Consume Queue 完全不会阻碍读性能。</li>
<li>要保证CommitLog与ConsumeQueue完全的一致,增加了编程的复杂度。<br>Commit Log 中存储了所有的元信息,包含消息体,类似于 Mysql、Oracle 的 redolog,<br>所以只要有 Commit Log 在,Consume Queue 即使数据丢失,仍然可以恢复出来。  </li>
</ol>
<p>总结一句话：生产消息时先写入PageCache，然后刷写到磁盘。  </p>
<p><img src="http://img.blog.csdn.net/20171019201635395" alt="pagecache"></p>
<p>同步刷盘与异步刷盘的唯一区别是异步刷盘写完 PAGECACHE 直接返回,而同步刷盘需要等待刷盘完成才返回, 同步刷盘流程如下:  </p>
<ol>
<li>写入 PAGECACHE 后,线程等待,通知刷盘线程刷盘。</li>
<li>刷盘线程刷盘后,唤醒前端等待线程,可能是一批线程。</li>
<li>前端等待线程向用户返回成功。</li>
</ol>
<p>读取消息的ConsumeQueue文件也会加载到PageCache，读PageCache和内存速度差不多。</p>
<p><img src="http://img.blog.csdn.net/20171021085345842" alt="pc"></p>
<ol>
<li>Producer 发送消息,消息从 socket 进入 java 堆。</li>
<li>Producer 发送消息,消息从 java 堆转入 PAGACACHE,物理内存。</li>
<li>Producer 发送消息,由异步线程刷盘,消息从 PAGECACHE 刷入磁盘。</li>
<li>Consumer 拉消息(正常消费),消息直接从PAGECACHE(数据在物理内存)转入socket,到达consumer,不经过 java 堆。<br>这种消费场景最多,线上 96G 物理内存,按照 1K 消息算,可以在物理内存缓存 1 亿条消息。</li>
<li>Consumer 拉消息(异常消费),消息直接从 PAGECACHE(数据在虚拟内存)转入 socket。</li>
<li>Consumer 拉消息(异常消费),由于 socket 访问了虚拟内存,产生缺页中断,此时会产生磁盘 IO,<br>从磁盘 Load 消息到 PAGECACHE,然后直接从 socket 发出去。</li>
<li>同5</li>
<li>同6</li>
</ol>
<h2 id="负载均衡（7-8/7-9）">负载均衡（7.8/7.9）</h2><p><img src="http://img.blog.csdn.net/20171021145704818" alt="loadbalance"></p>
<h2 id="消息查询(TODO_7-3)">消息查询(TODO 7.3)</h2><h3 id="按照MessageId查询">按照MessageId查询</h3><h3 id="按照MessageKey查询">按照MessageKey查询</h3><h2 id="消息过滤(TODO_7-4)">消息过滤(TODO 7.4)</h2><p>有两种类型的消息过滤：</p>
<ul>
<li>Broker 端消息过滤：在 Broker 中,按照 Consumer 的要求做过滤,优点是减少了对于 Consumer 无用消息的网络传输。缺点是增加了 Broker 的负担,实现相对复杂。</li>
<li>Consumer 端消息过滤：这种过滤方式可由应用完全自定义实现,但是缺点是很多无用的消息要传输到 Consumer 端。</li>
</ul>
<h2 id="长轮询Pull(TODO_7-5)">长轮询Pull(TODO 7.5)</h2><p>RocketMQ 的 Consumer 都是从 Broker 拉消息来消费,但是为了能做到实时收消息,<br>RocketMQ 使用长轮询方式,可以保证消息实时性同 Push 方式一致。简单说就是<strong>长轮询Pull = Push</strong>。</p>
<h2 id="顺序消息(TODO_7-6)">顺序消息(TODO 7.6)</h2><p>消息有序指的是一类消息消费时,能按照发送的顺序来消费。<br>例如:一个订单产生了 3 条消息,分别是订单创建,订单付款,订单完成。<br>消费时,要按照这个顺序消费才能有意义。但是同时订单之间是可以并行消费的。</p>
<p><img src="http://img.blog.csdn.net/20171021144845680" alt="order"></p>
<p>缺点：</p>
<ul>
<li>发送顺序消息无法利用集群 FailOver 特性<br>􏰀- 消费顺序消息的并行度依赖于队列数量（MessageQueue的数量）<br>􏰀- 队列热点问题,个别队列由于哈希不均导致消息过多,消费速度跟不上,产生消息堆积问题 􏰀 </li>
<li>遇到消息失败的消息,无法跳过,当前队列消费暂停（等一段时间再消费）</li>
</ul>
<h2 id="消费线程(单队列并行消费,_7-10)">消费线程(单队列并行消费, 7.10)</h2><p><img src="http://img.blog.csdn.net/20171021133510386" alt="singlequeue"></p>
<p>单队列并行消费采用滑动窗口方式并行消费,如图所示,3~7的消息在一个滑动窗口区间,可以有多个线程并行消费,但是每次提交的 Offset 都是最小 Offset,例如 3。</p>
<p>修改消费并行度的两种方法：</p>
<ol>
<li>同一个 ConsumerGroup 下,通过增加 Consumer 实例数量来提高并行度（超过订阅队列数的 Consumer 实例无效）。<br>可以通过加机器,或者在已有机器启动多个进程的方式。</li>
<li>提高单个 Consumer 的消费并行线程,通过修改两个参数：consumeThreadMin/consumeThreadMax。</li>
</ol>
<p>批量方式消费：</p>
<p>某些业务流程如果支持批量方式消费,则可以很大程度上提高消费吞吏量,例如订单扣款类应用,<br>一次处理一个订单耗时 1 秒钟,一次处理 10 个订单可能也只耗时 2 秒钟,这样即可大幅度提高消费的吞吏量。<br>通过设置 consumer 的 consumeMessageBatchMaxSize 返个参数,<br>默认是 1,即一次只消费一条消息,例如设置为 N,那么每次消费的 消息数小于等于 N。</p>
<h2 id="消息堆积、消息重试">消息堆积、消息重试</h2><ul>
<li>消息堆积（4.12）和消息重试（4.15）</li>
<li>解决办法（7.15）</li>
<li>跳过非重要消息（14.3）</li>
</ul>
<h2 id="事务(TODO)">事务(TODO)</h2><p>分布式事务涉及到两阶段提交问题,在数据存储方面的方面必然需要 KV 存储的支持,<br>因为第二阶段的提交回滚需要修改消息状态,一定涉及到根据 Key 去查找 Message 的动作。<br>RocketMQ 在第二阶段绕过了根据 Key 去查找 Message 的问题,<br>采用第一阶段发送 Prepared 消息时,拿到了消息的 Offset,<br>第二阶段通过 Offset 去访问消息, 并修改状态,Offset 就是数据的地址。</p>
<p>RocketMQ 这种实现事务方式,没有通过 KV 存储做,而是通过 Offset 方式,<br>存在一个显著缺陷,即通过 Offset 更改数据,会令系统的脏页过多,需要特别关注。</p>
<p><img src="http://img.blog.csdn.net/20171021151527711" alt="trans"></p>
<h3 id="Producer_Group">Producer Group</h3><p>Producers of the same role are grouped together.<br>A different producer instance of the same producer group<br>may be contacted by a broker to commit or roll back a transaction<br>in case the original producer crashed after the transaction.</p>
<p>Warning: Considering the provided producer is sufficiently powerful at sending messages,<br>only one instance is allowed per producer group to avoid unnecessary initialization of producer instances.</p>
<h2 id="扩容">扩容</h2><p>扩容是整个系统中的很重要的一个环节。在保证顺序的情况下进行扩容的难度会更大。<br>基本的策略是让向一个队列写入数据的消息发送者能够知道应该把消息写入迁移到新的队列中，<br>并且需要让消息的订阅者知道，当前的队列消费完数据后需要迁移到新队列去消费消息。关键点如下:</p>
<ul>
<li>原队列在开始扩容后需要有一个标志，即便有新消息过来，也不再接收。</li>
<li>通知消息发送端新的队列的位置。</li>
<li>对于消息接受端，对原来队列的定位会收到新旧两个位置，当旧队列的数据接受完毕后，则会只关心新队列的位置，完成切换。</li>
</ul>
<p>那么对于Metaq顺序消息，如何做到不停写扩容呢？我说说自己的看法：<br>在队列扩容的时候考虑到需要处理最新的消息服务，为了不丢失这部分消息，<br>可以采取让Producer暂存消息在本地磁盘设备中，<br>等扩容完成后再与Broker交互。这是我目前能想到的不停写扩容方式。</p>
<h1 id="参考文档">参考文档</h1><ul>
<li>RocketMQ原理简介</li>
<li>RocketMQ开发指南</li>
<li><pull类型消息中间件-消息服务端(三)>(<a href="http://www.cnblogs.com/zhulongchao/p/5792770.html" target="_blank" rel="external">http://www.cnblogs.com/zhulongchao/p/5792770.html</a>)</pull类型消息中间件-消息服务端(三)></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache RocketMQ: &lt;a href=&quot;http://rocketmq.apache.org/&quot;&gt;http://rocketmq.apache.org/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="mq" scheme="http://github.com/zqhxuyuan/categories/mq/"/>
    
    
      <category term="rocketmq" scheme="http://github.com/zqhxuyuan/tags/rocketmq/"/>
    
  </entry>
  
  <entry>
    <title>深入解析中间件之-Dubbo</title>
    <link href="http://github.com/zqhxuyuan/2017/10/18/Midd-Dubbo/"/>
    <id>http://github.com/zqhxuyuan/2017/10/18/Midd-Dubbo/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2017-10-20T12:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Alibaba Dubbo<br><a id="more"></a></p>
<h1 id="QuickStart">QuickStart</h1><p>在IDEA中运行Dubbo的快速入门：</p>
<ol>
<li>不需要编译源码，不需要安装监控中心（dubbo-monitor）和管理中心（dubbo-admin）</li>
<li>安装并启动ZooKeeper，使用ZK作为Dubbo的注册中心</li>
<li>创建dubbo-demo项目，包含三个模块：api、prodvider、consumer</li>
<li>修改provider模块和consumer模块的注册方式使用ZooKeeper：<code>zookeeper://127.0.0.1:2181</code></li>
<li>IDEA中启动provider模块的Provider</li>
<li>IDEA中启动consumer模块的Consumer</li>
</ol>
<p>Provider启动后会一直运行，日志如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">07</span>:<span class="number">007</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">07</span>:<span class="number">007</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: provider:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">07</span>:<span class="number">007</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls <span class="keyword">for</span> subscribe url provider:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, urls: [empty://10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325], dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>] Hello world, request from consumer: /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54685</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] New I/O server worker <span class="preprocessor">#<span class="number">1</span>-<span class="number">1</span>  WARN transport.AbstractServer:  [DUBBO] All clients has discontected from /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880.</span> You can graceful shutdown now., dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboServerHandler-<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>-thread-<span class="number">3</span>  INFO dubbo.DubboProtocol:  [DUBBO] disconected from /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54685</span>,url:dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;channel.readonly.sent=true&amp;codec=dubbo&amp;dubbo=2.5.6&amp;generic=false&amp;heartbeat=60000&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br></pre></td></tr></table></figure>
<p>Consumer启动后，运行完成，终端就关闭，表示一次RPC调用完成，日志如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">45</span>:<span class="number">045</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">46</span>:<span class="number">046</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">46</span>:<span class="number">046</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls <span class="keyword">for</span> subscribe url consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, urls: [dubbo://10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, empty://10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, empty://10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694], dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">46</span>:<span class="number">046</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Successed connect to server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span> from NettyClient <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> <span class="keyword">using</span> dubbo version <span class="number">2.5</span><span class="number">.6</span>, channel is NettyChannel [channel=[id: <span class="number">0x0f2ff811</span>, /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54685</span> =&gt; /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>]], dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">46</span>:<span class="number">046</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Start NettyClient zqhmac/<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> connect to the server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">46</span>:<span class="number">046</span> CST] main  INFO config.AbstractConfig:  [DUBBO] Refer dubbo service com.alibaba.dubbo.demo.DemoService from url zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&amp;application=demo-consumer&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;remote.timestamp=1508462946325&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">Hello world, response form provider: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span></span><br><span class="line"></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO config.AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO support.AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;pid=4324&amp;timestamp=1508463045739], dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;pid=4324&amp;timestamp=1508463045739, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unsubscribe url consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] ZkClient-EventThread-<span class="number">12</span>-<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2181</span>  INFO zkclient.ZkEventThread: Terminate ZkClient event thread.</span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO zookeeper.ZooKeeper: Session: <span class="number">0x15f376495000001</span> closed</span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Close dubbo connect: /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54685</span>--&gt;/<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO netty.NettyChannel:  [DUBBO] Close netty channel [id: <span class="number">0x0f2ff811</span>, /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54685</span> =&gt; /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>], dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] main-EventThread  INFO zookeeper.ClientCnxn: EventThread shut down <span class="keyword">for</span> session: <span class="number">0x15f376495000001</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboSharedHandler-thread-<span class="number">1</span>  INFO dubbo.DubboProtocol:  [DUBBO] disconected from /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>,url:dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-consumer&amp;check=false&amp;codec=dubbo&amp;dubbo=2.5.6&amp;generic=false&amp;heartbeat=60000&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;remote.timestamp=1508462946325&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Close dubbo connect: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">0</span>--&gt;<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">47</span>:<span class="number">047</span> CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Destroy reference: dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-consumer&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4324&amp;remote.timestamp=1508462946325&amp;side=consumer&amp;timestamp=1508463045694, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>provider和consumer的注册中心配置都是ZooKeeper，查看ZooKeeper的节点信息。<br>可以看出DemoService的providers目前有<code>dubbo://10.57.241.44:20880</code>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">12</span>] ls /dubbo/com.alibaba.dubbo.demo.DemoService</span><br><span class="line">[consumers, configurators, routers, providers]</span><br><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">13</span>] ls /dubbo/com.alibaba.dubbo.demo.DemoService/providers</span><br><span class="line">[dubbo%<span class="number">3</span>A%<span class="number">2F</span>%<span class="number">2F</span>10<span class="number">.57</span><span class="number">.241</span><span class="number">.44</span>%<span class="number">3</span>A20880%<span class="number">2F</span>com.alibaba.dubbo.demo.DemoService%<span class="number">3F</span>anyhost%<span class="number">3</span>Dtrue%<span class="number">26</span>application%<span class="number">3</span>Ddemo-provider%<span class="number">26</span>dubbo%<span class="number">3</span>D2<span class="number">.5</span><span class="number">.6</span>%<span class="number">26</span>generic%<span class="number">3</span>Dfalse%<span class="number">26</span>interface%<span class="number">3</span>Dcom.alibaba.dubbo.demo.DemoService%<span class="number">26</span>methods%<span class="number">3</span>DsayHello%<span class="number">26</span>pid%<span class="number">3</span>D4308%<span class="number">26</span>side%<span class="number">3</span>Dprovider%<span class="number">26</span>timestamp%<span class="number">3</span>D1508462946325]</span><br></pre></td></tr></table></figure>
<p>provider提供了服务：<code>dubbo:service</code>，consumer引用服务：<code>dubbo:reference</code>。<br>除此之外，provider在启动后，只要没有停止，就需要一直暴露dubbo协议：<code>dubbo:protocol</code>。</p>
<p>provider.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:application</span> <span class="attribute">name</span>=<span class="value">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:registry</span> <span class="attribute">address</span>=<span class="value">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:protocol</span> <span class="attribute">name</span>=<span class="value">"dubbo"</span> <span class="attribute">port</span>=<span class="value">"20880"</span>/&gt;</span> <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"demoService"</span> <span class="attribute">class</span>=<span class="value">"com.alibaba.dubbo.demo.provider.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">interface</span>=<span class="value">"com.alibaba.dubbo.demo.DemoService"</span> <span class="attribute">ref</span>=<span class="value">"demoService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>consumer.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:application</span> <span class="attribute">name</span>=<span class="value">"demo-consumer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:registry</span> <span class="attribute">address</span>=<span class="value">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">id</span>=<span class="value">"demoService"</span> <span class="attribute">check</span>=<span class="value">"false"</span> <span class="attribute">interface</span>=<span class="value">"com.alibaba.dubbo.demo.DemoService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了模拟provider的负载均衡，我们再启动一个provider，并且更改协议端口为20881。再次查看ZK：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">20</span>] ls /dubbo/com.alibaba.dubbo.demo.DemoService/providers</span><br><span class="line">[dubbo%<span class="number">3</span>A%<span class="number">2F</span>%<span class="number">2F</span>10<span class="number">.57</span><span class="number">.241</span><span class="number">.44</span>%<span class="number">3</span>A20881%<span class="number">2F</span>com.alibaba.dubbo.demo.DemoService%<span class="number">3F</span>anyhost%<span class="number">3</span>Dtrue%<span class="number">26</span>application%<span class="number">3</span>Ddemo-provider%<span class="number">26</span>dubbo%<span class="number">3</span>D2<span class="number">.5</span><span class="number">.6</span>%<span class="number">26</span>generic%<span class="number">3</span>Dfalse%<span class="number">26</span>interface%<span class="number">3</span>Dcom.alibaba.dubbo.demo.DemoService%<span class="number">26</span>methods%<span class="number">3</span>DsayHello%<span class="number">26</span>pid%<span class="number">3</span>D4427%<span class="number">26</span>side%<span class="number">3</span>Dprovider%<span class="number">26</span>timestamp%<span class="number">3</span>D1508464040452</span><br><span class="line">,dubbo%<span class="number">3</span>A%<span class="number">2F</span>%<span class="number">2F</span>10<span class="number">.57</span><span class="number">.241</span><span class="number">.44</span>%<span class="number">3</span>A20880%<span class="number">2F</span>com.alibaba.dubbo.demo.DemoService%<span class="number">3F</span>anyhost%<span class="number">3</span>Dtrue%<span class="number">26</span>application%<span class="number">3</span>Ddemo-provider%<span class="number">26</span>dubbo%<span class="number">3</span>D2<span class="number">.5</span><span class="number">.6</span>%<span class="number">26</span>generic%<span class="number">3</span>Dfalse%<span class="number">26</span>interface%<span class="number">3</span>Dcom.alibaba.dubbo.demo.DemoService%<span class="number">26</span>methods%<span class="number">3</span>DsayHello%<span class="number">26</span>pid%<span class="number">3</span>D4308%<span class="number">26</span>side%<span class="number">3</span>Dprovider%<span class="number">26</span>timestamp%<span class="number">3</span>D1508462946325]</span><br></pre></td></tr></table></figure>
<p>新启动的Provider的日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[20/10/17 09:47:21:021 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: dubbo://10.57.241.44:20881/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4427&amp;side=provider&amp;timestamp=1508464040452, dubbo version: 2.5.6, current host: 127.0.0.1</span><br><span class="line">[20/10/17 09:47:21:021 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: provider://10.57.241.44:20881/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;<span class="operator"><span class="keyword">check</span>=<span class="literal">false</span>&amp;dubbo=<span class="number">2.5</span><span class="number">.6</span>&amp;generic=<span class="literal">false</span>&amp;<span class="keyword">interface</span>=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=<span class="number">4427</span>&amp;side=provider&amp;<span class="keyword">timestamp</span>=<span class="number">1508464040452</span>, dubbo <span class="keyword">version</span>: <span class="number">2.5</span><span class="number">.6</span>, <span class="keyword">current</span> host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">47</span>:<span class="number">21</span>:<span class="number">021</span> CST] <span class="keyword">main</span>  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls <span class="keyword">for</span> subscribe <span class="keyword">url</span> provider://<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20881</span>/com.alibaba.dubbo.demo.DemoService?anyhost=<span class="literal">true</span>&amp;application=demo-provider&amp;<span class="keyword">category</span>=configurators&amp;<span class="keyword">check</span>=<span class="literal">false</span>&amp;dubbo=<span class="number">2.5</span><span class="number">.6</span>&amp;generic=<span class="literal">false</span>&amp;<span class="keyword">interface</span>=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=<span class="number">4427</span>&amp;side=provider&amp;<span class="keyword">timestamp</span>=<span class="number">1508464040452</span>, urls: [<span class="keyword">empty</span>://<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20881</span>/com.alibaba.dubbo.demo.DemoService?anyhost=<span class="literal">true</span>&amp;application=demo-provider&amp;<span class="keyword">category</span>=configurators&amp;<span class="keyword">check</span>=<span class="literal">false</span>&amp;dubbo=<span class="number">2.5</span><span class="number">.6</span>&amp;generic=<span class="literal">false</span>&amp;<span class="keyword">interface</span>=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=<span class="number">4427</span>&amp;side=provider&amp;<span class="keyword">timestamp</span>=<span class="number">1508464040452</span>], dubbo <span class="keyword">version</span>: <span class="number">2.5</span><span class="number">.6</span>, <span class="keyword">current</span> host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br></pre></td></tr></table></figure>
<p>启动Consumer，为了观察RPC调用期间，消费者的相关流程，我们在RPC调用完，sleep了1分钟</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">13</span>:<span class="number">013</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;side=consumer&amp;timestamp=1508464212849, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">13</span>:<span class="number">013</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;side=consumer&amp;timestamp=1508464212849, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">13</span>:<span class="number">013</span> CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls <span class="keyword">for</span> subscribe url consumer:<span class="comment">//10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;side=consumer&amp;timestamp=1508464212849, urls: [dubbo://10.57.241.44:20881/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4427&amp;side=provider&amp;timestamp=1508464040452, dubbo://10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, empty://10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;side=consumer&amp;timestamp=1508464212849, empty://10.57.241.44/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=routers&amp;check=false&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;side=consumer&amp;timestamp=1508464212849], dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">13</span>:<span class="number">013</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Successed connect to server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20881</span> from NettyClient <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> <span class="keyword">using</span> dubbo version <span class="number">2.5</span><span class="number">.6</span>, channel is NettyChannel [channel=[id: <span class="number">0x0f2ff811</span>, /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54772</span> =&gt; /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20881</span>]], dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">13</span>:<span class="number">013</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Start NettyClient zqhmac/<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> connect to the server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20881</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">14</span>:<span class="number">014</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Successed connect to server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span> from NettyClient <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> <span class="keyword">using</span> dubbo version <span class="number">2.5</span><span class="number">.6</span>, channel is NettyChannel [channel=[id: <span class="number">0x4efc180e</span>, /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54773</span> =&gt; /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>]], dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">14</span>:<span class="number">014</span> CST] main  INFO transport.AbstractClient:  [DUBBO] Start NettyClient zqhmac/<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span> connect to the server /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">14</span>:<span class="number">014</span> CST] main  INFO config.AbstractConfig:  [DUBBO] Refer dubbo service com.alibaba.dubbo.demo.DemoService from url zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&amp;application=demo-consumer&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4434&amp;remote.timestamp=1508464040452&amp;side=consumer&amp;timestamp=1508464212849, dubbo version: 2.5.6, current host: 10.57.241.44</span></span><br><span class="line">Hello world, response form provider: <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span></span><br></pre></td></tr></table></figure>
<p>在这一分钟内，查看ZK的consumers信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">26</span>] ls /dubbo/com.alibaba.dubbo.demo.DemoService/consumers</span><br><span class="line">[consumer%<span class="number">3</span>A%<span class="number">2F</span>%<span class="number">2F</span>10<span class="number">.57</span><span class="number">.241</span><span class="number">.44</span>%<span class="number">2F</span>com.alibaba.dubbo.demo.DemoService%<span class="number">3F</span>application%<span class="number">3</span>Ddemo-consumer%<span class="number">26</span>category%<span class="number">3</span>Dconsumers%<span class="number">26</span>check%<span class="number">3</span>Dfalse%<span class="number">26</span>dubbo%<span class="number">3</span>D2<span class="number">.5</span><span class="number">.6</span>%<span class="number">26</span>interface%<span class="number">3</span>Dcom.alibaba.dubbo.demo.DemoService%<span class="number">26</span>methods%<span class="number">3</span>DsayHello%<span class="number">26</span>pid%<span class="number">3</span>D4434%<span class="number">26</span>side%<span class="number">3</span>Dconsumer%<span class="number">26</span>timestamp%<span class="number">3</span>D1508464212849]</span><br></pre></td></tr></table></figure>
<p>再调用多次consumer，可以看到每次RPC调用会负载到不同的provider上：</p>
<p><img src="http://img.blog.csdn.net/20171020095939720" alt="dubboproviders"></p>
<p>关闭provider：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO config.AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO support.AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;pid=4308&amp;timestamp=1508462946295], dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper:<span class="comment">//127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.5.6&amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;pid=4308&amp;timestamp=1508462946295, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unregister url dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unsubscribe url provider:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators&amp;check=false&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] ZkClient-EventThread-<span class="number">14</span>-<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2181</span>  INFO zkclient.ZkEventThread: Terminate ZkClient event thread.</span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO zookeeper.ZooKeeper: Session: <span class="number">0x15f376495000000</span> closed</span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Close dubbo server: /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO transport.AbstractServer:  [DUBBO] Close NettyServer bind /<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">20880</span>, <span class="keyword">export</span> /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">20880</span>, dubbo version: <span class="number">2.5</span><span class="number">.6</span>, current host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] main-EventThread  INFO zookeeper.ClientCnxn: EventThread shut down <span class="keyword">for</span> session: <span class="number">0x15f376495000000</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Unexport service: dubbo:<span class="comment">//10.57.241.44:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line">[<span class="number">20</span>/<span class="number">10</span>/<span class="number">17</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58</span>:<span class="number">058</span> CST] DubboShutdownHook  INFO injvm.InjvmProtocol:  [DUBBO] Unexport service: injvm:<span class="comment">//127.0.0.1/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.6&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=4308&amp;side=provider&amp;timestamp=1508462946325, dubbo version: 2.5.6, current host: 127.0.0.1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">130</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Alibaba Dubbo&lt;br&gt;
    
    </summary>
    
      <category term="midd" scheme="http://github.com/zqhxuyuan/categories/midd/"/>
    
    
      <category term="dubbo" scheme="http://github.com/zqhxuyuan/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>深入解析中间件之-Canal</title>
    <link href="http://github.com/zqhxuyuan/2017/10/10/Midd-canal/"/>
    <id>http://github.com/zqhxuyuan/2017/10/10/Midd-canal/</id>
    <published>2017-10-09T16:00:00.000Z</published>
    <updated>2017-11-22T04:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/alibaba/canal">canal</a>: 阿里巴巴mysql数据库binlog的增量订阅&amp;消费组件<br><a id="more"></a></p>
<h2 id="MySQL_binlog">MySQL binlog</h2><h3 id="MySQL主从复制">MySQL主从复制</h3><p>mysql服务端修改配置并重启</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog-format=ROW</span><br><span class="line">server_id=1</span><br><span class="line"></span><br><span class="line">$ mysql -uroot</span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'canal'</span>;</span>  </span><br><span class="line"><span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'canal'</span>@<span class="string">'%'</span> ;</span></span><br><span class="line"><span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span></span><br><span class="line"></span><br><span class="line">$ sudo service mysqld <span class="operator"><span class="keyword">start</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题：创建canal用户的目的是什么？直接使用现有的用户名可以吗，比如root。<br>答案：有些用户没有REPLICATION SLAVE, REPLICATION CLIENT的权限，用这些用户连接canal时，无法获取到binlog。<br>这里的canal用户授权了全部权限，所以客户端可以从canal中获取binlog。</p>
</blockquote>
<p>明确两个概念：canal server连接mysql，客户端连接canal server。</p>
<ul>
<li>canal指的是canal server，它会读取mysql的binlog，解析后存储起来</li>
<li>客户端指的是消费canal server的binlog</li>
</ul>
<p>本机连接服务端，验证binlog的格式是ROW</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -h192.168.6.52 -ucanal -pcanal</span><br><span class="line"><span class="header">mysql&gt; show variables like '%binlog_format%';</span><br><span class="line">+---------------+-------+</span></span><br><span class="line"><span class="header">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span></span><br><span class="line"><span class="header">| binlog_format | ROW   |</span><br><span class="line">+---------------+-------+</span></span><br></pre></td></tr></table></figure>
<p>mysql主从复制的原理：</p>
<ul>
<li>master将改变记录到二进制日志(binary log)中；</li>
<li>slave将master的binary log events拷贝到它的中继日志(relay log)；</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160914112042547" alt="mysql replication"></p>
<h3 id="binlog">binlog</h3><p>在启动canal之前，先来了解下什么是mysql的binlog:</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show binlog events;</span><br><span class="line">| Log_name         | Pos   | Event_type  | Server_id | End_log_pos | Info|</span><br><span class="line">+<span class="comment">------------------+-------+-------------+-----------+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| mysql-bin.<span class="number">000001</span> |     <span class="number">4</span> | Format_desc |         <span class="number">1</span> |         <span class="number">106</span> | Server ver: <span class="number">5.1</span>.<span class="number">73</span>-log, Binlog ver: <span class="number">4</span|</span><br><span class="line">| mysql-bin.<span class="number">000001</span> |   <span class="number">106</span> | Query       |         <span class="number">1</span> |        <span class="number">1864</span> | <span class="keyword">use</span> `mysql`; CREATE TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> EXISTS db (   Host char(<span class="number">60</span>) binary <span class="keyword">DEFAULT</span> '' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Db char(<span class="number">64</span>) binary <span class="keyword">DEFAULT</span> '' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, User char(<span class="number">16</span>) binary <span class="keyword">DEFAULT</span> '' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Select_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Insert_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Update_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Delete_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Drop_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Grant_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, References_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Index_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Alter_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_tmp_table_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Lock_tables_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_view_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Show_view_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_routine_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Alter_routine_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Execute_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Event_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Trigger_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, PRIMARY KEY Host (Host,Db,User), KEY User (User) ) engine=MyISAM <span class="typename">CHARACTER</span> SET utf8 COLLATE utf8_bin comment=<span class="attribute">'Database</span> privileges' |</span><br><span class="line">| mysql-bin.<span class="number">000001</span> |  <span class="number">1864</span> | Query       |         <span class="number">1</span> |        <span class="number">3518</span> | <span class="keyword">use</span> `mysql`; CREATE TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> EXISTS host (  Host char(<span class="number">60</span>) binary <span class="keyword">DEFAULT</span> '' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Db char(<span class="number">64</span>) binary <span class="keyword">DEFAULT</span> '' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Select_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Insert_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Update_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Delete_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Drop_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Grant_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, References_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Index_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Alter_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_tmp_table_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Lock_tables_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_view_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Show_view_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Create_routine_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Alter_routine_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Execute_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, Trigger_priv enum(<span class="attribute">'N</span>',<span class="attribute">'Y</span>') COLLATE utf8_general_ci <span class="keyword">DEFAULT</span> <span class="attribute">'N</span>' <span class="keyword">NOT</span> <span class="keyword">NULL</span>, PRIMARY KEY Host (Host,Db) ) engine=MyISAM <span class="typename">CHARACTER</span> SET utf8 COLLATE utf8_bin comment=<span class="attribute">'Host</span> privileges;  Merged <span class="keyword">with</span> database privileges' |</span><br></pre></td></tr></table></figure>
<p>mysql数据文件下会生成mysql-bin.xxx的binlog文件，以及索引文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 canal]$ ll /var/lib/mysql/</span><br><span class="line">总用量 <span class="number">26228</span></span><br><span class="line">drwx------ <span class="number">2</span> mysql mysql     <span class="number">4096</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">14</span>:<span class="number">05</span> canal_test</span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql <span class="number">10485760</span> <span class="number">9</span>月  <span class="number">30</span> <span class="number">22</span>:<span class="number">12</span> ibdata1</span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql  <span class="number">5242880</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">09</span>:<span class="number">57</span> ib_logfile0</span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql  <span class="number">5242880</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">09</span>:<span class="number">57</span> ib_logfile1</span><br><span class="line">drwx------ <span class="number">2</span> mysql mysql     <span class="number">4096</span> <span class="number">8</span>月   <span class="number">2</span> <span class="number">11</span>:<span class="number">01</span> mysql</span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql    <span class="number">18451</span> <span class="number">8</span>月   <span class="number">2</span> <span class="number">11</span>:<span class="number">01</span> mysql-bin<span class="number">.000001</span></span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql   <span class="number">929226</span> <span class="number">8</span>月   <span class="number">2</span> <span class="number">11</span>:<span class="number">01</span> mysql-bin<span class="number">.000002</span></span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql  <span class="number">4890698</span> <span class="number">9</span>月  <span class="number">30</span> <span class="number">22</span>:<span class="number">12</span> mysql-bin<span class="number">.000003</span></span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql      <span class="number">897</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">14</span>:<span class="number">06</span> mysql-bin<span class="number">.000004</span></span><br><span class="line">-rw-rw---- <span class="number">1</span> mysql mysql       <span class="number">76</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">09</span>:<span class="number">57</span> mysql-bin.index</span><br><span class="line">srwxrwxrwx <span class="number">1</span> mysql mysql        <span class="number">0</span> <span class="number">10</span>月 <span class="number">11</span> <span class="number">09</span>:<span class="number">57</span> mysql.sock</span><br></pre></td></tr></table></figure>
<p>针对mysql的操作都会有二进制的事件记录到binlog文件中。下面的一些操作包括创建用户，授权，创建数据库，创建表，插入一条记录。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 canal]$ sudo strings /var/lib/mysql/mysql-bin.000004</span><br><span class="line">5.1.73-log</span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'canal'</span></span><br><span class="line">root    localhost</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'canal'</span>@<span class="string">'%'</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span></span><br><span class="line">canal_test</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> canal_test    ===》创建数据库</span><br><span class="line">canal_test</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (   uid <span class="built_in">int</span> (<span class="number">4</span>) primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>)  ==》创建表</span><br><span class="line">canal_test</span><br><span class="line"><span class="keyword">BEGIN</span>     ==》插入记录，这里有事务。但是没有把具体的语句打印出来</span><br><span class="line">canal_test</span><br><span class="line"><span class="keyword">test</span></span><br><span class="line">canal_test</span><br><span class="line"><span class="keyword">COMMIT</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Canal_QuickStart">Canal QuickStart</h2><h3 id="canal_&amp;_config">canal &amp; config</h3><p>部署canal server到6.52，并启动。查看canal的日志：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 canal]$ cat logs/canal/canal.<span class="built_in">log</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.076</span> [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - <span class="preprocessor">## start the canal server.</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.151</span> [main] INFO  com.alibaba.otter.canal.deployer.CanalController - <span class="preprocessor">## start the canal server[<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11111</span>]</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.644</span> [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - <span class="preprocessor">## the canal server is running now ......</span></span><br></pre></td></tr></table></figure>
<p>查看instance的日志：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 canal]$ cat logs/example/example<span class="class">.log</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.435</span> [main] INFO  c<span class="class">.a</span><span class="class">.o</span><span class="class">.c</span><span class="class">.i</span><span class="class">.spring</span><span class="class">.support</span><span class="class">.PropertyPlaceholderConfigurer</span> - Loading properties file from class path resource [canal.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.444</span> [main] INFO  c<span class="class">.a</span><span class="class">.o</span><span class="class">.c</span><span class="class">.i</span><span class="class">.spring</span><span class="class">.support</span><span class="class">.PropertyPlaceholderConfigurer</span> - Loading properties file from class path resource [example/instance.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.587</span> [main] INFO  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.instance</span><span class="class">.spring</span><span class="class">.CanalInstanceWithSpring</span> - start CannalInstance <span class="keyword">for</span> <span class="number">1</span>-example</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.599</span> [main] INFO  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.instance</span><span class="class">.core</span><span class="class">.AbstractCanalInstance</span> - start successful....</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">52.679</span> [destination = example , <span class="tag">address</span> = /<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span> , EventParser] WARN  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.parse</span><span class="class">.inbound</span><span class="class">.mysql</span><span class="class">.MysqlEventParser</span> - prepare to find start <span class="attribute">position</span> just show master status</span><br></pre></td></tr></table></figure>
<p>canal server的conf下有几个配置文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  canal<span class="class">.deployer-1</span>.<span class="number">0.24</span> tree conf</span><br><span class="line">conf</span><br><span class="line">├── canal<span class="class">.properties</span></span><br><span class="line">├── example</span><br><span class="line">│   └── instance<span class="class">.properties</span></span><br><span class="line">├── logback<span class="class">.xml</span></span><br><span class="line">└── spring</span><br><span class="line">    ├── default-instance<span class="class">.xml</span></span><br><span class="line">    ├── file-instance<span class="class">.xml</span></span><br><span class="line">    ├── group-instance<span class="class">.xml</span></span><br><span class="line">    ├── local-instance<span class="class">.xml</span></span><br><span class="line">    └── memory-instance.xml</span><br></pre></td></tr></table></figure>
<p>先来看<code>canal.properties</code>的<strong>common</strong>属性前四个配置项：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">canal.id= <span class="number">1</span></span><br><span class="line">canal.ip=</span><br><span class="line">canal.port= <span class="number">11111</span></span><br><span class="line">canal.zkServers=</span><br></pre></td></tr></table></figure>
<p>canal.id是canal的编号，在集群环境下，不同canal的id不同，注意它和mysql的server_id不同。<br>ip这里不指定，默认为本机，比如上面是192.168.6.52，端口号是11111。zk用于canal cluster。</p>
<p>再看下<code>canal.properties</code>下<strong>destinations</strong>相关的配置：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"><span class="comment">######</span><span class="comment">###       destinations        ###</span><span class="comment">######</span><span class="comment">#### </span><br><span class="line">###</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">####</span><br><span class="line">canal.destinations = example</span><br><span class="line">canal.conf.dir = ../conf</span><br><span class="line">canal.auto.scan = true</span><br><span class="line">canal.auto.scan.interval = 5</span><br><span class="line"></span><br><span class="line">canal.instance.global.mode = spring </span><br><span class="line">canal.instance.global.lazy = false</span><br><span class="line">canal.instance.global.spring.xml = classpath:spring/file-instance.xml</span></span><br></pre></td></tr></table></figure>
<p>这里的canal.destinations = example可以设置多个，比如example1,example2，<br>则需要创建对应的两个文件夹，并且每个文件夹下都有一个instance.properties文件。</p>
<p>全局的canal实例管理用spring，这里的<code>file-instance.xml</code>最终会实例化所有的destinations instances:</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=<span class="string">"com.alibaba.otter.canal.instance.spring.support.PropertyPlaceholderConfigurer"</span> lazy-init=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"ignoreResourceNotFound"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"systemPropertiesModeName"</span> value=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span>/&gt;&lt;!-- 允许system覆盖 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"locationNames"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;classpath:canal.properties&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;classpath:$&#123;canal.instance.destination:&#125;/instance.properties&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"instance"</span> class=<span class="string">"com.alibaba.otter.canal.instance.spring.CanalInstanceWithSpring"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"destination"</span> value=<span class="string">"$&#123;canal.instance.destination&#125;"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"eventParser"</span>&gt;&lt;<span class="keyword">ref</span> local=<span class="string">"eventParser"</span> /&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"eventSink"</span>&gt;&lt;<span class="keyword">ref</span> local=<span class="string">"eventSink"</span> /&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"eventStore"</span>&gt;&lt;<span class="keyword">ref</span> local=<span class="string">"eventStore"</span> /&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"metaManager"</span>&gt;&lt;<span class="keyword">ref</span> local=<span class="string">"metaManager"</span> /&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"alarmHandler"</span>&gt;&lt;<span class="keyword">ref</span> local=<span class="string">"alarmHandler"</span> /&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>比如<code>canal.instance.destination</code>等于example，就会加载<code>example/instance.properties</code>配置文件</p>
<p>example下instance.properties配置文件不需要修改。一个canal server可以运行多个canal instance。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"><span class="comment">## mysql serverId，这里的slaveId不能和myql集群中已有的server_id一样</span></span><br><span class="line">canal.instance.mysql.slaveId = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># position info 这里连接的是mysql master的地址。</span></span><br><span class="line">canal.instance.master.address = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span></span><br><span class="line">canal.instance.master.journal.name = </span><br><span class="line">canal.instance.master.position = </span><br><span class="line">canal.instance.master.timestamp = </span><br><span class="line"></span><br><span class="line"><span class="comment">#canal.instance.standby.address = </span></span><br><span class="line"><span class="comment">#canal.instance.standby.journal.name =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.position = </span></span><br><span class="line"><span class="comment">#canal.instance.standby.timestamp = </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># username/password</span></span><br><span class="line">canal.instance.dbUsername = canal</span><br><span class="line">canal.instance.dbPassword = canal</span><br><span class="line">canal.instance.defaultDatabaseName =</span><br><span class="line">canal.instance.connectionCharset = UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">canal.instance.filter.regex = .*\\..*</span><br><span class="line">canal.instance.filter.black.regex =  </span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="simple_client">simple client</h3><p>在mysql上创建数据库，创建表，插入一条记录，再修改记录。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> canal_test;</span></span><br><span class="line"><span class="operator"><span class="keyword">use</span> canal_test;</span></span><br><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (   uid <span class="built_in">int</span> (<span class="number">4</span>) primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span></span><br><span class="line"><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> (<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'10'</span>);</span></span><br></pre></td></tr></table></figure>
<p>修改<a href="https://github.com/alibaba/canal/blob/master/example/src/main/java/com/alibaba/otter/canal/example/SimpleCanalClientTest.java">客户端测试例子</a>的连接信息。其中example对应了canal实例的名称。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SimpleCanalClientTest</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalClientTest</span> &#123;</span></span><br><span class="line">    public static void main(<span class="type">String</span> args[]) &#123;</span><br><span class="line">        <span class="type">String</span> destination = <span class="string">"example"</span>;</span><br><span class="line">        <span class="type">CanalConnector</span> connector = <span class="type">CanalConnectors</span>.newSingleConnector(</span><br><span class="line">            <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(<span class="string">"192.168.6.52"</span>, <span class="number">11111</span>), destination, <span class="string">"canal"</span>, <span class="string">"canal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果连接有错误，客户端测试例子会立即结束，打印## stop the canal client。正常的话，终端不会退出，会一直运行。</p>
</blockquote>
<p>SimpleCanalClientTest控制台的结果如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [1] ,count : [2] , memsize : [263] , Time : 2017-10-11 14:06:06</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:396:1507701897000(2017-10-11 14:04:57)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:491:1507701904000(2017-10-11 14:05:04)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:396] , name[canal_test,] , eventType : QUERY , executeTime : 1507701897000 , delay : 69710ms</span><br><span class="line"> sql ----&gt; create database canal_test</span><br><span class="line"></span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:491] , name[canal_test,test] , eventType : CREATE , executeTime : 1507701904000 , delay : 62723ms</span><br><span class="line"> sql ----&gt; create table test (   uid int (4) primary key not null auto_increment,   name varchar(10) not null)</span><br></pre></td></tr></table></figure>
<p>插入一条记录：（其中uid和name的update都等于true）</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [2] ,count : [3] , memsize : [186] , Time : 2017-10-11 14:06:32</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:659:1507701989000(2017-10-11 14:06:29)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:822:1507701989000(2017-10-11 14:06:29)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:659] , executeTime : 1507701989000 , delay : 3142ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 11</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:785] , name[canal_test,test] , eventType : INSERT , executeTime : 1507701989000 , delay : 3154ms</span><br><span class="line">uid : 1    type=int(4)    update=true</span><br><span class="line">name : 10    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:822] , executeTime : 1507701989000 , delay : 3179ms</span><br></pre></td></tr></table></figure>
<p>修改记录：（其中name的update等于true）</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [3] ,count : [3] , memsize : [202] , Time : 2017-10-11 14:49:11</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:897:1507704547000(2017-10-11 14:49:07)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:1076:1507704547000(2017-10-11 14:49:07)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:897] , executeTime : 1507704547000 , delay : 4048ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 13</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:1023] , name[canal_test,test] , eventType : UPDATE , executeTime : 1507704547000 , delay : 4059ms</span><br><span class="line">uid : 1    type=int(4)</span><br><span class="line">name : zqhxuyuan    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:1076] , executeTime : 1507704547000 , delay : 4096ms</span><br></pre></td></tr></table></figure>
<p>canal安装包下的example instance下除了example.log外，还有一个<code>meta.log</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 canal]$ cat logs/example/meta.<span class="built_in">log</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">03.728</span> - clientId:<span class="number">1001</span> cursor:[mysql-bin<span class="number">.000004</span>,<span class="number">396</span>,<span class="number">1507701897000</span>] address[/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">04.589</span> - clientId:<span class="number">1001</span> cursor:[mysql-bin<span class="number">.000004</span>,<span class="number">491</span>,<span class="number">1507701904000</span>] address[localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">29.589</span> - clientId:<span class="number">1001</span> cursor:[mysql-bin<span class="number">.000004</span>,<span class="number">822</span>,<span class="number">1507701989000</span>] address[localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">08.589</span> - clientId:<span class="number">1001</span> cursor:[mysql-bin<span class="number">.000004</span>,<span class="number">1076</span>,<span class="number">1507704547000</span>] address[localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Cannal_Internal_Overview">Cannal Internal Overview</h2><h3 id="canal_client_&amp;_server">canal client &amp; server</h3><p><a href="https://github.com/alibaba/canal/blob/master/example/src/main/java/com/alibaba/otter/canal/example/AbstractCanalClientTest.java">canal client</a>与canal server之间是C/S模式的通信，客户端采用NIO，服务端采用Netty。<br>canal server启动后，如果没有canal client，那么canal server不会去mysql拉取binlog。<br>即Canal客户端主动发起拉取请求，服务端才会模拟一个MySQL Slave节点去主节点拉取binlog。<br>通常Canal客户端是一个死循环，这样客户端一直调用get方法，服务端也就会一直拉取binlog。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AbstractCanalClientTest &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> process() &#123;</span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">5</span> * <span class="number">1024</span>; <span class="comment">// 一次请求拉取多条记录</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect(); <span class="comment">// 先连接服务端</span></span><br><span class="line">            connector.subscribe(); <span class="comment">// 订阅</span></span><br><span class="line">            <span class="comment">// keep send request to canal server, thus canal server can fetch binlog from mysql</span></span><br><span class="line">            <span class="keyword">while</span> (running) &#123; </span><br><span class="line">                Message message = connector.getWithoutAck(batchSize); <span class="comment">// 获取指定数量的数据</span></span><br><span class="line">                <span class="keyword">long</span> batchId = message.getId();</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">size</span> = message.getEntries().<span class="keyword">size</span>();</span><br><span class="line">                printSummary(message, batchId, <span class="keyword">size</span>);</span><br><span class="line">                printEntry(message.getEntries());</span><br><span class="line">                connector.ack(batchId); <span class="comment">// 提交确认</span></span><br><span class="line">                <span class="comment">//connector.rollback(batchId); // 处理失败, 回滚数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>canal client与canal server之间属于增量订阅/消费，流程图如下：（其中C端是canal client，S端是canal server）</p>
<p><img src="https://camo.githubusercontent.com/db1debcfa50f4ebea1f56a1fa0e18a4e960cafcc/687474703a2f2f646c2e69746579652e636f6d2f75706c6f61642f6174746163686d656e742f303038302f333239372f39643765643133652d366138362d333836642d393266342d3835323233386334373562662e6a7067" alt="canal protocol"></p>
<p>canal client调用<a href="https://github.com/alibaba/canal/blob/master/client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java#L129"><code>connect()</code></a>方法时，发送的数据包（PacketType）类型为：</p>
<ol>
<li><a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/handler/HandshakeInitializationHandler.java"><strong>HANDSHAKE</strong></a>，</li>
<li><a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/handler/ClientAuthenticationHandler.java"><strong>CLIENTAUTHENTICATION</strong></a>。</li>
</ol>
<p>canal client调用<code>subscribe()</code>方法，类型为[<strong>SUBSCRIPTION</strong>]。</p>
<p>对应服务端采用netty处理RPC请求（<a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/CanalServerWithNetty.java"><code>CanalServerWithNetty</code></a>）:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CanalServerWithNetty</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalLifeCycle</span> <span class="title">implements</span> <span class="title">CanalServer</span> &#123;</span></span><br><span class="line">    public void start() &#123;</span><br><span class="line">        bootstrap.setPipelineFactory(<span class="keyword">new</span> <span class="type">ChannelPipelineFactory</span>() &#123;</span><br><span class="line">            public <span class="type">ChannelPipeline</span> getPipeline() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">                <span class="type">ChannelPipeline</span> pipelines = <span class="type">Channels</span>.pipeline();</span><br><span class="line">                pipelines.addLast(<span class="type">FixedHeaderFrameDecoder</span>.<span class="keyword">class</span>.getName(), <span class="keyword">new</span> <span class="type">FixedHeaderFrameDecoder</span>());</span><br><span class="line">                <span class="comment">// 处理客户端的HANDSHAKE请求</span></span><br><span class="line">                pipelines.addLast(<span class="type">HandshakeInitializationHandler</span>.<span class="keyword">class</span>.getName(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">HandshakeInitializationHandler</span>(childGroups));</span><br><span class="line">                <span class="comment">// 处理客户端的CLIENTAUTHENTICATION请求</span></span><br><span class="line">                pipelines.addLast(<span class="type">ClientAuthenticationHandler</span>.<span class="keyword">class</span>.getName(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">ClientAuthenticationHandler</span>(embeddedServer));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 处理客户端的会话请求，包括SUBSCRIPTION，GET等</span></span><br><span class="line">                <span class="type">SessionHandler</span> sessionHandler = <span class="keyword">new</span> <span class="type">SessionHandler</span>(embeddedServer);</span><br><span class="line">                pipelines.addLast(<span class="type">SessionHandler</span>.<span class="keyword">class</span>.getName(), sessionHandler);</span><br><span class="line">                <span class="keyword">return</span> pipelines;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ClientAuthenticationHandler处理鉴权后，会移除HandshakeInitializationHandler和<a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/handler/ClientAuthenticationHandler.java#L81">ClientAuthenticationHandler</a>。<br>最重要的是会话处理器<a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/handler/SessionHandler.java"><strong>SessionHandler</strong></a>。</p>
<p>以client发送GET，server从mysql得到binlog后，返回<strong>MESSAGES</strong>给client为例，说明client和server的rpc交互过程：</p>
<p>SimpleCanalConnector发送<a href="https://github.com/alibaba/canal/blob/master/client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java#L272"><strong>GET</strong></a>请求，并读取响应结果的流程：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public <span class="type">Message</span> getWithoutAck(<span class="type">int</span> batchSize, <span class="type">Long</span> timeout, <span class="type">TimeUnit</span> unit) throws <span class="type">CanalClientException</span> &#123;</span><br><span class="line">    waitClientRunning();</span><br><span class="line">    <span class="type">int</span> size = (batchSize &lt;= <span class="number">0</span>) ? <span class="number">1000</span> : batchSize;</span><br><span class="line">    long time = (timeout == null || timeout &lt; <span class="number">0</span>) ? -<span class="number">1</span> : timeout; // -<span class="number">1</span>代表不做timeout控制</span><br><span class="line">    <span class="keyword">if</span> (unit == null) unit = <span class="type">TimeUnit</span>.<span class="type">MILLISECONDS</span>;</span><br><span class="line"></span><br><span class="line">    // client发送<span class="type">GET</span>请求</span><br><span class="line">    writeWithHeader(<span class="type">Packet</span>.newBuilder()</span><br><span class="line">        .setType(<span class="type">PacketType</span>.<span class="type">GET</span>)</span><br><span class="line">        .setBody(<span class="type">Get</span>.newBuilder()</span><br><span class="line">            .setAutoAck(<span class="literal">false</span>)</span><br><span class="line">            .setDestination(clientIdentity.getDestination())</span><br><span class="line">            .setClientId(<span class="type">String</span>.valueOf(clientIdentity.getClientId()))</span><br><span class="line">            .setFetchSize(size)</span><br><span class="line">            .setTimeout(time)</span><br><span class="line">            .setUnit(unit.ordinal())</span><br><span class="line">            .build()</span><br><span class="line">            .toByteString())</span><br><span class="line">        .build()</span><br><span class="line">        .toByteArray());</span><br><span class="line">    // client获取<span class="type">GET</span>结果    </span><br><span class="line">    <span class="keyword">return</span> receiveMessages();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="type">Message</span> receiveMessages() throws <span class="type">IOException</span> &#123;</span><br><span class="line">    // 读取server发送的数据包</span><br><span class="line">    <span class="type">Packet</span> p = <span class="type">Packet</span>.parseFrom(readNextPacket());</span><br><span class="line">    switch (p.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">MESSAGES</span>: &#123;</span><br><span class="line">            <span class="type">Messages</span> messages = <span class="type">Messages</span>.parseFrom(p.getBody());</span><br><span class="line">            <span class="type">Message</span> <span class="literal">result</span> = new <span class="type">Message</span>(messages.getBatchId());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">ByteString</span> byteString : messages.getMessagesList()) &#123;</span><br><span class="line">                <span class="literal">result</span>.addEntry(<span class="type">Entry</span>.parseFrom(byteString));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端SessionHandler处理客户端发送的<a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/netty/handler/SessionHandler.java#L105"><strong>GET</strong></a>请求流程：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> GET:</span><br><span class="line">    <span class="comment">// 读取客户端发送的数据包，封装为Get对象</span></span><br><span class="line">    Get <span class="keyword">get</span> = CanalPacket.Get.parseFrom(packet.getBody());</span><br><span class="line">    <span class="comment">// destination表示canal instance</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotEmpty(<span class="keyword">get</span>.getDestination()) &amp;&amp; StringUtils.isNotEmpty(<span class="keyword">get</span>.getClientId())) &#123;</span><br><span class="line">        clientIdentity = <span class="keyword">new</span> ClientIdentity(<span class="keyword">get</span>.getDestination(), Short.valueOf(<span class="keyword">get</span>.getClientId()));</span><br><span class="line">        Message message = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">get</span>.getTimeout() == -<span class="number">1</span>) &#123;<span class="comment">// 是否是初始值</span></span><br><span class="line">            message = embeddedServer.getWithoutAck(clientIdentity, <span class="keyword">get</span>.getFetchSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TimeUnit unit = convertTimeUnit(<span class="keyword">get</span>.getUnit());</span><br><span class="line">            message = embeddedServer.getWithoutAck(clientIdentity, <span class="keyword">get</span>.getFetchSize(), <span class="keyword">get</span>.getTimeout(), unit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置返回给客户端的数据包类型为MESSAGES   </span></span><br><span class="line">        Packet.Builder packetBuilder = CanalPacket.Packet.newBuilder();</span><br><span class="line">        packetBuilder.setType(PacketType.MESSAGES);</span><br><span class="line">        <span class="comment">// 构造Message</span></span><br><span class="line">        Messages.Builder messageBuilder = CanalPacket.Messages.newBuilder();</span><br><span class="line">        messageBuilder.setBatchId(message.getId());</span><br><span class="line">        <span class="keyword">if</span> (message.getId() != -<span class="number">1</span> &amp;&amp; !CollectionUtils.isEmpty(message.getEntries())) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry entry : message.getEntries()) &#123;</span><br><span class="line">                messageBuilder.addMessages(entry.toByteString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        packetBuilder.setBody(messageBuilder.build().toByteString());</span><br><span class="line">        <span class="comment">// 输出数据，返回给客户端</span></span><br><span class="line">        NettyUtils.write(ctx.getChannel(), packetBuilder.build().toByteArray(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>get/ack/rollback协议介绍：</p>
<ul>
<li><code>Message getWithoutAck(int batchSize)</code>，允许指定batchSize，一次可以获取多条，每次返回的对象为Message，包含的内容为：<br>– batch id 唯一标识<br>– entries 具体的数据对象，对应的数据对象格式：<a href="https://github.com/alibaba/canal/blob/master/protocol/src/main/java/com/alibaba/otter/canal/protocol/EntryProtocol.proto">EntryProtocol.proto</a></li>
<li><a href="https://github.com/alibaba/canal/blob/master/client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java#L325"><code>void rollback(long batchId)</code></a>，回滚上次的get请求，重新获取数据。基于get获取的batchId进行提交，避免误操作</li>
<li><a href="https://github.com/alibaba/canal/blob/master/client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java#L343"><code>void ack(long batchId)</code></a>，确认已经消费成功，通知server删除数据。基于get获取的batchId进行提交，避免误操作</li>
</ul>
<p>EntryProtocol.protod对应的canal消息结构如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Entry  </span><br><span class="line">    Header  </span><br><span class="line">        logfileName [binlog文件名]  </span><br><span class="line">        logfileOffset [binlog position]  </span><br><span class="line">        executeTime [binlog里记录变更发生的时间戳,精确到秒]  </span><br><span class="line">        schemaName   </span><br><span class="line">        tableName  </span><br><span class="line">        eventType [<span class="operator"><span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span>类型]  </span><br><span class="line">    entryType   [事务头<span class="keyword">BEGIN</span>/事务尾<span class="keyword">END</span>/数据ROWDATA]  </span><br><span class="line">    storeValue  [<span class="keyword">byte</span>数据,可展开，对应的类型为RowChange]  </span><br><span class="line">      </span><br><span class="line">RowChange  </span><br><span class="line">    isDdl       [是否是<span class="keyword">ddl</span>变更操作，比如<span class="keyword">create</span> <span class="keyword">table</span>/<span class="keyword">drop</span> <span class="keyword">table</span>]  </span><br><span class="line">    <span class="keyword">sql</span>         [具体的<span class="keyword">ddl</span> <span class="keyword">sql</span>]  </span><br><span class="line">    rowDatas    [具体<span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span>的变更数据，可为多条，<span class="number">1</span>个<span class="keyword">binlog</span> <span class="keyword">event</span>事件可对应多条变更，比如批处理]  </span><br><span class="line">        beforeColumns [<span class="keyword">Column</span>类型的数组，变更前的数据字段]  </span><br><span class="line">        afterColumns [<span class="keyword">Column</span>类型的数组，变更后的数据字段]  </span><br><span class="line">          </span><br><span class="line"><span class="keyword">Column</span>   </span><br><span class="line">    <span class="keyword">index</span>         </span><br><span class="line">    sqlType     [jdbc <span class="keyword">type</span>]  </span><br><span class="line">    <span class="keyword">name</span>        [<span class="keyword">column</span> <span class="keyword">name</span>]  </span><br><span class="line">    isKey       [是否为主键]  </span><br><span class="line">    <span class="keyword">updated</span>     [是否发生过变更]  </span><br><span class="line">    <span class="keyword">isNull</span>      [值是否为<span class="literal">null</span>]  </span><br><span class="line">    <span class="keyword">value</span>       [具体的内容，注意为<span class="keyword">string</span>文本]</span></span><br></pre></td></tr></table></figure>
<p>SessionHandler中服务端处理客户端的其他类型请求，都会调用<a href="https://github.com/alibaba/canal/blob/master/server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java">CanalServerWithEmbedded</a>的相关方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SUBSCRIPTION:</span><br><span class="line">        Sub sub = Sub.parseFrom(packet.getBody());</span><br><span class="line">        embeddedServer.subscribe(clientIdentity);</span><br><span class="line"><span class="keyword">case</span> GET:</span><br><span class="line">        Get get = CanalPacket.Get.parseFrom(packet.getBody());</span><br><span class="line">        message = embeddedServer.getWithoutAck(clientIdentity, get.getFetchSize());</span><br><span class="line"><span class="keyword">case</span> CLIENTACK:</span><br><span class="line">        ClientAck ack = CanalPacket.ClientAck.parseFrom(packet.getBody());</span><br><span class="line">        embeddedServer.ack(clientIdentity, ack.getBatchId());</span><br><span class="line"><span class="keyword">case</span> CLIENTROLLBACK:</span><br><span class="line">        ClientRollback rollback = CanalPacket.ClientRollback.parseFrom(packet.getBody());</span><br><span class="line">        embeddedServer.rollback(clientIdentity);<span class="comment">// 回滚所有批次</span></span><br></pre></td></tr></table></figure>
<p>所以真正的处理逻辑在CanalServerWithEmbedded中，下面重点来了。。。</p>
<h3 id="CanalServerWithEmbedded">CanalServerWithEmbedded</h3><p>CanalServer包含多个Instance，它的成员变量<code>canalInstances</code>记录了instance名称与<a href="https://github.com/alibaba/canal/blob/master/instance/core/src/main/java/com/alibaba/otter/canal/instance/core/AbstractCanalInstance.java">实例</a>的映射关系。<br>因为是一个Map，所以同一个Server不允许出现相同instance名称（本例中实例名称为example），<br>比如不能同时有两个example在一个server上。但是允许一个Server上有example1和example2。</p>
<blockquote>
<p>注意：<code>CanalServer</code>中最重要的是<code>CanalServerWithEmbedded</code>，而CanalServerWithEmbedded中最重要的是<code>CanalInstance</code>。</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CanalServerWithEmbedded</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalLifeCycle</span> <span class="title">implements</span> <span class="title">CanalServer</span>, <span class="title">CanalService</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">CanalInstance</span>&gt; canalInstances;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CanalInstanceGenerator</span>     canalInstanceGenerator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图表示一个server配置了两个Canal实例（instance），每个Client连接一个Instance。<br>每个Canal实例模拟为一个MySQL的slave，所以每个Instance的slaveId必须不一样。<br>比如图中两个Instance的id分别是1234和1235，它们都会拉取MySQL主节点的binlog。</p>
<p><img src="http://img.blog.csdn.net/20171011202259253" alt="instances"></p>
<p>这里每个Canal Client都对应一个Instance，每个Client在启动时，<br>都会指定一个Destination，这个Destination就表示Instance的名称。<br>所以CanalServerWithEmbedded处理各种请求时的参数都有ClientIdentity，<br>从ClientIdentity中获取destination，就可以获取出对应的CanalInstance。</p>
<p>理解下各个组件的对应关系：</p>
<ul>
<li>Canal Client通过destination找出Canal Server中对应的Canal Instance。</li>
<li>一个Canal Server可以配置多个Canal Instances。</li>
</ul>
<p>下面以CanalServerWithEmbedded的订阅方法为例：</p>
<ol>
<li>根据客户端标识获取CanalInstance</li>
<li>向CanalInstance的元数据管理器订阅当前客户端</li>
<li>从元数据管理中获取客户端的游标</li>
<li>通知CanalInstance订阅关系发生变化</li>
</ol>
<blockquote>
<p>注意：提供订阅方法的作用是：MySQL新增了一张表，客户端原先没有同步这张表，现在需要同步，所以需要重新订阅。</p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ClientIdentity clientIdentity)</span> <span class="keyword">throws</span> CanalServerException </span>&#123;</span><br><span class="line">    <span class="comment">// ClientIdentity表示Canal Client客户端，从中可以获取出客户端指定连接的Destination</span></span><br><span class="line">    <span class="comment">// 由于CanalServerWithEmbedded记录了每个Destination对应的Instance，可以获取客户端对应的Instance</span></span><br><span class="line">    CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());</span><br><span class="line">    <span class="keyword">if</span> (!canalInstance.getMetaManager().isStart()) &#123;</span><br><span class="line">        canalInstance.getMetaManager().start(); <span class="comment">// 启动Instance的元数据管理器</span></span><br><span class="line">    &#125;</span><br><span class="line">    canalInstance.getMetaManager().subscribe(clientIdentity); <span class="comment">// 执行一下meta订阅</span></span><br><span class="line">    Position position = canalInstance.getMetaManager().getCursor(clientIdentity);</span><br><span class="line">    <span class="keyword">if</span> (position == <span class="keyword">null</span>) &#123;</span><br><span class="line">        position = canalInstance.getEventStore().getFirstPosition();<span class="comment">// 获取一下store中的第一条</span></span><br><span class="line">        <span class="keyword">if</span> (position != <span class="keyword">null</span>) &#123;</span><br><span class="line">            canalInstance.getMetaManager().updateCursor(clientIdentity, position); <span class="comment">// 更新一下cursor</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知下订阅关系变化</span></span><br><span class="line">    canalInstance.subscribeChange(clientIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个CanalInstance中包括了四个组件：<strong>EventParser、EventSink、EventStore、MetaManager</strong>。</p>
<p>服务端主要的处理方法包括get/ack/rollback，这三个方法都会用到Instance上面的几个内部组件，主要还是EventStore和MetaManager：</p>
<p>在这之前，要先理解EventStore的含义，EventStore是一个RingBuffer，有三个指针：<strong>Put、Get、Ack</strong>。</p>
<ul>
<li>Put: Canal Server从MySQL拉取到数据后，放到内存中，Put增加</li>
<li>Get: 消费者（Canal Client）从内存中消费数据，Get增加</li>
<li>Ack: 消费者消费完成，Ack增加。并且会删除Put中已经被Ack的数据</li>
</ul>
<p>这三个操作与Instance组件的关系如下：</p>
<p><img src="http://img.blog.csdn.net/20171011211529169" alt="ops"></p>
<p>客户端通过canal server获取mysql binlog有几种方式（get方法和getWithoutAck）：</p>
<ul>
<li>如果timeout为null，则采用tryGet方式，即时获取  </li>
<li>如果timeout不为null  <ol>
<li>timeout为0，则采用get阻塞方式，获取数据，不设置超时，直到有足够的batchSize数据才返回  </li>
<li>timeout不为0，则采用get+timeout方式，获取数据，超时还没有batchSize足够的数据，有多少返回多少  </li>
</ol>
</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Events&lt;Event&gt; getEvents(CanalEventStore eventStore, Position <span class="built_in">start</span>, int batchSize, Long timeout,</span><br><span class="line">                                TimeUnit unit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="constant">null</span>) &#123;</span><br><span class="line">        <span class="constant">return</span> eventStore.tryGet(<span class="built_in">start</span>, batchSize);<span class="comment"> // 即时获取</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="constant">return</span> eventStore.<span class="built_in">get</span>(<span class="built_in">start</span>, batchSize);<span class="comment"> // 阻塞获取</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="constant">return</span> eventStore.<span class="built_in">get</span>(<span class="built_in">start</span>, batchSize, timeout, unit);<span class="comment"> // 异步获取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：EventStore的实现采用了类似Disruptor的RingBuffer环形缓冲区。RingBuffer的实现类是MemoryEventStoreWithBuffer</p>
</blockquote>
<p>get方法和getWithoutAck方法的区别是：</p>
<ul>
<li>get方法会立即调用ack</li>
<li>getWithoutAck方法不会调用ack</li>
</ul>
<h3 id="EventStore">EventStore</h3><p>以10条数据为例，初始时current=-1，第一个元素起始next=0，end=9，循环<code>[0,9]</code>所有元素。<br>List元素为(A,B,C,D,E,F,G,H,I,J)</p>
<table>
<thead>
<tr>
<th>next</th>
<th>entries[next]</th>
<th>next-current-1</th>
<th>list element</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>entries[0]</td>
<td>0-(-1)-1=0</td>
<td>A</td>
</tr>
<tr>
<td>1</td>
<td>entries[1]</td>
<td>1-(-1)-1=1</td>
<td>B</td>
</tr>
<tr>
<td>2</td>
<td>entries[2]</td>
<td>2-(-1)-1=2</td>
<td>C</td>
</tr>
<tr>
<td>3</td>
<td>entries[3]</td>
<td>3-(-1)-1=3</td>
<td>D</td>
</tr>
<tr>
<td>.</td>
<td>……….</td>
<td>……….</td>
<td>.</td>
</tr>
<tr>
<td>9</td>
<td>entries[9]</td>
<td>9-(-1)-1=9</td>
<td>J</td>
</tr>
</tbody>
</table>
<p>第一批10个元素put完成后，putSequence设置为end=9。假设第二批又Put了5个元素:(K,L,M,N,O)</p>
<p>current=9，起始next=9+1=10，end=9+5=14，在Put完成后，putSequence设置为end=14。</p>
<table>
<thead>
<tr>
<th>next</th>
<th>entries[next]</th>
<th>next-current-1</th>
<th>list element</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>entries[10]</td>
<td>10-(9)-1=0</td>
<td>K</td>
</tr>
<tr>
<td>11</td>
<td>entries[11]</td>
<td>11-(9)-1=1</td>
<td>L</td>
</tr>
<tr>
<td>12</td>
<td>entries[12]</td>
<td>12-(9)-1=2</td>
<td>M</td>
</tr>
<tr>
<td>13</td>
<td>entries[13]</td>
<td>13-(9)-1=3</td>
<td>N</td>
</tr>
<tr>
<td>14</td>
<td>entries[14]</td>
<td>14-(9)-1=3</td>
<td>O</td>
</tr>
</tbody>
</table>
<p>这里假设环形缓冲区的最大大小为15个（源码中是16MB），那么上面两批一共产生了15个元素，刚好填满了环形缓冲区。<br>如果又有Put事件进来，由于环形缓冲区已经满了，没有可用的slot，则Put操作会被阻塞，直到被消费掉。</p>
<p>下面是Put填充环形缓冲区的代码，检查可用slot（checkFreeSlotAt方法）在几个put方法中。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MemoryEventStoreWithBuffer <span class="keyword">extends</span> AbstractCanalStoreScavenge <span class="keyword">implements</span> CanalEventStore&lt;Event&gt;, CanalStoreScavenge &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> INIT_SQEUENCE = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               bufferSize    = <span class="number">16</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               bufferMemUnit = <span class="number">1024</span>;                         <span class="comment">// memsize的单位，默认为1kb大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               indexMask;</span><br><span class="line">    <span class="keyword">private</span> Event[]           entries;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录下put/get/ack操作的三个下标</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong        putSequence   = <span class="keyword">new</span> AtomicLong(INIT_SQEUENCE); <span class="comment">// 代表当前put操作最后一次写操作发生的位置</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong        getSequence   = <span class="keyword">new</span> AtomicLong(INIT_SQEUENCE); <span class="comment">// 代表当前get操作读取的最后一条的位置</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong        ackSequence   = <span class="keyword">new</span> AtomicLong(INIT_SQEUENCE); <span class="comment">// 代表当前ack操作的最后一条的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动EventStore时，创建指定大小的缓冲区，Event数组的大小是16*1024</span></span><br><span class="line">    <span class="comment">// 也就是说算个数的话，数组可以容纳16000个事件。算内存的话，大小为16MB</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> start() <span class="keyword">throws</span> CanalStoreException &#123;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">        indexMask = bufferSize - <span class="number">1</span>;</span><br><span class="line">        entries = <span class="keyword">new</span> Event[bufferSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EventParser解析后，会放入内存中（Event数组，缓冲区）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> doPut(List&lt;Event&gt; data) &#123;</span><br><span class="line">        <span class="keyword">long</span> current = putSequence.get(); <span class="comment">// 取得当前的位置，初始时为-1，第一个元素为-1+1=0</span></span><br><span class="line">        <span class="keyword">long</span> end = current + data.<span class="keyword">size</span>(); <span class="comment">// 最末尾的位置，假设Put了10条数据，end=-1+10=9</span></span><br><span class="line">        <span class="comment">// 先写数据，再更新对应的cursor,并发度高的情况，putSequence会被get请求可见，拿出了ringbuffer中的老的Entry值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">next</span> = current + <span class="number">1</span>; <span class="keyword">next</span> &lt;= end; <span class="keyword">next</span>++) &#123;</span><br><span class="line">            entries[getIndex(<span class="keyword">next</span>)] = data.get((<span class="keyword">int</span>) (<span class="keyword">next</span> - current - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        putSequence.set(end);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Put是生产数据，Get是消费数据，Get一定不会超过Put。比如Put了10条数据，Get最多只能获取到10条数据。但有时候为了保证Get处理的速度，Put和Get并不会相等。<br>可以把Put看做是生产者，Get看做是消费者。生产者速度可以很快，消费者则可以慢慢地消费。比如Put了1000条，而Get我们只需要每次处理10条数据。</p>
<p>仍然以前面的示例来说明Get的流程，初始时current=-1，假设Put了两批数据一共15条，maxAbleSequence=14，而Get的BatchSize假设为10。<br>初始时next=current=-1，end=-1。通过startPosition，会设置next=0。最后end又被赋值为9，即循环缓冲区[0,9]一共10个元素。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Events&lt;Event&gt; doGet(Position start, <span class="keyword">int</span> batchSize) <span class="keyword">throws</span> CanalStoreException &#123;</span><br><span class="line">    LogPosition startPosition = (LogPosition) start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> current = getSequence.get();</span><br><span class="line">    <span class="keyword">long</span> maxAbleSequence = putSequence.get();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">next</span> = current;</span><br><span class="line">    <span class="keyword">long</span> end = current;</span><br><span class="line">    <span class="comment">// 如果startPosition为null，说明是第一次，默认+1处理</span></span><br><span class="line">    <span class="keyword">if</span> (startPosition == <span class="keyword">null</span> || !startPosition.getPostion().isIncluded()) &#123; <span class="comment">// 第一次订阅之后，需要包含一下start位置，防止丢失第一条记录</span></span><br><span class="line">        <span class="keyword">next</span> = <span class="keyword">next</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end = (<span class="keyword">next</span> + batchSize - <span class="number">1</span>) &lt; maxAbleSequence ? (<span class="keyword">next</span> + batchSize - <span class="number">1</span>) : maxAbleSequence;</span><br><span class="line">    <span class="comment">// 提取数据并返回</span></span><br><span class="line">    <span class="keyword">for</span> (; <span class="keyword">next</span> &lt;= end; <span class="keyword">next</span>++) &#123;</span><br><span class="line">        Event event = entries[getIndex(<span class="keyword">next</span>)];</span><br><span class="line">        <span class="keyword">if</span> (ddlIsolation &amp;&amp; isDdl(event.getEntry().getHeader().getEventType())) &#123;</span><br><span class="line">            <span class="comment">// 如果是ddl隔离，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (entrys.<span class="keyword">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">                entrys.add(event);<span class="comment">// 如果没有DML事件，加入当前的DDL事件</span></span><br><span class="line">                end = <span class="keyword">next</span>; <span class="comment">// 更新end为当前</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果之前已经有DML事件，直接返回了，因为不包含当前next这记录，需要回退一个位置</span></span><br><span class="line">                end = <span class="keyword">next</span> - <span class="number">1</span>; <span class="comment">// next-1一定大于current，不需要判断</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            entrys.add(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理PositionRange，然后设置getSequence为end</span></span><br><span class="line">    getSequence.compareAndSet(current, end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ack操作的上限是Get，假设Put了15条数据，Get了10条数据，最多也只能Ack10条数据。Ack的目的是清空缓冲区中已经被Get过的数据</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> ack(Position position) <span class="keyword">throws</span> CanalStoreException &#123;</span><br><span class="line">    cleanUntil(position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> cleanUntil(Position position) <span class="keyword">throws</span> CanalStoreException &#123;</span><br><span class="line">    <span class="keyword">long</span> sequence = ackSequence.get();</span><br><span class="line">    <span class="keyword">long</span> maxSequence = getSequence.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasMatch = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">long</span> memsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">next</span> = sequence + <span class="number">1</span>; <span class="keyword">next</span> &lt;= maxSequence; <span class="keyword">next</span>++) &#123;</span><br><span class="line">        Event event = entries[getIndex(<span class="keyword">next</span>)];</span><br><span class="line">        memsize += calculateSize(event);</span><br><span class="line">        <span class="keyword">boolean</span> match = CanalEventUtils.checkPosition(event, (LogPosition) position);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;<span class="comment">// 找到对应的position，更新ack seq</span></span><br><span class="line">            hasMatch = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (batchMode.isMemSize()) &#123;</span><br><span class="line">                ackMemSize.addAndGet(memsize);</span><br><span class="line">                <span class="comment">// 尝试清空buffer中的内存，将ack之前的内存全部释放掉</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">long</span> index = sequence + <span class="number">1</span>; index &lt; <span class="keyword">next</span>; index++) &#123;</span><br><span class="line">                    entries[getIndex(index)] = <span class="keyword">null</span>;<span class="comment">// 设置为null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ackSequence.compareAndSet(sequence, <span class="keyword">next</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>rollback回滚方法的实现则比较简单，将getSequence回退到ack位置。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span>(<span class="params"></span>) throws CanalStoreException </span>&#123;</span><br><span class="line">    getSequence.<span class="keyword">set</span>(ackSequence.<span class="keyword">get</span>());</span><br><span class="line">    getMemSize.<span class="keyword">set</span>(ackMemSize.<span class="keyword">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图展示了RingBuffer的几个操作示例：</p>
<p><img src="http://img.blog.csdn.net/20171011225116791" alt="ringbuffer"></p>
<h3 id="EventParser_WorkFlow">EventParser WorkFlow</h3><p>EventStore负责存储解析后的Binlog事件，而解析动作负责拉取Binlog，它的流程比较复杂。需要和MetaManager进行交互。<br>比如要记录每次拉取的Position，这样下一次就可以从上一次的最后一个位置继续拉取。所以MetaManager应该是有状态的。</p>
<p>EventParser的流程如下：</p>
<ol>
<li>Connection获取上一次解析成功的位置 (如果第一次启动，则获取初始指定的位置或者是当前数据库的binlog位点)</li>
<li>Connection建立链接，发送BINLOG_DUMP指令</li>
<li>Mysql开始推送Binaly Log</li>
<li>接收到的Binaly Log的通过Binlog parser进行协议解析，补充一些特定信息</li>
<li>传递给EventSink模块进行数据存储，是一个阻塞操作，直到存储成功</li>
<li>存储成功后，定时记录Binaly Log位置</li>
</ol>
<p><img src="https://camo.githubusercontent.com/031db3aa27461d13faa2dea479ef639f93386a00/687474703a2f2f646c2e69746579652e636f6d2f75706c6f61642f6174746163686d656e742f303038302f333134332f37393531633136392d663764662d336362332d616562622d6439323466353733313163622e6a7067" alt="parser"></p>
<p>上面提到的Connection指的是实现了<code>ErosaConnection</code>接口的<code>MysqlConnection</code>。<br><code>EventParser</code>的实现类是实现了<code>AbstractEventParser</code>的<code>MysqlEventParser</code>。</p>
<p><code>EventParser</code>解析binlog后通过<code>EventSink</code>写入到<code>EventStore</code>，这条链路可以通过EventStore的put方法串联起来：</p>
<p><img src="http://img.blog.csdn.net/20171011234800632" alt="put"></p>
<p>其实这里还有一个EventTransactionBuffer缓冲区，即Parser解析后先放到缓冲区中，<br>当事务发生时或者数据超过阈值，就会执行刷新操作：即消费缓冲区的数据，放到EventStore中。<br>这个缓冲区有两个偏移量指针：putSequence和flushSequence。</p>
<h2 id="Canal_HA">Canal HA</h2><p>单机模拟两个Canal Server，将单机模式复制出两个文件夹，并修改相关配置</p>
<p>canal_m/conf/canal.properties</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">canal.id= <span class="number">2</span></span><br><span class="line">canal.ip=</span><br><span class="line">canal.port= <span class="number">11112</span></span><br><span class="line">canal.zkServers=localhost:<span class="number">2181</span></span><br><span class="line">canal.<span class="keyword">instance</span>.<span class="keyword">global</span>.<span class="keyword">spring</span>.xml = classpath:<span class="keyword">spring</span>/<span class="keyword">default</span>-<span class="keyword">instance</span>.xml</span><br></pre></td></tr></table></figure>
<p>canal_m/conf/example/instance.properties</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canal<span class="class">.instance</span><span class="class">.mysql</span><span class="class">.slaveId</span> = <span class="number">1235</span></span><br></pre></td></tr></table></figure>
<p>canal_s</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">canal.id= <span class="number">3</span></span><br><span class="line">canal.ip=</span><br><span class="line">canal.port= <span class="number">11113</span></span><br><span class="line">canal.zkServers=localhost:<span class="number">2181</span></span><br><span class="line">canal.<span class="keyword">instance</span>.<span class="keyword">global</span>.<span class="keyword">spring</span>.xml = classpath:<span class="keyword">spring</span>/<span class="keyword">default</span>-<span class="keyword">instance</span>.xml</span><br></pre></td></tr></table></figure>
<p>canal_s/conf/example/instance.properties</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canal<span class="class">.instance</span><span class="class">.mysql</span><span class="class">.slaveId</span> = <span class="number">1236</span></span><br></pre></td></tr></table></figure>
<p>启动canal_m</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:51</span><span class="pseudo">:45</span><span class="class">.202</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalLauncher</span> <span class="tag">-</span> ## <span class="tag">start</span> <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span>.</span><br><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:51</span><span class="pseudo">:45</span><span class="class">.776</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalController</span> <span class="tag">-</span> ## <span class="tag">start</span> <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span><span class="attr_selector">[192.168.6.52:11112]</span></span><br><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:51</span><span class="pseudo">:46</span><span class="class">.687</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalLauncher</span> <span class="tag">-</span> ## <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span> <span class="tag">is</span> <span class="tag">running</span> <span class="tag">now</span> ......</span><br></pre></td></tr></table></figure>
<p>启动canal_s</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:52</span><span class="pseudo">:18</span><span class="class">.999</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalLauncher</span> <span class="tag">-</span> ## <span class="tag">start</span> <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span>.</span><br><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:52</span><span class="pseudo">:19</span><span class="class">.208</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalController</span> <span class="tag">-</span> ## <span class="tag">start</span> <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span><span class="attr_selector">[192.168.6.52:11113]</span></span><br><span class="line">2017<span class="tag">-10-12</span> 14<span class="pseudo">:52</span><span class="pseudo">:19</span><span class="class">.364</span> <span class="attr_selector">[main]</span> <span class="tag">INFO</span>  <span class="tag">com</span><span class="class">.alibaba</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.deployer</span><span class="class">.CanalLauncher</span> <span class="tag">-</span> ## <span class="tag">the</span> <span class="tag">canal</span> <span class="tag">server</span> <span class="tag">is</span> <span class="tag">running</span> <span class="tag">now</span> ......</span><br></pre></td></tr></table></figure>
<p>master提供服务，canal_m/logs/example/example.log下有日志，而canal_s/logs没有example文件夹</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 ~]$ tail -f canal_m/logs/example/example<span class="class">.log</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">46.453</span> [main] INFO  c<span class="class">.a</span><span class="class">.o</span><span class="class">.c</span><span class="class">.i</span><span class="class">.spring</span><span class="class">.support</span><span class="class">.PropertyPlaceholderConfigurer</span> - Loading properties file from class path resource [canal.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">46.463</span> [main] INFO  c<span class="class">.a</span><span class="class">.o</span><span class="class">.c</span><span class="class">.i</span><span class="class">.spring</span><span class="class">.support</span><span class="class">.PropertyPlaceholderConfigurer</span> - Loading properties file from class path resource [example/instance.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">46.624</span> [main] INFO  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.instance</span><span class="class">.spring</span><span class="class">.CanalInstanceWithSpring</span> - start CannalInstance <span class="keyword">for</span> <span class="number">1</span>-example</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">46.644</span> [main] INFO  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.instance</span><span class="class">.core</span><span class="class">.AbstractCanalInstance</span> - start successful....</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">46.658</span> [destination = example , <span class="tag">address</span> = /<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span> , EventParser] WARN  c<span class="class">.a</span><span class="class">.otter</span><span class="class">.canal</span><span class="class">.parse</span><span class="class">.inbound</span><span class="class">.mysql</span><span class="class">.MysqlEventParser</span> - prepare to find start <span class="attribute">position</span> just show master status</span><br></pre></td></tr></table></figure>
<p>查看Canal HA记录在ZK的信息</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">7</span>] ls /otter/canal/destinations/example/cluster</span><br><span class="line">[<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11112</span>, <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">10</span>] get /otter/canal/destinations/example/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"192.168.6.52:11112"</span>,<span class="string">"cid"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>启动example的<a href="https://github.com/alibaba/canal/blob/master/example/src/main/java/com/alibaba/otter/canal/example/ClusterCanalClientTest.java">ClusterCanalClientTest</a></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">CanalConnector</span> connector = CanalConnectors.newClusterConnector(<span class="string">"192.168.6.52:2181"</span>, destination, <span class="string">"canal"</span>, <span class="string">"canal"</span>);</span><br></pre></td></tr></table></figure>
<p>执行SQL：<code>update test set name = &#39;zqh&#39; where uid=1;</code>，控制台打印日志如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [1] ,count : [3] , memsize : [203] , Time : 2017-10-12 15:05:20</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:1151:1507791918000(2017-10-12 15:05:18)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:1331:1507791918000(2017-10-12 15:05:18)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:1151] , executeTime : 1507791918000 , delay : 2080ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 763</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:1277] , name[canal_test,test] , eventType : UPDATE , executeTime : 1507791918000 , delay : 2092ms</span><br><span class="line">uid : 1    type=int(4)</span><br><span class="line">name : zqh    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:1331] , executeTime : 1507791918000 , delay : 2130ms</span><br></pre></td></tr></table></figure>
<p>再次查看ZK中记录的客户端信息：</p>
<ul>
<li>一个Instance对应一个Client，这里的Instance名称为example，对应的客户端编号是1001</li>
<li>为了验证Instance确实是由指定的Client连接，在Server上查看11112端口</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">18</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.241.44:53942"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">19</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/cursor</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.alibaba.otter.canal.protocol.position.LogPosition"</span>,</span><br><span class="line"><span class="string">"identity"</span>:&#123;<span class="string">"slaveId"</span>:-<span class="number">1</span>,<span class="string">"sourceAddress"</span>:&#123;<span class="string">"address"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:<span class="number">3306</span>&#125;&#125;,</span><br><span class="line"><span class="string">"postion"</span>:&#123;<span class="string">"included"</span>:<span class="literal">false</span>,<span class="string">"journalName"</span>:<span class="string">"mysql-bin.000004"</span>,<span class="string">"position"</span>:<span class="number">1331</span>,<span class="string">"serverId"</span>:<span class="number">1</span>,<span class="string">"timestamp"</span>:<span class="number">1507791918000</span>&#125;&#125; ==》serverId表示MySQL的server_id</span><br><span class="line"></span><br><span class="line">[qihuang.zheng@dp0652 ~]$ netstat -anpt|grep <span class="number">11112</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">11112</span>               <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*                   LISTEN      <span class="number">27816</span>/java   ==》Canal服务端</span><br><span class="line">tcp        <span class="number">0</span>     <span class="number">19</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11112</span>          <span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">53942</span>          ESTABLISHED <span class="number">27816</span>/java   ==》Canal客户端</span><br></pre></td></tr></table></figure>
<p>停止canal_m</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng<span class="annotation">@dp</span>0652 canal_m]$ bin/stop.sh</span><br><span class="line"><span class="string">dp0652:</span> stopping canal <span class="number">27816</span> ...</span><br><span class="line">Oook! <span class="string">cost:</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Instance会在slave节点即canal_s上启动</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 ~]$ tail -f canal_s/logs/example/example.<span class="built_in">log</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.452</span> [New I/O server worker <span class="preprocessor">#<span class="number">1</span>-<span class="number">1</span>] ERROR com.alibaba.otter.canal.server.netty.NettyUtils - ErrotCode:<span class="number">400</span> , Caused by :</span></span><br><span class="line">something goes wrong with channel:[id: <span class="number">0x0c182149</span>, /<span class="number">10.57</span><span class="number">.241</span><span class="number">.44</span>:<span class="number">54008</span> =&gt; /<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>], exception=com.alibaba.otter.canal.server.exception.CanalServerException: destination:example should start first</span><br><span class="line"></span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.661</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from <span class="keyword">class</span> path resource [canal.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.663</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from <span class="keyword">class</span> path resource [example/instance.properties]</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.767</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] WARN  org.springframework.beans.TypeConverterDelegate - PropertyEditor [com.sun.beans.editors.EnumEditor] found through deprecated global PropertyEditorManager fallback - consider <span class="keyword">using</span> a more isolated form of registration, e.g. on the BeanWrapper/BeanFactory!</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.968</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance <span class="keyword">for</span> <span class="number">1</span>-example</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">21.998</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....</span><br><span class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">22.071</span> [destination = example , address = /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span> , EventParser] WARN  c.a.otter.canal.parse.inbound.mysql.MysqlEventParser - prepare to find start position just last position</span><br><span class="line"> &#123;<span class="string">"identity"</span>:&#123;<span class="string">"slaveId"</span>:-<span class="number">1</span>,<span class="string">"sourceAddress"</span>:&#123;<span class="string">"address"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:<span class="number">3306</span>&#125;&#125;,<span class="string">"postion"</span>:&#123;<span class="string">"included"</span>:<span class="literal">false</span>,<span class="string">"journalName"</span>:<span class="string">"mysql-bin.000004"</span>,<span class="string">"position"</span>:<span class="number">1331</span>,<span class="string">"serverId"</span>:<span class="number">1</span>,<span class="string">"timestamp"</span>:<span class="number">1507791918000</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>停止canal_m后，只剩下canal_s，所以Canal集群只有一个节点了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">14</span>] ls /otter/canal/cluster</span><br><span class="line">[<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">5</span>] get /otter/canal/destinations/example/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"192.168.6.52:11113"</span>,<span class="string">"cid"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>切换过程中，Client的日志</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2017-10-12 15:17:22.524 [Thread-2] WARN  c.alibaba.otter.canal.client.impl.ClusterCanalConnector - failed to connect to:/192.168.6.52:11113 after retry 0 times</span><br><span class="line">2017-10-12 15:17:22.529 [Thread-2] WARN  c.a.otter.canal.client.impl.running.ClientRunningMonitor - canal is not run any in node</span><br><span class="line">2017-10-12 15:17:27.695 [Thread-2] INFO  c.alibaba.otter.canal.client.impl.ClusterCanalConnector - restart the connector for next round retry.</span><br><span class="line"></span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [1] ,count : [1] , memsize : [75] , Time : 2017-10-12 15:17:27</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:1331:1507791918000(2017-10-12 15:05:18)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:1331:1507791918000(2017-10-12 15:05:18)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:1331] , executeTime : 1507791918000 , delay : 729763ms</span><br></pre></td></tr></table></figure>
<p>再次执行SQL语句</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [2] ,count : [3] , memsize : [198] , Time : 2017-10-12 15:20:56</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:1406:1507792855000(2017-10-12 15:20:55)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:1581:1507792855000(2017-10-12 15:20:55)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:1406] , executeTime : 1507792855000 , delay : 1539ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 763</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:1532] , name[canal_test,test] , eventType : UPDATE , executeTime : 1507792855000 , delay : 1539ms</span><br><span class="line">uid : 1    type=int(4)</span><br><span class="line">name : zqhx    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:1581] , executeTime : 1507792855000 , delay : 1540ms</span><br></pre></td></tr></table></figure>
<p>停止客户端后，查询ZK中的客户端信息。注意，仍然有cursor信息，但是没有running，因为instance没有对应的client了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">1</span>] ls /otter/canal/destinations/example</span><br><span class="line">[running, cluster, <span class="number">1001</span>]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">0</span>] ls /otter/canal/destinations/example/<span class="number">1001</span></span><br><span class="line">[cursor]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">6</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/cursor</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.alibaba.otter.canal.protocol.position.LogPosition"</span>,</span><br><span class="line"><span class="string">"identity"</span>:&#123;<span class="string">"slaveId"</span>:-<span class="number">1</span>,<span class="string">"sourceAddress"</span>:&#123;<span class="string">"address"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:<span class="number">3306</span>&#125;&#125;,</span><br><span class="line"><span class="string">"postion"</span>:&#123;<span class="string">"included"</span>:<span class="literal">false</span>,<span class="string">"journalName"</span>:<span class="string">"mysql-bin.000004"</span>,<span class="string">"position"</span>:<span class="number">1581</span>,<span class="string">"serverId"</span>:<span class="number">1</span>,<span class="string">"timestamp"</span>:<span class="number">1507792855000</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>cursor信息是instance消费binlog的位置，即使客户端停掉了，也仍然保留在zk中。</p>
<blockquote>
<p>注意：1001是ClientIdentity的固定编号，相关源码在<a href="https://github.com/alibaba/canal/blob/master/client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java#L88">SimpleCanalConnector</a>的构造方法里。</p>
</blockquote>
<p>下面总结下zk中的相关记录：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/otter/canal/</span><br><span class="line">  |- cluster          ==&gt; [<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11112</span>, <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>]</span><br><span class="line">  |- destinations     ==&gt; instances</span><br><span class="line">     |- example1/     ==&gt; instance name</span><br><span class="line">     |  |- cluster    ==&gt; [<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11112</span>, <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>]</span><br><span class="line">     |  |- running    ==&gt; &#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"192.168.6.52:11112"</span>,<span class="string">"cid"</span>:<span class="number">2</span>&#125;</span><br><span class="line">     |  |- <span class="number">1001</span></span><br><span class="line">     |     |- running  ==&gt; &#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.241.44:53942"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br><span class="line">     |     |- cursor  ==&gt; &#123;localhost:<span class="number">3306</span>,<span class="string">"journalName"</span>:<span class="string">"mysql-bin.000004"</span>,<span class="string">"position"</span>:<span class="number">1331</span>,<span class="string">"serverId"</span>:<span class="number">1</span>&#125;</span><br><span class="line">     |- example2/</span><br><span class="line">     |  |- cluster    ==&gt; [<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11112</span>, <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">11113</span>]</span><br><span class="line">     |  |- running    ==&gt; &#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"192.168.6.52:11112"</span>,<span class="string">"cid"</span>:<span class="number">2</span>&#125;</span><br><span class="line">     |  |- <span class="number">1001</span></span><br><span class="line">     |     |- running  ==&gt; &#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.241.44:53942"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br><span class="line">     |     |- cursor  ==&gt; &#123;localhost:<span class="number">3306</span>,<span class="string">"journalName"</span>:<span class="string">"mysql-bin.000004"</span>,<span class="string">"position"</span>:<span class="number">1331</span>,<span class="string">"serverId"</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里有两个running节点，第一个是CanalServer，第二个是CanalClient。</p>
<ul>
<li><code>/otter/canal/destinations/example1/running</code>: <em>{“active”:true,”address”:”192.168.6.52:11112”,”cid”:2}</em></li>
<li><code>/otter/canal/destinations/example1/1001/running</code>: <em>{“active”:true,”address”:”10.57.241.44:53942”,”clientId”:1001}</em></li>
</ul>
<p>下图是Canal Server HA的流程图：</p>
<ol>
<li>canal server要启动某个canal instance时都先向zookeeper进行一次尝试启动判断 (实现：创建EPHEMERAL节点，谁创建成功就允许谁启动)</li>
<li>创建zookeeper节点成功后，对应的canal server就启动对应的canal instance，没有创建成功的canal instance就会处于standby状态</li>
<li>一旦zookeeper发现canal server A创建的节点消失后，立即通知其他的canal server再次进行步骤1的操作，重新选出一个canal server启动instance.</li>
<li>canal client每次进行connect时，会首先向zookeeper询问当前是谁启动了canal instance，然后和其建立链接，一旦链接不可用，会重新尝试connect.</li>
</ol>
<p><img src="https://camo.githubusercontent.com/c8f1d98268a307821273e94e7eefcd29a26f9b78/687474703a2f2f646c2e69746579652e636f6d2f75706c6f61642f6174746163686d656e742f303038302f333330332f64333230326332362d653935342d333563302d613331392d3537363034313032633537642e6a7067" alt="server ha"></p>
<h2 id="Canal_Client_HA">Canal Client HA</h2><p>Canal Client的方式和canal server方式类似，也是利用zookeeper的抢占EPHEMERAL节点的方式进行控制。</p>
<blockquote>
<p>HA的实现，客户端是ClientRunningMonitor，服务端是ServerRunningMonitor。</p>
</blockquote>
<p>关于Canal Client HA的验证，可以参考：<a href="http://blog.csdn.net/xiaolinzi007/article/details/52933909" target="_blank" rel="external">http://blog.csdn.net/xiaolinzi007/article/details/52933909</a></p>
<ul>
<li>在IDEA中同时启动多个客户端，执行一条SQL语句，其中一个客户端会打印日志，另一个不会打印。</li>
<li>停止打印日志的那个客户端（在停止这个客户端之前，日志一直发动到这个客户端，不是负载均衡）。</li>
<li>再次执行SQL语句，另外一个客户端会打印日志。</li>
</ul>
<p>Client1的日志：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [3] ,count : [3] , memsize : [198] , Time : 2017-10-12 17:59:59</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:1656:1507802398000(2017-10-12 17:59:58)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:1831:1507802398000(2017-10-12 17:59:58)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:1656] , executeTime : 1507802398000 , delay : 1188ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 768</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:1782] , name[canal_test,test] , eventType : UPDATE , executeTime : 1507802398000 , delay : 1199ms</span><br><span class="line">uid : 1    type=int(4)</span><br><span class="line">name : zqh    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:1831] , executeTime : 1507802398000 , delay : 1236ms</span><br><span class="line"><span class="comment">## stop the canal client## canal client is down.</span></span><br></pre></td></tr></table></figure>
<p>停止Client1后，Client2的日志：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Batch Id: [4] ,count : [3] , memsize : [198] , Time : 2017-10-12 18:02:15</span><br><span class="line"><span class="keyword">*</span> Start : [mysql-bin.000004:1906:1507802534000(2017-10-12 18:02:14)] </span><br><span class="line"><span class="keyword">*</span> End : [mysql-bin.000004:2081:1507802534000(2017-10-12 18:02:14)] </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000004:1906] , executeTime : 1507802534000 , delay : 1807ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 768</span><br><span class="line">----------------&gt; binlog[mysql-bin.000004:2032] , name[canal_test,test] , eventType : UPDATE , executeTime : 1507802534000 , delay : 1819ms</span><br><span class="line">uid : 1    type=int(4)</span><br><span class="line">name : zqhx    type=varchar(10)    update=true</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 0</span><br><span class="line">================&gt; binlog[mysql-bin.000004:2081] , executeTime : 1507802534000 , delay : 1855ms</span><br></pre></td></tr></table></figure>
<p>观察ZK节点中instance对应的client节点，在Client切换时，会进行变更。<br>比如下面的客户端从56806端口切换到了56842端口。<br>把所有客户端都关闭后，1001下没有running。表示instance没有客户端消费binlog了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">启动两个客户端，第一个客户端（<span class="number">56806</span>）正在运行</span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">29</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.241.44:56806"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br><span class="line"></span><br><span class="line">停止第一个客户端，删除节点</span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">30</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/running</span><br><span class="line">Node does not exist: /otter/canal/destinations/example/<span class="number">1001</span>/running</span><br><span class="line"></span><br><span class="line">第二个客户端（<span class="number">56842</span>）成为主</span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">31</span>] get /otter/canal/destinations/example/<span class="number">1001</span>/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.241.44:56842"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">2181</span>(CONNECTED) <span class="number">32</span>] ls /otter/canal/destinations/example/<span class="number">1001</span></span><br><span class="line">[cursor]</span><br></pre></td></tr></table></figure>
<p>具体实现相关类有：ClientRunningMonitor/ClientRunningListener/ClientRunningData。</p>
<p>client running相关控制，主要为解决client自身的failover机制。<br>canal client允许同时启动多个canal client，<br>通过running机制，可保证只有一个client在工作，其他client做为冷备.<br>当运行中的client挂了，running会控制让冷备中的client转为工作模式，<br>这样就可以确保canal client也不会是单点. 保证整个系统的高可用性.</p>
<p>下图左边是客户端的HA实现，右边是服务端的HA实现</p>
<p><img src="http://img.blog.csdn.net/20171012184033228" alt="ha"></p>
<h2 id="Develop_Canal_Client"><a href="https://github.com/alibaba/canal/wiki/ClientAPI">Develop Canal Client</a></h2><p>先理解下面的类图结构：</p>
<ul>
<li>CanalConnector接口，定义了连接、订阅、获取、应答、回滚等方法</li>
<li>SimpleCanalConnector实现，单机版本</li>
<li>ClusterCanalConnector实现，HA版本</li>
</ul>
<p><img src="https://camo.githubusercontent.com/8cc684cf92e22d738d57b002c356afba96bcc4f5/687474703a2f2f646c322e69746579652e636f6d2f75706c6f61642f6174746163686d656e742f303039302f363435332f39326233343335302d323566632d333162332d626361362d3865326131653763356532322e6a7067" alt="client"></p>
<h3 id="subscribe_change">subscribe change</h3><p>重新看下CanalServerWithEmbedded的订阅方法。我们知道客户端在连接服务端的某个destination之后，会紧接着调用subscribe()方法。</p>
<p>客户端连接服务端时，必须指定destination名称，因为一个服务端可能有多个destination。<br>比如服务端启动了两个Instance，它们的destination名称分别是example1和example2。<br>假设有两个客户端A和B，A连接example1，B连接example2（在代码中手动指定的，不是自动选择）。<br>服务端的canalInstances字典为：{example1=&gt;Instance1，example2-&gt;Instance2}。<br>那么ClientA的destination等于example1，对应的服务端实例为Instance1。<br>ClientB的destination等于example2，对应的服务端实例为Instance3。</p>
<p><img src="http://img.blog.csdn.net/20171012230738279" alt="clients"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 客户端订阅，重复订阅时会更新对应的filter信息</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span>(<span class="params">ClientIdentity clientIdentity</span>) throws CanalServerException </span>&#123;</span><br><span class="line">    CanalInstance canalInstance = canalInstances.<span class="keyword">get</span>(clientIdentity.getDestination());</span><br><span class="line">    <span class="keyword">if</span> (!canalInstance.getMetaManager().isStart()) &#123;</span><br><span class="line">        canalInstance.getMetaManager().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canalInstance.getMetaManager().subscribe(clientIdentity); <span class="comment">// 执行一下meta订阅</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据Client从MetaManager中获取最近一次的Cursor</span></span><br><span class="line">    Position position = canalInstance.getMetaManager().getCursor(clientIdentity);</span><br><span class="line">    <span class="keyword">if</span> (position == <span class="keyword">null</span>) &#123; <span class="comment">// 如果没有</span></span><br><span class="line">        position = canalInstance.getEventStore().getFirstPosition();<span class="comment">// 获取一下store中的第一条</span></span><br><span class="line">        <span class="keyword">if</span> (position != <span class="keyword">null</span>) &#123;</span><br><span class="line">            canalInstance.getMetaManager().updateCursor(clientIdentity, position); <span class="comment">// 更新一下cursor</span></span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"subscribe successfully, &#123;&#125; with first position:&#123;&#125; "</span>, clientIdentity, position);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 有就直接使用</span></span><br><span class="line">        logger.info(<span class="string">"subscribe successfully, use last cursor position:&#123;&#125; "</span>, clientIdentity, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知下订阅关系变化</span></span><br><span class="line">    canalInstance.subscribeChange(clientIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面关于订阅方法有两个地方，CanalInstance本身调用了subscribeChange，它关联的MetaManager也调用了subscribe方法。</p>
<p>一个CanalServer可以有多个CanalInstance，每个Instance都会有一个MetaManager。<br>而一个Instance对应一个Client。那么，这么说来，一个MetaManager也就只会有一个Client了。<br>但是从下面的数据结构来看的话，一个MetaManager貌似可以有多个Destination。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MemoryMetaManager</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalLifeCycle</span> <span class="title">implements</span> <span class="title">CanalMetaManager</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">List</span>&lt;<span class="type">ClientIdentity</span>&gt;&gt;              destinations;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Map</span>&lt;<span class="type">ClientIdentity</span>, <span class="type">MemoryClientIdentityBatch</span>&gt; batches;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Map</span>&lt;<span class="type">ClientIdentity</span>, <span class="type">Position</span>&gt;                  cursors;</span><br><span class="line"></span><br><span class="line">    public synchronized void subscribe(<span class="type">ClientIdentity</span> clientIdentity) <span class="keyword">throws</span> <span class="type">CanalMetaManagerException</span> &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">ClientIdentity</span>&gt; clientIdentitys = destinations.get(clientIdentity.getDestination());</span><br><span class="line">        <span class="keyword">if</span> (clientIdentitys.contains(clientIdentity)) &#123;</span><br><span class="line">            clientIdentitys.remove(clientIdentity);</span><br><span class="line">        &#125;</span><br><span class="line">        clientIdentitys.add(clientIdentity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>猜测：多个Client可以连接到同一个Instance（虽然只会有一个Instance起作用），所以一个MetaManager可以管理多个Client。<br>NO！Client的HA与MetaManager记录的Client是不一样的。HA表示同一时间只有一个Client起作用，那么MetaManager不可能同时记录两个Client。</p>
<p>官方ClientAPI文档上：ClientIdentity是canal client和server交互之间的身份标识，目前clientId写死为1001.<br><strong><font color="red" size="5">目前canal server上的一个instance只能有一个client消费</font></strong>，<br>clientId的设计是为1个instance多client消费模式而预留的，暂时不需要理会。</p>
</blockquote>
<p>也就是说：一个Instance还是有可能有多个Client连接上来的，只是目前只允许一个而已！！！</p>
<p><img src="http://img.blog.csdn.net/20171012234337736" alt="subscribes"></p>
<p>这里的数据结构为什么这么设计，还需要参考<em>AbstractMetaManagerTest</em>的<em>doSubscribeTest</em>方法来理解。</p>
<p>对于相同的destination，可以订阅不同的client。下面的示例分别订阅了[client1,client2]和[client1,client3]。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSubscribeTest</span><span class="params">(CanalMetaManager metaManager)</span> </span>&#123;</span><br><span class="line">    ClientIdentity client1 = <span class="keyword">new</span> ClientIdentity(destination, (<span class="keyword">short</span>) <span class="number">1</span>);</span><br><span class="line">    metaManager.subscribe(client1);</span><br><span class="line">    metaManager.subscribe(client1); <span class="comment">// 重复调用：删除旧的client1，并继续增加新的client1</span></span><br><span class="line">    ClientIdentity client2 = <span class="keyword">new</span> ClientIdentity(destination, (<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">    metaManager.subscribe(client2);</span><br><span class="line"></span><br><span class="line">    List&lt;ClientIdentity&gt; clients = metaManager.listAllSubscribeInfo(destination);</span><br><span class="line">    Assert.assertEquals(Arrays.asList(client1, client2), clients);</span><br><span class="line"></span><br><span class="line">    metaManager.unsubscribe(client2);</span><br><span class="line">    ClientIdentity client3 = <span class="keyword">new</span> ClientIdentity(destination, (<span class="keyword">short</span>) <span class="number">3</span>);</span><br><span class="line">    metaManager.subscribe(client3);</span><br><span class="line"></span><br><span class="line">    clients = metaManager.listAllSubscribeInfo(destination);</span><br><span class="line">    Assert.assertEquals(Arrays.asList(client1, client3), clients);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有不懂的地方，可以看看测试用例，验证自己的想法是否正确。</p>
</blockquote>
<p><strong>CanalServerWithEmbedded</strong>的订阅方法最后还会调用<strong>AbstractCanalInstance</strong>的<code>subscribeChange</code>方法。<br>这里会设置表名的filter，以及黑名单。配置项在instance.properties中。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># table regex</span></span><br><span class="line">canal.instance.<span class="built_in">filter</span>.regex = .*\\..*</span><br><span class="line"><span class="comment"># table black regex</span></span><br><span class="line">canal.instance.<span class="built_in">filter</span>.<span class="keyword">black</span>.regex =</span><br></pre></td></tr></table></figure>
<p>filter表示客户端要通过Canal Server获取MySQL哪些表的binlog，上面配置项表示获取所有表。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AbstractCanalInstance</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalLifeCycle</span> <span class="title">implements</span> <span class="title">CanalInstance</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Long</span>                                   canalId;                                                      <span class="comment">// 和manager交互唯一标示</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span>                                 destination;                                                  <span class="comment">// 队列名字</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventStore</span>&lt;<span class="type">Event</span>&gt;                 eventStore;                                                   <span class="comment">// 有序队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventParser</span>                       eventParser;                                                  <span class="comment">// 解析对应的数据信息</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventSink</span>&lt;<span class="type">List</span>&lt;<span class="type">CanalEntry</span>.<span class="type">Entry</span>&gt;&gt; eventSink;                                                    <span class="comment">// 链接parse和store的桥接器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalMetaManager</span>                       metaManager;                                                  <span class="comment">// 消费信息管理器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalAlarmHandler</span>                      alarmHandler;                                                 <span class="comment">// alarm报警机制</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public boolean subscribeChange(<span class="type">ClientIdentity</span> identity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">StringUtils</span>.isNotEmpty(identity.getFilter())) &#123;</span><br><span class="line">            logger.info(<span class="string">"subscribe filter change to "</span> + identity.getFilter());</span><br><span class="line">            <span class="type">AviaterRegexFilter</span> aviaterFilter = <span class="keyword">new</span> <span class="type">AviaterRegexFilter</span>(identity.getFilter());</span><br><span class="line"></span><br><span class="line">            boolean isGroup = (eventParser instanceof <span class="type">GroupEventParser</span>);</span><br><span class="line">            <span class="keyword">if</span> (isGroup) &#123;</span><br><span class="line">                <span class="comment">// 处理group的模式</span></span><br><span class="line">                <span class="type">List</span>&lt;<span class="type">CanalEventParser</span>&gt; eventParsers = ((<span class="type">GroupEventParser</span>) eventParser).getEventParsers();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">CanalEventParser</span> singleEventParser : eventParsers) &#123;<span class="comment">// 需要遍历启动</span></span><br><span class="line">                    ((<span class="type">AbstractEventParser</span>) singleEventParser).setEventFilter(aviaterFilter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ((<span class="type">AbstractEventParser</span>) eventParser).setEventFilter(aviaterFilter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// filter的处理规则</span></span><br><span class="line">        <span class="comment">// a. parser处理数据过滤处理</span></span><br><span class="line">        <span class="comment">// b. sink处理数据的路由&amp;分发,一份parse数据经过sink后可以分发为多份，每份的数据可以根据自己的过滤规则不同而有不同的数据</span></span><br><span class="line">        <span class="comment">// 后续内存版的一对多分发，可以考虑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应在EventParser中，存在两个Filter的引用。比如上面eventParser.setEventFilter()方法会设置AbstractEventParser的eventFilter。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEventParser&lt;EVENT&gt;</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractCanalLifeCycle</span> <span class="title">implements</span> <span class="title">CanalEventParser&lt;EVENT&gt;</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalLogPositionManager</span>                logPositionManager         = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventSink</span>&lt;<span class="type">List</span>&lt;<span class="type">CanalEntry</span>.<span class="type">Entry</span>&gt;&gt; eventSink                  = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventFilter</span>                       eventFilter                = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">CanalEventFilter</span>                       eventBlackFilter           = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EventParser_Implement">EventParser Implement</h3><p>AbstractEventParser的start()方法是解析binlog的主要方法。<br>在启动transactionBuffer和BinLogParser后，<br>会启动一个后台的工作线程<strong>parseThread</strong>一直运行：  </p>
<p>注意：下面的几个步骤是嵌套在一个while死循环里，最后会进行sleep。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始执行replication</span></span><br><span class="line"><span class="comment">// 1. 构造Erosa连接</span></span><br><span class="line">erosaConnection = buildErosaConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 启动一个心跳线程</span></span><br><span class="line">startHeartBeat(erosaConnection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 执行dump前的准备工作</span></span><br><span class="line">preDump(erosaConnection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 连接MySQL数据库</span></span><br><span class="line">erosaConnection.connect(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 获取最后的位置信息</span></span><br><span class="line">EntryPosition startPosition = findStartPosition(erosaConnection);</span><br><span class="line">logger.info(<span class="string">"find start position : &#123;&#125;"</span>, startPosition.toString());</span><br><span class="line"><span class="comment">// 重新链接，因为在找position过程中可能有状态，需要断开后重建</span></span><br><span class="line">erosaConnection.reconnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义回调函数，当解析成功后，sink()方法会暂存到缓冲区transactionBuffer中。缓冲区的数据会通过心跳线程放入EventSink</span></span><br><span class="line">final SinkFunction sinkHandler = <span class="keyword">new</span> SinkFunction&lt;EVENT&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> LogPosition lastPosition;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sink</span>(<span class="params">EVENT <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">        CanalEntry.Entry entry = parseAndProfilingIfNecessary(<span class="keyword">event</span>);</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transactionBuffer.add(entry);</span><br><span class="line">            <span class="keyword">this</span>.lastPosition = buildLastPosition(entry);  <span class="comment">// 记录一下对应的positions</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 开始dump数据</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(startPosition.getJournalName()) &amp;&amp; startPosition.getTimestamp() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    erosaConnection.dump(startPosition.getTimestamp(), sinkHandler);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    erosaConnection.dump(startPosition.getJournalName(), startPosition.getPosition(), sinkHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的erosaConnection指的是Canal Server到MySQL的连接。<br>而前面我们说的客户端（CanalClient）连接CanalConnector指的是CanalClient到CanalServer的连接。</p>
<p><strong><font color="red" size="3">CanalServer到MySQL的连接是要获取binlog的dump数据包。而CanalClient到CanalServer有多种请求（GET/ACK等）。</font></strong></p>
<p>我们不会具体分析<em>dump</em>的流程，不过粗略看下erosaConnection的MySQL实现<strong>MysqlConnection</strong>是如何在获取到事件后调用回调函数。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dump</span>(<span class="params">String binlogfilename, Long binlogPosition, SinkFunction func</span>) throws IOException </span>&#123;</span><br><span class="line">    updateSettings();</span><br><span class="line">    sendBinlogDump(binlogfilename, binlogPosition);</span><br><span class="line">    <span class="comment">// connector指的是CanalServer到MySQL Master服务器的连接，创建一个拉取线程拉取MySQL的binlog</span></span><br><span class="line">    DirectLogFetcher fetcher = <span class="keyword">new</span> DirectLogFetcher(connector.getReceiveBufferSize());</span><br><span class="line">    fetcher.start(connector.getChannel());</span><br><span class="line">    LogDecoder decoder = <span class="keyword">new</span> LogDecoder(LogEvent.UNKNOWN_EVENT, LogEvent.ENUM_END_EVENT);</span><br><span class="line">    LogContext context = <span class="keyword">new</span> LogContext();</span><br><span class="line">    <span class="keyword">while</span> (fetcher.fetch()) &#123; <span class="comment">// 由于设置了缓冲区的大小，每次dump都只会拉取一批数据</span></span><br><span class="line">        LogEvent <span class="keyword">event</span> = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">event</span> = decoder.decode(fetcher, context);</span><br><span class="line">        <span class="keyword">if</span> (!func.sink(<span class="keyword">event</span>)) <span class="keyword">break</span>; <span class="comment">// 调用回调方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端有一个心跳线程，它的目的是消费<em>transactionBuffer</em>，并写入到<strong>EventSink</strong>中。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected boolean consumeTheEventAndProfilingIfNecessary(<span class="type">List</span>&lt;<span class="type">CanalEntry</span>.<span class="type">Entry</span>&gt; entrys) &#123;</span><br><span class="line">    boolean <span class="literal">result</span> = eventSink.sink(entrys, </span><br><span class="line">        (runningInfo == null) ? null : runningInfo.getAddress(), destination);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EventSink</strong>最终会将数据写入到<strong>EventStore</strong>中，即<em>Put</em>到<strong>RingBuffer</strong>中。回顾下这张图：</p>
<p><img src="http://img.blog.csdn.net/20171011211529169" alt="ops"></p>
<h2 id="CanalController">CanalController</h2><p>前面分析了这么多，一直没分析Canal服务是怎么起来的，其实很简单，<br>执行脚本startup.sh本质上通过CanalLauncher会启动CanalController。</p>
<h2 id="eunomia">eunomia</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>(CONNECTED) <span class="number">3</span>] ls /otter/canal/destinations</span><br><span class="line">[octopus_demeter, example_bak, namelist_test, xiaopang2, namelist2, xiaopang3, namelist1, example, xiaopang]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>(CONNECTED) <span class="number">4</span>] ls /otter/canal/destinations/xiaopang</span><br><span class="line">[eunomia, cluster, <span class="number">1001</span>, running]</span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>(CONNECTED) <span class="number">5</span>] ls /otter/canal/destinations/xiaopang/eunomia</span><br><span class="line">[_c_2a900d4e-<span class="number">75f</span>b-<span class="number">4445</span>-b30c-<span class="number">04e1</span>bdb2e5d9-lock-<span class="number">0001381746</span>, runnning, _c_ea33db37-<span class="number">9193</span>-<span class="number">4</span>c75-<span class="number">9e61</span>-<span class="number">85e59</span>e123109-lock-<span class="number">0001381738</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Eunomia Server？还是Canal Client？</span></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>(CONNECTED) <span class="number">7</span>] get /otter/canal/destinations/xiaopang/eunomia/runnning</span><br><span class="line"><span class="number">10.57</span><span class="number">.17</span><span class="number">.100</span></span><br><span class="line"></span><br><span class="line">[zk: <span class="number">192.168</span><span class="number">.6</span><span class="number">.55</span>:<span class="number">2181</span>(CONNECTED) <span class="number">18</span>] get /otter/canal/destinations/xiaopang/<span class="number">1001</span>/running</span><br><span class="line">&#123;<span class="string">"active"</span>:<span class="literal">true</span>,<span class="string">"address"</span>:<span class="string">"10.57.17.100:60661"</span>,<span class="string">"clientId"</span>:<span class="number">1001</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/canal&quot;&gt;canal&lt;/a&gt;: 阿里巴巴mysql数据库binlog的增量订阅&amp;amp;消费组件&lt;br&gt;
    
    </summary>
    
      <category term="midd" scheme="http://github.com/zqhxuyuan/categories/midd/"/>
    
    
      <category term="midd" scheme="http://github.com/zqhxuyuan/tags/midd/"/>
    
  </entry>
  
  <entry>
    <title>Spark DataSources Implementation</title>
    <link href="http://github.com/zqhxuyuan/2017/09/15/2017-09-15-Spark-DataSources/"/>
    <id>http://github.com/zqhxuyuan/2017/09/15/2017-09-15-Spark-DataSources/</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2017-11-21T03:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark数据源扩展与实践(40行代码实现一个自定义的DataSource)<br><a id="more"></a></p>
<h2 id="简单示例">简单示例</h2><p>Spark的DataSource API可以方便地扩展。如果没有使用META-INFO这种ServiceLocator机制，则自定义的数据源名称必须是DefaultSource.<br>并且必须实现RelationProvider接口。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSource</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RelationProvider</span> &#123;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span>(</span>sqlContext: <span class="type">SQLContext</span>,</span><br><span class="line">                              parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span> = &#123;</span><br><span class="line">    ???</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常自定义数据源都有不同的配置文件，所以我们也要实现自己的BaseRelation</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSource</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RelationProvider</span>&#123;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span>(</span>sqlContext: <span class="type">SQLContext</span>, parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span> = &#123;</span><br><span class="line">    <span class="type">EmptyRelation</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyRelation</span>(</span>) <span class="keyword">extends</span> <span class="type">BaseRelation</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span>:</span> <span class="type">SQLContext</span> = ???</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span>:</span> <span class="type">StructType</span> = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要的起始还是BaseRelation的实现类，但是这里怎么获取schema和SQLContext呢。由于DefaultSource的createRelation方法中已经有SQLContext。所以我们可以改成</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSource</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RelationProvider</span>&#123;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span>(</span>sqlContext: <span class="type">SQLContext</span>, parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span> = &#123;</span><br><span class="line">    <span class="type">EmptyRelation</span>()(sqlContext)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyRelation</span>(</span>)(<span class="annotation">@transient</span> <span class="keyword">val</span> sc: <span class="type">SQLContext</span>) <span class="keyword">extends</span> <span class="type">BaseRelation</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span>:</span> <span class="type">SQLContext</span> = sc</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span>:</span> <span class="type">StructType</span> = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么Schema怎么确定呢？通常它需要从DefaultSource的createRelation方法的parameters确定。<br>所以通常我们会给自定义的BaseRelation加上一个参数：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSource</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RelationProvider</span>&#123;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span>(</span>sqlContext: <span class="type">SQLContext</span>, parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span> = &#123;</span><br><span class="line">    <span class="type">EmptyRelation</span>(parameters)(sqlContext)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyRelation</span>(</span>parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>])(<span class="annotation">@transient</span> <span class="keyword">val</span> sc: <span class="type">SQLContext</span>) <span class="keyword">extends</span> <span class="type">BaseRelation</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span>:</span> <span class="type">SQLContext</span> = sc</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span>:</span> <span class="type">StructType</span> = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个schema的具体实现必须依赖于如何读取数据源。所以EmptyRelation还需要实现另外一个接口：TableScan</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyRelation</span>(</span>parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>])</span><br><span class="line">                        (<span class="annotation">@transient</span> <span class="keyword">val</span> sc: <span class="type">SQLContext</span>) </span><br><span class="line">  <span class="keyword">extends</span> <span class="type">BaseRelation</span> <span class="keyword">with</span> <span class="type">TableScan</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span>:</span> <span class="type">SQLContext</span> = sc</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span>:</span> <span class="type">StructType</span> = ???</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span>(</span>): <span class="type">RDD</span>[<span class="type">Row</span>] = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在有两个方法需要我们自己实现。buildScan表示如何读取数据源，并生成<code>RDD[ROW]</code>。<br>下面以一个简单的示例入门：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyRelation</span>(</span>parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>])</span><br><span class="line">                        (<span class="annotation">@transient</span> <span class="keyword">val</span> sc: <span class="type">SQLContext</span>) </span><br><span class="line">  <span class="keyword">extends</span> <span class="type">BaseRelation</span> <span class="keyword">with</span> <span class="type">TableScan</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span>:</span> <span class="type">SQLContext</span> = sc</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span>:</span> <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="type">StructType</span>(<span class="type">List</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"id"</span>, <span class="type">IntegerType</span>), </span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>)</span><br><span class="line">    ))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span>(</span>): <span class="type">RDD</span>[<span class="type">Row</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> rdd = sqlContext.sparkContext.parallelize(</span><br><span class="line">      <span class="type">List</span>(</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"A"</span>, <span class="number">20</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"B"</span>, <span class="number">25</span>)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    rdd.map(row =&gt; <span class="type">Row</span>.fromSeq(<span class="type">Seq</span>(row._1, row._2, row._3)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就可以运行测试例子了：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">object</span> TestExample &#123;</span><br><span class="line"></span><br><span class="line">  def <span class="function">main</span>(args<span class="value">: Array[String]) &#123;</span><br><span class="line">    val spark = SparkSession.<span class="function">builder</span>().<span class="function">master</span>(<span class="string">"local"</span>).<span class="function">getOrCreate</span>()</span><br><span class="line">    val df = spark.read.<span class="function">format</span>(<span class="string">"com.zqh.spark.connectors.test.empty"</span>).<span class="function">load</span>()</span><br><span class="line">    df.<span class="function">printSchema</span>()</span><br><span class="line">    df.<span class="function">show</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>什么，只有40行代码，就实现了自定义的DataSource!!!</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"><span class="code"> |-- id: integer (nullable = true)</span></span><br><span class="line"><span class="code"> |-- name: string (nullable = true)</span></span><br><span class="line"><span class="code"> |-- age: integer (nullable = true)</span></span><br><span class="line"></span><br><span class="line"><span class="code">+---+</span>----<span class="code">+---+</span></span><br><span class="line"><span class="header">| id|name|age|</span><br><span class="line">+---+----+---+</span></span><br><span class="line"><span class="header">|  1|   A| 20|</span><br><span class="line">+---+----+---+</span></span><br></pre></td></tr></table></figure>
<p>上面示例EmptyRelation中，schema方法和buildScan方法有如下特点：</p>
<ul>
<li>schema定义了三个字段，则buildScan中每一行Row都必须有三个元素</li>
<li>RDD的每一行Row是数据，而schema对应了数据的元数据，schema可以任意指定</li>
</ul>
<p>总结下自定义数据源相关的类：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RelationProvider                  BaseRelation    TableScan</span><br><span class="line">       /|<span class="string">\                            /</span>|<span class="string">\            /</span>|<span class="string">\                   spark</span><br><span class="line">        </span>|<span class="string">                              </span>|<span class="string">              </span>|<span class="string">        ------------------</span><br><span class="line">        </span>|<span class="string">                              </span>|<span class="string">              </span>|<span class="string">                    user</span><br><span class="line">        </span>|<span class="string">                           schema()     buildScan()    </span><br><span class="line">DefaultSource                          </span>|<span class="string">              </span>|</span><br><span class="line">        |<span class="string">                              </span>|<span class="string">              </span>|</span><br><span class="line">        |<span class="string">                              </span>|<span class="string">              </span>|</span><br><span class="line">        ·                              |<span class="string">              </span>|</span><br><span class="line">createRelation()  --------------------&gt; EmptyRelation</span><br></pre></td></tr></table></figure>
<h2 id="JDBC_DataSource">JDBC DataSource</h2><p>开启mysql的查询日志，对应的日志文件是<code>/usr/local/var/mysql/zqhmac.log</code>：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set GLOBAL general<span class="emphasis">_log = on;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line"></span><span class="header">mysql&gt; show VARIABLES like '%general_log%';</span><br><span class="line">+------------------+---------------------------------+</span></span><br><span class="line"><span class="header">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span></span><br><span class="line">| general<span class="emphasis">_log      | ON                              |</span><br><span class="line">| general_</span>log<span class="emphasis">_file | /usr/local/var/mysql/zqhmac.log |</span><br><span class="line">+------------------+---------------------------------+</span></span><br></pre></td></tr></table></figure>
<p>spark读取jdbc有多种方式：</p>
<h3 id="1-_全量读取，只有一个分区">1. 全量读取，只有一个分区</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">val</span> url</span> = <span class="string">"jdbc:mysql://localhost/test"</span></span><br><span class="line"><span class="variable"><span class="keyword">val</span> table</span> = <span class="string">"test"</span></span><br><span class="line"><span class="variable"><span class="keyword">val</span> properties</span> = new java.util.Properties</span><br><span class="line">properties.put(<span class="string">"user"</span>, <span class="string">"root"</span>)</span><br><span class="line">properties.put(<span class="string">"password"</span>, <span class="string">"root"</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">val</span> df</span> = spark.read.jdbc(url, table, properties)</span><br><span class="line"></span><br><span class="line">df.rdd.partitions.size # <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2008</span> Query SELECT <span class="escape">`i</span>d<span class="escape">`,</span><span class="escape">`n</span>ame<span class="escape">`,</span><span class="escape">`t</span>otal<span class="escape">` </span>FROM test</span><br></pre></td></tr></table></figure>
<p>Spark UI上可以看到只有一个Executor和一个Task：</p>
<p><img src="http://img.blog.csdn.net/20171019193301335" alt="jdbc spark"></p>
<p>如果数据量太大，就会报错OOM：</p>
<p><img src="http://img.blog.csdn.net/20171019193323001" alt="oom"></p>
<h3 id="2-_指定上下界，自动分片">2. 指定上下界，自动分片</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">val</span> columnName</span> = <span class="string">"id"</span></span><br><span class="line"><span class="variable"><span class="keyword">val</span> lowerBound</span> = <span class="number">1</span></span><br><span class="line"><span class="variable"><span class="keyword">val</span> upperBound</span> = <span class="number">1000</span></span><br><span class="line"><span class="variable"><span class="keyword">val</span> numPartitions</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">val</span> df</span> = spark.read.jdbc(url,table,columnName,lowerBound,upperBound,numPartitions,properties)</span><br><span class="line"></span><br><span class="line">df.rdd.partitions.size # 指定的分区数量</span><br></pre></td></tr></table></figure>
<p>指定上下界有个限制条件是分区字段必须是整数类型：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jdbc</span></span>(</span><br><span class="line">    <span class="symbol">url:</span> <span class="constant">String,</span></span><br><span class="line">    <span class="symbol">table:</span> <span class="constant">String,</span></span><br><span class="line">    <span class="symbol">columnName:</span> <span class="constant">String,</span></span><br><span class="line">    <span class="symbol">lowerBound:</span> <span class="constant">Long,</span></span><br><span class="line">    <span class="symbol">upperBound:</span> <span class="constant">Long,</span></span><br><span class="line">    <span class="symbol">numPartitions:</span> <span class="constant">Int,</span></span><br><span class="line">    <span class="symbol">connectionProperties:</span> <span class="constant">Properties)</span><span class="symbol">:</span> <span class="constant">DataFrame </span>= &#123;</span><br><span class="line">  <span class="regexp">//</span> columnName, lowerBound, upperBound <span class="keyword">and</span> numPartitions override settings <span class="keyword">in</span> extraOptions.</span><br><span class="line">  this.extraOptions ++= <span class="constant">Map(</span></span><br><span class="line">    <span class="constant">JDBCOptions.JDBC_PARTITION_COLUMN </span>-&gt; columnName,</span><br><span class="line">    <span class="constant">JDBCOptions.JDBC_LOWER_BOUND </span>-&gt; lowerBound.toString,</span><br><span class="line">    <span class="constant">JDBCOptions.JDBC_UPPER_BOUND </span>-&gt; upperBound.toString,</span><br><span class="line">    <span class="constant">JDBCOptions.JDBC_NUM_PARTITIONS </span>-&gt; numPartitions.toString)</span><br><span class="line">  jdbc(url, table, connectionProperties)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spark的做法是根据上下界，分区个数，自动切分。这种场景主要针对数据库的主键是自增字段（当然是整数了）。</p>
<p>因为自增的数字分布很均匀，所以给定上下界和分区的数量，每个分区拉取的数据也是很均匀的。</p>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2010 Query <span class="operator"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &lt; <span class="number">201</span> <span class="keyword">or</span> <span class="keyword">id</span> <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="number">2011</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= <span class="number">201</span> <span class="keyword">AND</span> <span class="keyword">id</span> &lt; <span class="number">401</span></span><br><span class="line"><span class="number">2012</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= <span class="number">401</span> <span class="keyword">AND</span> <span class="keyword">id</span> &lt; <span class="number">601</span></span><br><span class="line"><span class="number">2013</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= <span class="number">601</span> <span class="keyword">AND</span> <span class="keyword">id</span> &lt; <span class="number">801</span></span><br><span class="line"><span class="number">2014</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= <span class="number">801</span></span></span><br></pre></td></tr></table></figure>
<h3 id="3-_手动构造predicates">3. 手动构造predicates</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">val</span> predicates</span> = Array(</span><br><span class="line">  <span class="string">"id&gt;=0 and id&lt;10"</span>,</span><br><span class="line">  <span class="string">"id&gt;=10 and id&lt;100"</span>,</span><br><span class="line">  <span class="string">"id&gt;=100 and id&lt;1000"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">val</span> df</span> = spark.read.jdbc(url, table, predicates, properties)</span><br><span class="line"></span><br><span class="line">df.rdd.partitions.size # <span class="number">3</span>，predicates数组有几个，对应几个分区</span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2016 Query <span class="operator"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">10</span></span><br><span class="line"><span class="number">2017</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">10</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">100</span></span><br><span class="line"><span class="number">2018</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">100</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">1000</span></span></span><br></pre></td></tr></table></figure>
<p>如果数据分布不均匀，可以采用这种方式，而且这种方式不限于主键、整数类型，可以是任意类型，任意字段。</p>
<p>比如我们的测试mysql表数据如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select <span class="keyword">*</span> from test;</span><br><span class="line">+-----+------+-------+</span><br><span class="line">|<span class="string"> id  </span>|<span class="string"> name </span>|<span class="string"> total </span>|</span><br><span class="line">+-----+------+-------+</span><br><span class="line">|<span class="string">   1 </span>|<span class="string"> A    </span>|<span class="string">     1 </span>|</span><br><span class="line">|<span class="string">   2 </span>|<span class="string"> B    </span>|<span class="string">     2 </span>|</span><br><span class="line">|<span class="string">   3 </span>|<span class="string"> C    </span>|<span class="string">     3 </span>|</span><br><span class="line">|<span class="string">  11 </span>|<span class="string"> A    </span>|<span class="string">    12 </span>|</span><br><span class="line">|<span class="string">  12 </span>|<span class="string"> B    </span>|<span class="string">    12 </span>|</span><br><span class="line">|<span class="string">  13 </span>|<span class="string"> C    </span>|<span class="string">    12 </span>|</span><br><span class="line">|<span class="string"> 100 </span>|<span class="string"> 1    </span>|<span class="string">     0 </span>|</span><br><span class="line">|<span class="string"> 101 </span>|<span class="string"> 2    </span>|<span class="string">     1 </span>|</span><br><span class="line">|<span class="string"> 102 </span>|<span class="string"> 2    </span>|<span class="string">     1 </span>|</span><br><span class="line">+-----+------+-------+</span><br></pre></td></tr></table></figure>
<p>现在要根据name列进行手动指定查询方式:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val predicates = Array(</span><br><span class="line">  <span class="string">"name = 'A'"</span>,</span><br><span class="line">  <span class="string">"name = 'B'"</span>,</span><br><span class="line">  <span class="string">"name = 'C'"</span>,</span><br><span class="line">  <span class="string">"name in('1','2')"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val df = spark<span class="class">.read</span><span class="class">.jdbc</span>(url, <span class="tag">table</span>, predicates, properties)</span><br><span class="line"></span><br><span class="line">df.show</span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020 Query <span class="operator"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'A'</span></span><br><span class="line"><span class="number">2022</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'C'</span></span><br><span class="line"><span class="number">2023</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'B'</span></span><br><span class="line"><span class="number">2021</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`total`</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">in</span>(<span class="string">'1'</span>,<span class="string">'2'</span>)</span></span><br></pre></td></tr></table></figure>
<p>由于是自定义查询条件，所以我们可以使用任何方式，比如limit方法：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val predicates = Array(</span><br><span class="line">  <span class="string">"1=1 order by name limit 3 offset 0"</span>,</span><br><span class="line">  <span class="string">"1=1 order by name limit 3 offset 3"</span>,</span><br><span class="line">  <span class="string">"1=1 order by name limit 3 offset 6"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val df = spark<span class="class">.read</span><span class="class">.jdbc</span>(url, <span class="tag">table</span>, predicates, properties)</span><br><span class="line">df.count</span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2025 Query <span class="operator"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">3</span></span><br><span class="line"><span class="number">2026</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">6</span></span><br><span class="line"><span class="number">2027</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">0</span></span></span><br></pre></td></tr></table></figure>
<p>动态指定排序字段和个数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val orderByColumn = <span class="string">"name"</span></span><br><span class="line">val <span class="built_in">limit</span>Count = <span class="number">3</span></span><br><span class="line">val predicates = Array(</span><br><span class="line">  s<span class="string">"1=1 order by <span class="variable">$orderByColumn</span> limit <span class="variable">$limitCount</span> offset 0"</span>,</span><br><span class="line">  s<span class="string">"1=1 order by <span class="variable">$orderByColumn</span> limit <span class="variable">$limitCount</span> offset <span class="variable">$&#123;limitCount&#125;</span>"</span>,</span><br><span class="line">  s<span class="string">"1=1 order by <span class="variable">$orderByColumn</span> limit <span class="variable">$limitCount</span> offset <span class="variable">$&#123;limitCount*2&#125;</span>"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val df = spark.read.jdbc(url, table, predicates, properties)</span><br><span class="line">df.count</span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2030 Query <span class="operator"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">3</span></span><br><span class="line"><span class="number">2029</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">0</span></span><br><span class="line"><span class="number">2031</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">6</span></span></span><br></pre></td></tr></table></figure>
<p>当然上面的predicates还是不够智能，正确的做法是先查询总数，然后根据limitCount构造predicates数组。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val orderByColumn = "name"</span><br><span class="line">val limitCount = 3</span><br><span class="line">//val totalCount = spark.read.jdbc(url, table, properties).count  // 日志：<span class="operator"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span></span><br><span class="line">val countDF = spark.<span class="keyword">read</span>.jdbc(<span class="keyword">url</span>, s<span class="string">"(select count(*) from $table) tmp"</span>, properties) // <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">test</span>) tmp <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">0</span></span><br><span class="line">val totalCount = countDF.take(<span class="number">1</span>)(<span class="number">0</span>).getAs[<span class="keyword">Long</span>](<span class="number">0</span>) // <span class="keyword">SELECT</span> <span class="string">`count(*)`</span> <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">test</span>) tmp</span><br><span class="line"></span><br><span class="line">val <span class="keyword">split</span> = totalCount / limitCount</span><br><span class="line">val predicates = <span class="keyword">for</span>(<span class="keyword">i</span> &lt;- <span class="number">0</span><span class="keyword">l</span> <span class="keyword">to</span> <span class="keyword">split</span>) yield s<span class="string">"1=1 order by $orderByColumn limit $limitCount offset $&#123;limitCount * i&#125;"</span></span><br><span class="line">val df = spark.<span class="keyword">read</span>.jdbc(<span class="keyword">url</span>, <span class="keyword">table</span>, predicates.toArray, properties)</span><br><span class="line">df.<span class="keyword">count</span></span></span><br></pre></td></tr></table></figure>
<p>后台日志：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2050 Query <span class="operator"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">0</span></span><br><span class="line"><span class="number">2051</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">6</span></span><br><span class="line"><span class="number">2052</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">3</span></span><br><span class="line"><span class="number">2053</span> <span class="keyword">Query</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">9</span></span></span><br></pre></td></tr></table></figure>
<h2 id="JDBC实现">JDBC实现</h2><p>spark.read.jdbc进入DataFrameReader，真正执行在load()方法中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(paths: String*)</span>:</span> DataFrame = &#123;</span><br><span class="line">  sparkSession.baseRelationToDataFrame(</span><br><span class="line">    DataSource.apply(</span><br><span class="line">      sparkSession,</span><br><span class="line">      paths = paths,</span><br><span class="line">      userSpecifiedSchema = userSpecifiedSchema,</span><br><span class="line">      className = source,</span><br><span class="line">      options = extraOptions.toMap).resolveRelation())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDBC格式对应的Provider就定义在DataSource中：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataSource</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Logging</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> backwardCompatibilityMap: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> jdbc = classOf[<span class="type">JdbcRelationProvider</span>].getCanonicalName</span><br><span class="line">    <span class="keyword">val</span> json = classOf[<span class="type">JsonFileFormat</span>].getCanonicalName</span><br><span class="line">    <span class="keyword">val</span> csv = classOf[<span class="type">CSVFileFormat</span>].getCanonicalName</span><br><span class="line">    <span class="type">Map</span>(</span><br><span class="line">      <span class="string">"org.apache.spark.sql.jdbc"</span> -&gt; jdbc,</span><br><span class="line">      <span class="string">"org.apache.spark.sql.json"</span> -&gt; json,</span><br><span class="line">      <span class="string">"com.databricks.spark.csv"</span> -&gt; csv</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>jdbc数据源的定义类是：JdbcRelationProvider</p>
<h2 id="JDBC扩展">JDBC扩展</h2><p>参考: <a href="http://blog.csdn.net/cjuexuan/article/details/52333970" target="_blank" rel="external">http://blog.csdn.net/cjuexuan/article/details/52333970</a></p>
<p>category是唯一键，存在则更新num，不存在则插入category,num。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ip_category_count</span><br><span class="line">(<span class="keyword">category</span>,<span class="keyword">num</span>,createTime)</span><br><span class="line"><span class="keyword">VALUES</span>(?,?,<span class="keyword">CURRENT_TIMESTAMP</span>)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">num</span>=?,updateTime=<span class="keyword">CURRENT_TIMESTAMP</span></span></span><br></pre></td></tr></table></figure>
<p>对应的Statemen写法， set时从1开始，get时从0开始：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps.<span class="function"><span class="title">setInt</span><span class="params">(<span class="number">1</span>, row.getInt(<span class="number">0</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setLong</span><span class="params">(<span class="number">2</span>, row.getLong(<span class="number">1</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setLong</span><span class="params">(<span class="number">3</span>, row.getLong(<span class="number">1</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">executeUpdate</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>假设有下面的SQL：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test_1 (<span class="escape">`i</span>d<span class="escape">`,</span><span class="escape">`y</span>ear<span class="escape">`,</span>count<span class="escape">`)</span> VALUES (?,?,?)</span><br><span class="line">ON DUPLICATE KEY UPDATE <span class="escape">`i</span>d<span class="escape">`=</span>?,<span class="escape">`y</span>ear<span class="escape">`=</span>?,<span class="escape">`c</span>ount<span class="escape">`=</span>?</span><br></pre></td></tr></table></figure>
<p>对应的写法：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps.<span class="function"><span class="title">setInt</span><span class="params">(<span class="number">1</span>, row.getInt(<span class="number">0</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setString</span><span class="params">(<span class="number">2</span>, row.getLong(<span class="number">1</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setLong</span><span class="params">(<span class="number">3</span>, row.getLong(<span class="number">2</span>)</span></span>)</span><br><span class="line">-------------------------------</span><br><span class="line">ps.<span class="function"><span class="title">setInt</span><span class="params">(<span class="number">4</span>, row.getInt(<span class="number">0</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setString</span><span class="params">(<span class="number">5</span>, row.getLong(<span class="number">1</span>)</span></span>)</span><br><span class="line">ps.<span class="function"><span class="title">setLong</span><span class="params">(<span class="number">6</span>, row.getLong(<span class="number">2</span>)</span></span>)</span><br></pre></td></tr></table></figure>
<p>总结出来的规则：<code>stmt.setInt(pos + 1, row.getInt(pos - offset))</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. i&lt;midField,  <span class="attribute">position</span>=<span class="tag">i</span>, offset=<span class="number">0</span>        =&gt; stmt.<span class="function"><span class="title">setInt</span><span class="params">(i + <span class="number">1</span>, row.getInt(i - <span class="number">0</span>)</span></span>)</span><br><span class="line"><span class="number">2</span>. i&gt;=midField, <span class="attribute">position</span>=<span class="tag">i</span>, offset=midField =&gt; stmt.<span class="function"><span class="title">setInt</span><span class="params">(i + <span class="number">1</span>, row.getInt(i - midField)</span></span>)</span><br></pre></td></tr></table></figure>
<p>以3个字段为例，当<code>i&lt;midField</code>时：</p>
<ul>
<li>i=0: stmt.setInt(0 + 1, row.getInt(0 - 0)), stmt.setInt(1, row.getInt(0))</li>
<li>i=1: stmt.setInt(1 + 1, row.getInt(1 - 0)), stmt.setInt(2, row.getInt(1))</li>
<li>i=2: stmt.setInt(2 + 1, row.getInt(2 - 0)), stmt.setInt(3, row.getInt(2))</li>
</ul>
<p>当<code>i&gt;=midField</code>时：</p>
<ul>
<li>i=3: stmt.setInt(3 + 1, row.getInt(3 - 3)), stmt.setInt(3, row.getInt(0))</li>
<li>i=4: stmt.setInt(4 + 1, row.getInt(4 - 3)), stmt.setInt(4, row.getInt(1))</li>
<li>i=5: stmt.setInt(5 + 1, row.getInt(5 - 3)), stmt.setInt(5, row.getInt(2))</li>
</ul>
<p>setter方法的第一个参数：index of setter，第二个参数：index of row。<br>比如对于i小于midField而言，get的位置等于索引减去0；i大于midField而言，get的位置等于索引减去3。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">row[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">setter(<span class="number">0</span>)    =》 <span class="built_in">set</span>(<span class="number">0</span>+<span class="number">1</span>, get(<span class="number">0</span>-<span class="number">0</span>))    =》 <span class="built_in">set</span>(<span class="number">1</span>, get(<span class="number">0</span>))</span><br><span class="line">setter(<span class="number">1</span>)    =》 <span class="built_in">set</span>(<span class="number">1</span>+<span class="number">1</span>, get(<span class="number">1</span>-<span class="number">0</span>))    =》 <span class="built_in">set</span>(<span class="number">2</span>, get(<span class="number">1</span>))</span><br><span class="line">setter(<span class="number">2</span>)    =》 <span class="built_in">set</span>(<span class="number">2</span>+<span class="number">1</span>, get(<span class="number">2</span>-<span class="number">0</span>))    =》 <span class="built_in">set</span>(<span class="number">3</span>, get(<span class="number">2</span>))</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">setter(<span class="number">3</span>)    =》 <span class="built_in">set</span>(<span class="number">3</span>+<span class="number">1</span>, get(<span class="number">3</span>-<span class="number">3</span>))    =》 <span class="built_in">set</span>(<span class="number">4</span>, get(<span class="number">0</span>))</span><br><span class="line">setter(<span class="number">4</span>)    =》 <span class="built_in">set</span>(<span class="number">4</span>+<span class="number">1</span>, get(<span class="number">4</span>-<span class="number">3</span>))    =》 <span class="built_in">set</span>(<span class="number">5</span>, get(<span class="number">1</span>))</span><br><span class="line">setter(<span class="number">5</span>)    =》 <span class="built_in">set</span>(<span class="number">5</span>+<span class="number">1</span>, get(<span class="number">5</span>-<span class="number">3</span>))    =》 <span class="built_in">set</span>(<span class="number">6</span>, get(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> length = rddSchema.fields.length</span><br><span class="line"><span class="keyword">val</span> numFields = <span class="keyword">if</span> (isUpdateMode) length * <span class="number">2</span> <span class="keyword">else</span> length <span class="comment">// real num Field length</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> midField = numFields / <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; numFields) &#123;</span><br><span class="line">  <span class="comment">//if duplicate ,'?' size = 2 * row.field.length</span></span><br><span class="line">  <span class="keyword">if</span> (isUpdateMode) &#123; <span class="comment">// 更新模式</span></span><br><span class="line">    i &lt; midField <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="comment">// check midField &gt; i ,if midFiled &gt;i ,rowIndex is setterIndex - (setterIndex/2) + 1</span></span><br><span class="line">      <span class="keyword">case</span> <span class="literal">true</span> ⇒ <span class="comment">// insert部分</span></span><br><span class="line">        <span class="keyword">if</span> (row.isNullAt(i)) &#123;</span><br><span class="line">          stmt.setNull(i + <span class="number">1</span>, nullTypes(i))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setters(i).apply(stmt, row, i, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">false</span> ⇒ <span class="comment">// update部分</span></span><br><span class="line">        <span class="keyword">if</span> (row.isNullAt(i - midField)) &#123;</span><br><span class="line">          stmt.setNull(i + <span class="number">1</span>, nullTypes(i - midField))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setters(i).apply(stmt, row, i, midField)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 直接插入</span></span><br><span class="line">    <span class="keyword">if</span> (row.isNullAt(i)) &#123;</span><br><span class="line">      stmt.setNull(i + <span class="number">1</span>, nullTypes(i))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setters(i).apply(stmt, row, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结下对应关系：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setter[i]:  |<span class="string"> 0 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 5 </span>|</span><br><span class="line">position:   |<span class="string"> 0 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 5 </span>|</span><br><span class="line">offset:     |<span class="string"> 0 </span>|<span class="string"> 0 </span>|<span class="string"> 0 </span>|<span class="string"> 3 </span>|<span class="string"> 3 </span>|<span class="string"> 3 </span>|</span><br><span class="line">setXXX:     |<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 5 </span>|<span class="string"> 6 </span>|<span class="string">   i+1</span><br><span class="line">getXXX:     </span>|<span class="string"> 0 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 0 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string">   position-offset</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark数据源扩展与实践(40行代码实现一个自定义的DataSource)&lt;br&gt;
    
    </summary>
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/categories/spark/"/>
    
    
      <category term="hadoop" scheme="http://github.com/zqhxuyuan/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>StreamingPro</title>
    <link href="http://github.com/zqhxuyuan/2017/09/04/2017-09-04-StreamingPro/"/>
    <id>http://github.com/zqhxuyuan/2017/09/04/2017-09-04-StreamingPro/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2017-09-05T13:14:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/allwefantasy/streamingpro/">https://github.com/allwefantasy/streamingpro/</a><br><a id="more"></a></p>
<p>单个Job的配置示例：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">you-first-streaming-job</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">desc</span>": <span class="value"><span class="string">"just a example"</span></span>,</span><br><span class="line">    "<span class="attribute">strategy</span>": <span class="value"><span class="string">"spark"</span></span>,</span><br><span class="line">    "<span class="attribute">algorithm</span>": <span class="value">[]</span>,</span><br><span class="line">    "<span class="attribute">ref</span>": <span class="value">[</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">compositor</span>": <span class="value">[</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.sources"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">format</span>": <span class="value"><span class="string">"socket"</span></span>,</span><br><span class="line">            "<span class="attribute">outputTable</span>": <span class="value"><span class="string">"test"</span></span>,</span><br><span class="line">            "<span class="attribute">port</span>": <span class="value"><span class="string">"9999"</span></span>,</span><br><span class="line">            "<span class="attribute">host</span>": <span class="value"><span class="string">"localhost"</span></span>,</span><br><span class="line">            "<span class="attribute">path</span>": <span class="value"><span class="string">"-"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.sql"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">sql</span>": <span class="value"><span class="string">"select avg(value) avgAge from test"</span></span>,</span><br><span class="line">            "<span class="attribute">outputTableName</span>": <span class="value"><span class="string">"test3"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.sql"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">sql</span>": <span class="value"><span class="string">"select count(value) as nameCount from test"</span></span>,</span><br><span class="line">            "<span class="attribute">outputTableName</span>": <span class="value"><span class="string">"test1"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.sql"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">sql</span>": <span class="value"><span class="string">"select sum(value) ageSum from test"</span></span>,</span><br><span class="line">            "<span class="attribute">outputTableName</span>": <span class="value"><span class="string">"test2"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.sql"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">sql</span>": <span class="value"><span class="string">"select * from test1 union select * from test2 union select * from test3"</span></span>,</span><br><span class="line">            "<span class="attribute">outputTableName</span>": <span class="value"><span class="string">"test4"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"stream.outputs"</span></span>,</span><br><span class="line">        "<span class="attribute">params</span>": <span class="value">[</span><br><span class="line">          &#123;</span><br><span class="line">            "<span class="attribute">name</span>": <span class="value"><span class="string">"jack"</span></span>,</span><br><span class="line">            "<span class="attribute">format</span>": <span class="value"><span class="string">"console"</span></span>,</span><br><span class="line">            "<span class="attribute">path</span>": <span class="value"><span class="string">"-"</span></span>,</span><br><span class="line">            "<span class="attribute">inputTableName</span>": <span class="value"><span class="string">"test4"</span></span>,</span><br><span class="line">            "<span class="attribute">mode</span>": <span class="value"><span class="string">"Overwrite"</span></span><br><span class="line">          </span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      </span>&#125;</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">configParams</span>": <span class="value">&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>多个Job的配置示例：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   "<span class="attribute">you-first-streaming-job</span>": <span class="value">&#123;</span><br><span class="line">     "<span class="attribute">desc</span>": <span class="value"><span class="string">"just a example"</span></span>,</span><br><span class="line">     "<span class="attribute">strategy</span>": <span class="value"><span class="string">"spark"</span></span>,</span><br><span class="line">     "<span class="attribute">algorithm</span>": <span class="value">[]</span>,</span><br><span class="line">     "<span class="attribute">ref</span>": <span class="value">[</span><br><span class="line">     ]</span>,</span><br><span class="line">     "<span class="attribute">compositor</span>": <span class="value">[</span><br><span class="line">     ]</span>,</span><br><span class="line">     "<span class="attribute">configParams</span>": <span class="value">&#123;</span><br><span class="line">     &#125;</span><br><span class="line">   </span>&#125;</span>,</span><br><span class="line">   "<span class="attribute">you-second-streaming-job</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">desc</span>": <span class="value"><span class="string">"just a example"</span></span>,</span><br><span class="line">        "<span class="attribute">strategy</span>": <span class="value"><span class="string">"spark"</span></span>,</span><br><span class="line">        "<span class="attribute">algorithm</span>": <span class="value">[]</span>,</span><br><span class="line">        "<span class="attribute">ref</span>": <span class="value">[</span><br><span class="line">        ]</span>,</span><br><span class="line">        "<span class="attribute">compositor</span>": <span class="value">[</span><br><span class="line">        ]</span>,</span><br><span class="line">        "<span class="attribute">configParams</span>": <span class="value">&#123;</span><br><span class="line">        &#125;</span><br><span class="line">      </span>&#125;</span><br><span class="line"> </span>&#125;</span><br></pre></td></tr></table></figure>
<p>StreamingPro支持Spark、SparkStreaming、SparkStruncture、Flink。入口类都是统一的<code>StreamingApp</code>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StreamingApp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span>(</span>args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> params = <span class="keyword">new</span> <span class="type">ParamsUtil</span>(args)</span><br><span class="line">    require(params.hasParam(<span class="string">"streaming.name"</span>), <span class="string">"Application name should be set"</span>)</span><br><span class="line">    <span class="type">PlatformManager</span>.getOrCreate.run(params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过streaming.platform可以指定不同的运行平台。当然，不同的运行引擎的jar包也不同。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SHome=/Users/allwefantasy/streamingpro</span><br><span class="line"></span><br><span class="line">./bin/spark-submit   --class streaming.core.StreamingApp \</span><br><span class="line">--master <span class="built_in">local</span>[<span class="number">2</span>] \</span><br><span class="line">--name <span class="built_in">test</span> \</span><br><span class="line"><span class="variable">$SHome</span>/streamingpro-spark-<span class="number">2.0</span>-<span class="number">0.4</span>.<span class="number">15</span>-SNAPSHOT.jar    \</span><br><span class="line">-streaming.name <span class="built_in">test</span>    \</span><br><span class="line">-streaming.platform spark_streaming \</span><br><span class="line">-streaming.job.file.path file://<span class="variable">$SHome</span>/spark-streaming.json</span><br><span class="line"></span><br><span class="line">bin/flink run -c streaming.core.StreamingApp \ </span><br><span class="line">/Users/allwefantasy/streamingpro/streamingpro.flink-<span class="number">0.4</span>.<span class="number">14</span>-SNAPSHOT-online-<span class="number">1.2</span>.<span class="number">0</span>.jar \</span><br><span class="line">-streaming.name god \</span><br><span class="line">-streaming.platform flink_streaming \</span><br><span class="line">-streaming.job.file.path file:///Users/allwefantasy/streamingpro/flink.json</span><br></pre></td></tr></table></figure>
<p>jar包会被用来加载不同的Runtime。Runtime运行的映射关系定义在<code>PlatformManager</code>的<code>platformNameMapping</code>变量中。<br>Runtime是一个接口，最主要的是startRuntime方法和params方法。后面我们把Runtime叫做<strong>执行引擎</strong>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">StreamingRuntime</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">startRuntime</span>:</span> <span class="type">StreamingRuntime</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroyRuntime</span>(</span>stopGraceful: <span class="type">Boolean</span>, stopContext: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">streamingRuntimeInfo</span>:</span> <span class="type">StreamingRuntimeInfo</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">resetRuntimeOperator</span>(</span>runtimeOperator: <span class="type">RuntimeOperator</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configureStreamingRuntimeInfo</span>(</span>streamingRuntimeInfo: <span class="type">StreamingRuntimeInfo</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">awaitTermination</span></span><br><span class="line"></span>  <span class="function"><span class="keyword">def</span> <span class="title">startThriftServer</span></span><br><span class="line"></span>  <span class="function"><span class="keyword">def</span> <span class="title">startHttpServer</span></span><br><span class="line"></span>  <span class="function"><span class="keyword">def</span> <span class="title">params</span>:</span> <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StreamingPro本质上还是通过spark-submit运行。框架的整体运行流程在<code>PlatformManager</code>的<code>run</code>方法中。主要的步骤有：</p>
<ol>
<li>设置配置信息</li>
<li>根据反射机制，创建并获取运行时环境</li>
<li>获取dispatcher以及所有的strategies</li>
<li>启动REST服务、Thrift服务、注册ZK（可选）</li>
<li>启动执行引擎，并等待作业完成</li>
</ol>
<blockquote>
<p>关于Dispatcher、Strategy的概念，参考作者的ServiceframeworkDispatcher项目。<br>反射创建执行引擎，调用的是对应Object类的getOrCreate方法，并传入params参数，最后实例化为StreamingRuntime。</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">platformNameMapping</span> =</span> <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">  <span class="type">SPAKR_S_S</span> -&gt; <span class="string">"streaming.core.strategy.platform.SparkStructuredStreamingRuntime"</span>,</span><br><span class="line">  <span class="type">SPAKR_STRUCTURED_STREAMING</span> -&gt; <span class="string">"streaming.core.strategy.platform.SparkStructuredStreamingRuntime"</span>,</span><br><span class="line">  <span class="type">FLINK_STREAMING</span> -&gt; <span class="string">"streaming.core.strategy.platform.FlinkStreamingRuntime"</span>,</span><br><span class="line">  <span class="type">SPAKR_STREAMING</span> -&gt; <span class="string">"streaming.core.strategy.platform.SparkStreamingRuntime"</span>,</span><br><span class="line">  <span class="type">SPARK</span> -&gt; <span class="string">"streaming.core.strategy.platform.SparkRuntime"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>注意：StreamingPro的Runtime只是Spark作业的执行引擎，具体根据配置文件加载策略是ServiceframeworkDispatcher的工作。<br>假设我们定义了下面的一个配置文件，由于采用了shortName，需要定义一个ShortNameMapping</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"convert-multi-csv-to-json"</span>: &#123;</span><br><span class="line">    <span class="string">"desc"</span>: <span class="string">"测试"</span>,</span><br><span class="line">    <span class="string">"strategy"</span>: <span class="string">"spark"</span>,</span><br><span class="line">    <span class="string">"algorithm"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"testProcessor"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ref"</span>: [],</span><br><span class="line">    <span class="string">"compositor"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"testCompositor"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"configParams"</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DefaultShortNameMapping的定义如下。这样配置文件中的spark就和ServiceframeworkDispatcher的加载过程对应起来了。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultShortNameMapping</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">ShortNameMapping</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> compositorNameMap: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">    <span class="string">"spark"</span> -&gt; <span class="string">"serviceframework.dispatcher.test.DefaultStrategy"</span>,</span><br><span class="line">    <span class="string">"testProcessor"</span> -&gt; <span class="string">"serviceframework.dispatcher.test.TestProcessor"</span>,</span><br><span class="line">    <span class="string">"testCompositor"</span> -&gt; <span class="string">"serviceframework.dispatcher.test.TestCompositor"</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">forName</span>(</span>shortName: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (compositorNameMap.contains(shortName)) compositorNameMap(shortName)</span><br><span class="line">    <span class="keyword">else</span> shortName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ServiceframeworkDispatcher的核心是StrategyDispatcher，这个类在创建的时候，会读取配置文件。<br>然后解析配置文件中的strategy、algorithm(processor)、ref、compositor、configParams等配置项，并构造对应的对象。<br>ServiceframeworkDispatcher是一个模块组合框架，它主要定义了Compositor、Processor、Strategy三个接口。</p>
<p>Strategy接口包含了processor、ref、compositor，以及初始化和result方法。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Strategy</span>[</span><span class="type">T</span>] <span class="keyword">extends</span> <span class="type">ServiceInj</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">processor</span>:</span><span class="type">JList</span>[<span class="type">Processor</span>[<span class="type">T</span>]]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ref</span>:</span><span class="type">JList</span>[<span class="type">Strategy</span>[<span class="type">T</span>]]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">compositor</span>:</span><span class="type">JList</span>[<span class="type">Compositor</span>[<span class="type">T</span>]]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span>:</span><span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(</span>name:<span class="type">String</span>,alg:<span class="type">JList</span>[<span class="type">Processor</span>[<span class="type">T</span>]],ref:<span class="type">JList</span>[<span class="type">Strategy</span>[<span class="type">T</span>]],com:<span class="type">JList</span>[<span class="type">Compositor</span>[<span class="type">T</span>]],params:<span class="type">JMap</span>[<span class="type">Any</span>,<span class="type">Any</span>])</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">result</span>(</span>params:<span class="type">JMap</span>[<span class="type">Any</span>,<span class="type">Any</span>]):<span class="type">JList</span>[<span class="type">T</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configParams</span>:</span>util.<span class="type">Map</span>[<span class="type">Any</span>, <span class="type">Any</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span> =</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Strategy策略的初始化需要算法、引用、组合器，以及配置信息，对应的方法是StrategyDispatcher的createStrategy方法。</p>
<p>注意下面的initialize方法，createAlgorithms和createCompositors初始化时<br>会读取params配置，这是一个嵌套了Map的列表：<code>JList[JMap[String, Any]]</code>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createStrategy</span>(</span>name: <span class="type">String</span>, desc: <span class="type">JMap</span>[_, _]): <span class="type">Option</span>[<span class="type">Strategy</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (_strategies.contains(name)) <span class="keyword">return</span> <span class="type">None</span>;</span><br><span class="line">  <span class="comment">// 实例化策略，如果有shortName，则先获取fullName，并通过Class.forName实例化具体的策略类</span></span><br><span class="line">  <span class="keyword">val</span> strategy = <span class="type">Class</span>.forName(shortNameMapping.forName(desc.get(<span class="string">"strategy"</span>).asInstanceOf[<span class="type">String</span>])).newInstance().asInstanceOf[<span class="type">Strategy</span>[<span class="type">T</span>]]</span><br><span class="line">  <span class="comment">// 读取配置信息，并实例化为Map[Any,Any]</span></span><br><span class="line">  <span class="keyword">val</span> configParams: <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>] = <span class="keyword">if</span> (desc.containsKey(<span class="string">"configParams"</span>)) desc.get(<span class="string">"configParams"</span>).asInstanceOf[<span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>]] <span class="keyword">else</span> <span class="keyword">new</span> java.util.<span class="type">HashMap</span>()</span><br><span class="line">  <span class="comment">// 初始化策略，需要创建算法、引用、组合器</span></span><br><span class="line">  strategy.initialize(name, createAlgorithms(desc), createRefs(desc), createCompositors(desc), configParams)</span><br><span class="line">  _strategies.put(name, strategy)</span><br><span class="line">  <span class="type">Option</span>(strategy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建算法。一个策略由0个或者多个算法提供结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">createAlgorithms</span>(</span>jobJMap: <span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">JList</span>[<span class="type">Processor</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (!jobJMap.contains(<span class="string">"algorithm"</span>) &amp;&amp; !jobJMap.contains(<span class="string">"processor"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">AList</span>[<span class="type">Processor</span>[<span class="type">T</span>]]()</span><br><span class="line">  <span class="keyword">val</span> processors = <span class="keyword">if</span> (jobJMap.contains(<span class="string">"algorithm"</span>)) jobJMap(<span class="string">"algorithm"</span>) <span class="keyword">else</span> jobJMap(<span class="string">"processor"</span>)</span><br><span class="line">  processors.asInstanceOf[<span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]].map &#123;</span><br><span class="line">    alg =&gt;</span><br><span class="line">      <span class="keyword">val</span> name = shortName2FullName(alg)</span><br><span class="line">      <span class="keyword">val</span> processor = <span class="type">Class</span>.forName(name).newInstance().asInstanceOf[<span class="type">Processor</span>[<span class="type">T</span>]]</span><br><span class="line">      <span class="keyword">val</span> params: <span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]] = <span class="keyword">if</span> (alg.contains(<span class="string">"params"</span>)) alg(<span class="string">"params"</span>).asInstanceOf[<span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]] <span class="keyword">else</span> <span class="keyword">new</span> <span class="type">AList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]()</span><br><span class="line">      processor.initialize(name, params)</span><br><span class="line">      processor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建组合器，可以多个，按顺序调用。有点类似过滤器链。第一个过滤器会接受算法或者策略的结果。后续的组合器就只能处理上一阶段的组合器吐出的结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">createCompositors</span>(</span>jobJMap: <span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">JList</span>[<span class="type">Compositor</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (!jobJMap.contains(<span class="string">"compositor"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">AList</span>()</span><br><span class="line">  <span class="keyword">val</span> compositors = jobJMap.get(<span class="string">"compositor"</span>)</span><br><span class="line">  compositors.asInstanceOf[<span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]].map &#123;</span><br><span class="line">    f =&gt;</span><br><span class="line">      <span class="keyword">val</span> compositor = <span class="type">Class</span>.forName(shortName2FullName(f)).newInstance().asInstanceOf[<span class="type">Compositor</span>[<span class="type">T</span>]]</span><br><span class="line">      <span class="keyword">val</span> params: <span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]] = <span class="keyword">if</span> (f.contains(<span class="string">"params"</span>)) f.get(<span class="string">"params"</span>).asInstanceOf[<span class="type">JList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]] <span class="keyword">else</span> <span class="keyword">new</span> <span class="type">AList</span>[<span class="type">JMap</span>[<span class="type">String</span>, <span class="type">Any</span>]]()</span><br><span class="line">      compositor.initialize(f.get(<span class="string">"typeFilter"</span>).asInstanceOf[<span class="type">JList</span>[<span class="type">String</span>]], params)</span><br><span class="line">      compositor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ServiceframeworkDispatcher的核心是StrategyDispatcher，而StrategyDispatcher的核心是其dispatch方法。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(</span>params: <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>]): <span class="type">JList</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">  findStrategies(clientType) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(strategies) =&gt;</span><br><span class="line">      strategies.flatMap &#123; f =&gt; f.result(params) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同执行引擎的启动方法实现不同：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SparkRuntime</span>(</span>_params: <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>]) <span class="keyword">extends</span> <span class="type">StreamingRuntime</span> <span class="keyword">with</span> <span class="type">PlatformManagerListener</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">startRuntime</span>:</span> <span class="type">StreamingRuntime</span> = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sparkSession: <span class="type">SparkSession</span> = createRuntime</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createRuntime</span> =</span> &#123;</span><br><span class="line">    <span class="comment">//...创建SparkSession，这里会根据参数判断是否支持Hive、Carbondata</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  params.put(<span class="string">"_session_"</span>, sparkSession) <span class="comment">//将SparkSession放入params中</span></span><br><span class="line">  registerUDF  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">params</span>:</span> <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>] = _params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingRuntime</span>(</span>_params: <span class="type">JMap</span>[<span class="type">Any</span>, <span class="type">Any</span>]) <span class="keyword">extends</span> <span class="type">StreamingRuntime</span> <span class="keyword">with</span> <span class="type">PlatformManagerListener</span> &#123; self =&gt;</span><br><span class="line">  <span class="keyword">var</span> streamingContext: <span class="type">StreamingContext</span> = createRuntime</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createRuntime</span> =</span> &#123;</span><br><span class="line">    <span class="comment">//创建StreamingContext，并将SparkSession放入params中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">startRuntime</span> =</span> &#123;</span><br><span class="line">    streamingContext.start()</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">awaitTermination</span> =</span> streamingContext.awaitTermination()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但真正执行StreamingPro主流程在streamingpro-commons下的SparkStreamingStrategy类。<br>注意：如果是spark-1.6，则streamingpro-spark下也有一个SparkStreamingStrategy类。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingStrategy</span>[</span><span class="type">T</span>] <span class="keyword">extends</span> <span class="type">Strategy</span>[<span class="type">T</span>] <span class="keyword">with</span> <span class="type">DebugTrait</span> <span class="keyword">with</span> <span class="type">JobStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> _ref: util.<span class="type">List</span>[<span class="type">Strategy</span>[<span class="type">T</span>]] = _</span><br><span class="line">  <span class="keyword">var</span> _compositor: util.<span class="type">List</span>[<span class="type">Compositor</span>[<span class="type">T</span>]] = _</span><br><span class="line">  <span class="keyword">var</span> _processor: util.<span class="type">List</span>[<span class="type">Processor</span>[<span class="type">T</span>]] = _</span><br><span class="line">  <span class="keyword">var</span> _configParams: util.<span class="type">Map</span>[<span class="type">Any</span>, <span class="type">Any</span>] = _</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">result</span>(</span>params: util.<span class="type">Map</span>[<span class="type">Any</span>, <span class="type">Any</span>]): util.<span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    ref.foreach &#123; r =&gt; r.result(params) &#125; <span class="comment">// 先执行ref</span></span><br><span class="line">    <span class="keyword">if</span> (compositor != <span class="literal">null</span> &amp;&amp; compositor.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第一个Compositor, 产生第一个中间结果</span></span><br><span class="line">      <span class="keyword">var</span> middleR = compositor.get(<span class="number">0</span>).result(processor, ref, <span class="literal">null</span>, params)</span><br><span class="line">      <span class="comment">// 将新的中间结果运用到下一个Compositor</span></span><br><span class="line">      <span class="comment">// 第一个Compositor的结果运用到第二个的输入, 第二个Compositor的结果运用到第三个Compositor的输入...</span></span><br><span class="line">      <span class="comment">// 所以不同Compositor是链式执行的</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until compositor.size()) &#123;</span><br><span class="line">        middleR = compositor.get(i).result(processor, ref, middleR, params)</span><br><span class="line">      &#125;</span><br><span class="line">      middleR</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">new</span> util.<span class="type">ArrayList</span>[<span class="type">T</span>]()</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：配置文件中每个Job都有一个<code>strategy</code>级别的<code>configParams</code>，<code>ref</code>也会使用这个全局的<code>configParams</code>。<br>它是一个<code>Map[String, Any]</code>的结构。每个Compositor和Processor内部也有一个<code>params</code>配置，这是一个数组。</p>
<blockquote>
<p>实际上，全局的<code>configParams</code>参数会被用在Strategy、Ref/Processor和Compositor的result()方法的最后一个参数。</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"compositor"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"testCompositor"</span>,</span><br><span class="line">    <span class="string">"params"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"sql"</span>: <span class="string">"select avg(value) avgAge from test"</span>,</span><br><span class="line">        <span class="string">"outputTableName"</span>: <span class="string">"test3"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"sql"</span>: <span class="string">"select sum(value) sumAge from test"</span>,</span><br><span class="line">        <span class="string">"outputTableName"</span>: <span class="string">"test4"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>接下来以读取多个数据源的Compositor实现类为例：</p>
<ul>
<li><code>_configParams</code>是在创建Compositor时初始化调用的，这是一个<code>List[Map[String, Any]]</code>的结构，对应了<code>params</code>列表配置</li>
<li>如果需要替换，则会先处理配置信息</li>
<li>接着，从params中获取SparkSession（还记得之前创建Runtime时放入Map中吗？），</li>
<li>然后，执行sparkSession.read.format(xx).options(Map).load(path)</li>
<li>最后，通过df.createOrReplaceTempView创建Spark SQL的临时表，名称为<code>outputTable</code></li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiSQLSourceCompositor</span>[<span class="title">T</span>] <span class="keyword">extends</span> <span class="title">Compositor</span>[<span class="title">T</span>] <span class="title">with</span> <span class="title">CompositorHelper</span> </span>&#123;</span><br><span class="line">  private <span class="keyword">var</span> _configParams: util.<span class="built_in">List</span>[util.<span class="built_in">Map</span>[Any, Any]] = _</span><br><span class="line"></span><br><span class="line">  override def initialize(typeFilters: util.<span class="built_in">List</span>[<span class="built_in">String</span>], configParams: util.<span class="built_in">List</span>[util.<span class="built_in">Map</span>[Any, Any]]): Unit = &#123;</span><br><span class="line">    <span class="keyword">this</span>._configParams = configParams</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override def result(alg: util.<span class="built_in">List</span>[Processor[T]], ref: util.<span class="built_in">List</span>[Strategy[T]], middleResult: util.<span class="built_in">List</span>[T], params: util.<span class="built_in">Map</span>[Any, Any]): util.<span class="built_in">List</span>[T] = &#123;</span><br><span class="line"></span><br><span class="line">    _configParams.foreach &#123; sourceConfig =&gt;</span><br><span class="line">      val name = sourceConfig.getOrElse(<span class="string">"name"</span>, <span class="string">""</span>).toString</span><br><span class="line"></span><br><span class="line">      val _cfg = sourceConfig.map(f =&gt; (f._1.toString, f._2.toString)).map &#123; f =&gt;</span><br><span class="line">        (f._1, params.getOrElse(s<span class="string">"streaming.sql.source.<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;f._1&#125;</span>"</span>, f._2).toString)</span><br><span class="line">      &#125;.toMap</span><br><span class="line"></span><br><span class="line">      val sourcePath = _cfg(<span class="string">"path"</span>)</span><br><span class="line">      val df = sparkSession(params).read.format(sourceConfig(<span class="string">"format"</span>).toString).options(</span><br><span class="line">        (_cfg - <span class="string">"format"</span> - <span class="string">"path"</span> - <span class="string">"outputTable"</span>).map(f =&gt; (f._1.toString, f._2.toString))).load(sourcePath)</span><br><span class="line">      df.createOrReplaceTempView(_cfg.getOrElse(<span class="string">"outputTable"</span>, _cfg.getOrElse(<span class="string">"outputTableName"</span>, <span class="string">""</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">List</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了支持配置的动态替换，<code>_cfg</code>参数会做一些处理，比如上面的<code>s&quot;streaming.sql.source.${name}.${f._1}&quot;</code>如果需要被替换，则会被替换为<code>f._2</code>。<br>下表列举了StreamingPro支持的几种替换方式。</p>
<table>
<thead>
<tr>
<th>配置参数</th>
<th>配置示例</th>
<th>动态传参数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>streaming.sql.source.[name].[参数]</code></td>
<td>“path”: “file:///tmp/sample_article.txt”</td>
<td>-streaming.sql.source.firstSource.path  file:///tmp/wow.txt</td>
</tr>
<tr>
<td><code>streaming.sql.out.[name].[参数]</code></td>
<td>“path”: “file:///tmp/sample_article.txt”</td>
<td>-streaming.sql.source.firstSink.path  file:///tmp/wow_20170101.txt</td>
</tr>
<tr>
<td><code>streaming.sql.params.[param-name]</code></td>
<td>“sql”: “select * from test where hp_time=:today”</td>
<td>-streaming.sql.params.today “20170101”</td>
</tr>
</tbody>
</table>
<p>假设有两个数据输入源和一个输出目标的配置如下：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"batch.sources"</span>,</span><br><span class="line">  <span class="string">"params"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"firstSource"</span>,</span><br><span class="line">      <span class="string">"path"</span>: <span class="string">"file:///tmp/sample_article.txt"</span>,</span><br><span class="line">      <span class="string">"format"</span>: <span class="string">"com.databricks.spark.csv"</span>,</span><br><span class="line">      <span class="string">"outputTable"</span>: <span class="string">"article"</span>,</span><br><span class="line">      <span class="string">"header"</span>:true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"secondSource"</span>,</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"file:///tmp/sample_article2.txt"</span>,</span><br><span class="line">        <span class="string">"format"</span>: <span class="string">"com.databricks.spark.csv"</span>,</span><br><span class="line">        <span class="string">"outputTable"</span>: <span class="string">"article2"</span>,</span><br><span class="line">        <span class="string">"header"</span>:true</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"batch.outputs"</span>,</span><br><span class="line">  <span class="string">"params"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"firstSink"</span>,</span><br><span class="line">      <span class="string">"path"</span>: <span class="string">"file:///tmp/sample_article.txt"</span>,</span><br><span class="line">      <span class="string">"format"</span>: <span class="string">"com.databricks.spark.csv"</span>,</span><br><span class="line">      <span class="string">"outputTable"</span>: <span class="string">"article"</span>,</span><br><span class="line">      <span class="string">"header"</span>:true</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Source的功能是：读取输入源形成DataFrame，然后创建临时表。其他组件比如SQL也是类似的。至此StreamingPro的大致流程就分析完了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/allwefantasy/streamingpro/&quot;&gt;https://github.com/allwefantasy/streamingpro/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://github.com/zqhxuyuan/categories/bigdata/"/>
    
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Akka并发图解</title>
    <link href="http://github.com/zqhxuyuan/2017/08/16/Akka-Concurrenty/"/>
    <id>http://github.com/zqhxuyuan/2017/08/16/Akka-Concurrenty/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-08-16T08:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Akka并发图解（Akka Concurrenty）：<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Akka并发图解（Akka Concurrenty）：&lt;br&gt;
    
    </summary>
    
      <category term="akka" scheme="http://github.com/zqhxuyuan/categories/akka/"/>
    
    
      <category term="akka" scheme="http://github.com/zqhxuyuan/tags/akka/"/>
    
  </entry>
  
  <entry>
    <title>SnappyData</title>
    <link href="http://github.com/zqhxuyuan/2017/07/13/SnappyData-In-Action/"/>
    <id>http://github.com/zqhxuyuan/2017/07/13/SnappyData-In-Action/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-09-14T08:21:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>SnappyData®</p>
<a id="more"></a>
<h2 id="SnappyData">SnappyData</h2><h3 id="开发模式">开发模式</h3><p>由于下载的snappydata已经带了spark，所以不需要使用–packges</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd snappydata-<span class="number">0.9</span>-bin</span><br><span class="line">$ bin/spark-shell --driver-memory=<span class="number">4</span>g \</span><br><span class="line">  --conf spark<span class="class">.snappydata</span><span class="class">.store</span><span class="class">.sys-disk-dir</span>=quickstartdatadir \</span><br><span class="line">  --conf spark<span class="class">.snappydata</span><span class="class">.store</span><span class="class">.log-file</span>=quickstartdatadir/quickstart<span class="class">.log</span> \</span><br><span class="line">  --driver-java-options=<span class="string">"-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSClassUnloadingEnabled -XX:MaxNewSize=1g"</span></span><br><span class="line">Spark context Web UI available at http:<span class="comment">//192.168.6.52:4042</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>执行CRUD操作：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">val snappy = new org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.sql</span><span class="class">.SnappySession</span>(spark.sparkContext)</span><br><span class="line">import snappy<span class="class">.implicits</span>._</span><br><span class="line">import org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.sql</span><span class="class">.types</span>._</span><br><span class="line">import org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.sql</span><span class="class">.Row</span></span><br><span class="line"></span><br><span class="line">val ds = <span class="function"><span class="title">Seq</span><span class="params">((<span class="number">1</span>,<span class="string">"a"</span>)</span></span>, (<span class="number">2</span>, <span class="string">"b"</span>), (<span class="number">3</span>, <span class="string">"c"</span>)).<span class="function"><span class="title">toDS</span><span class="params">()</span></span></span><br><span class="line">val tableSchema = <span class="function"><span class="title">StructType</span><span class="params">(Array(StructField(<span class="string">"CustKey"</span>, IntegerType, false)</span></span>,<span class="function"><span class="title">StructField</span><span class="params">(<span class="string">"CustName"</span>, StringType, false)</span></span>))</span><br><span class="line"></span><br><span class="line">snappy.<span class="function"><span class="title">createTable</span><span class="params">(tableName = <span class="string">"colTable"</span>, provider = <span class="string">"column"</span>, schema = tableSchema, options = Map.empty[String, String], allowExisting = false)</span></span></span><br><span class="line">snappy.<span class="function"><span class="title">createTable</span><span class="params">(tableName = <span class="string">"rowTable"</span>, provider = <span class="string">"row"</span>, schema = tableSchema, options = Map.empty[String, String], allowExisting = false)</span></span></span><br><span class="line"></span><br><span class="line">ds<span class="class">.write</span><span class="class">.insertInto</span>(<span class="string">"colTable"</span>)</span><br><span class="line">ds<span class="class">.write</span><span class="class">.insertInto</span>(<span class="string">"rowTable"</span>)</span><br><span class="line"></span><br><span class="line">snappy.<span class="function"><span class="title">insert</span><span class="params">(<span class="string">"colTable"</span>, Row(<span class="number">10</span>, <span class="string">"f"</span>)</span></span>)</span><br><span class="line">snappy.<span class="function"><span class="title">insert</span><span class="params">(<span class="string">"rowTable"</span>, Row(<span class="number">4</span>, <span class="string">"d"</span>)</span></span>)</span><br><span class="line"></span><br><span class="line">snappy.<span class="function"><span class="title">table</span><span class="params">(<span class="string">"colTable"</span>)</span></span><span class="class">.count</span></span><br><span class="line">snappy.<span class="function"><span class="title">table</span><span class="params">(<span class="string">"colTable"</span>)</span></span>.<span class="function"><span class="title">orderBy</span><span class="params">(<span class="string">"CustKey"</span>)</span></span><span class="class">.show</span></span><br><span class="line">snappy.<span class="function"><span class="title">table</span><span class="params">(<span class="string">"rowTable"</span>)</span></span><span class="class">.count</span></span><br><span class="line">snappy.<span class="function"><span class="title">table</span><span class="params">(<span class="string">"rowTable"</span>)</span></span>.<span class="function"><span class="title">orderBy</span><span class="params">(<span class="string">"CUSTKEY"</span>)</span></span><span class="class">.show</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// update and delete on row table. current version did't support update and delete on column table.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// update rowTable set custname='d' where custkey=1</span></span><br><span class="line">snappy.<span class="function"><span class="title">update</span><span class="params">(tableName = <span class="string">"rowTable"</span>, filterExpr = <span class="string">"CUSTKEY=1"</span>, newColumnValues = Row(<span class="string">"d"</span>)</span></span>, updateColumns = <span class="string">"CUSTNAME"</span>)</span><br><span class="line">snappy.<span class="function"><span class="title">table</span><span class="params">(<span class="string">"rowTable"</span>)</span></span>.<span class="function"><span class="title">orderBy</span><span class="params">(<span class="string">"CUSTKEY"</span>)</span></span><span class="class">.show</span></span><br><span class="line"><span class="comment">// delete rowTable where custkey=1</span></span><br><span class="line">snappy.<span class="function"><span class="title">delete</span><span class="params">(tableName = <span class="string">"rowTable"</span>, filterExpr = <span class="string">"CUSTKEY=1"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>打开<a href="http://192.168.6.52:4042/dashboard/" target="_blank" rel="external">http://192.168.6.52:4042/dashboard/</a>，查看web-ui的dashboard页面</p>
<p><img src="http://img.blog.csdn.net/20170714115456658" alt="snappy"></p>
<p>查看quickstartdir,索引采用GF(GemFire)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ tree quickstartdatadir/</span><br><span class="line">quickstartdatadir/</span><br><span class="line">├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">├── BACKUPGFXD-DEFAULT-DISKSTORE<span class="class">.if</span></span><br><span class="line">├── datadictionary</span><br><span class="line">│   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">│   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">│   ├── BACKUPGFXD-DD-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   └── DRLK_IFGFXD-DD-DISKSTORE<span class="class">.lk</span></span><br><span class="line">├── DRLK_IFGFXD-DEFAULT-DISKSTORE<span class="class">.lk</span></span><br><span class="line">├── gemfirexdtemp_1015622261<span class="class">.d</span></span><br><span class="line">└── quickstart.log</span><br></pre></td></tr></table></figure>
<p>简单的性能测试：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def <span class="function">benchmark</span>(name<span class="value">: String, times: Int = <span class="number">10</span>, warmups: Int = <span class="number">6</span>)(f: =&gt; Unit) &#123;</span><br><span class="line">  for (i &lt;- <span class="number">1</span> to warmups) &#123;</span><br><span class="line">    f</span><br><span class="line">  &#125;</span><br><span class="line">  val startTime = System.nanoTime</span><br><span class="line">  for (i &lt;- <span class="number">1</span> to times) &#123;</span><br><span class="line">    f</span><br><span class="line">  &#125;</span><br><span class="line">  val endTime = System.nanoTime</span><br><span class="line">  <span class="function">println</span>(s<span class="string">"Average time taken in $name for $times runs: "</span> +</span><br><span class="line">    (endTime - startTime).toDouble / (times * <span class="number">1000000.0</span>) + <span class="string">" millis"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val snappy = new org.apache.spark.sql.<span class="function">SnappySession</span>(spark.sparkContext)</span><br><span class="line">val testDF = snappy.<span class="function">range</span>(<span class="number">100000000</span>).<span class="function">selectExpr</span>(<span class="string">"id"</span>, <span class="string">"concat('sym', cast((id % 100) as varchar(10))) as sym"</span>)</span><br><span class="line">snappy.<span class="function">sql</span>(<span class="string">"drop table if exists snappyTable"</span>)</span><br><span class="line">snappy.<span class="function">sql</span>(<span class="string">"create table snappyTable (id bigint not null, sym varchar(10) not null) using column"</span>)</span><br><span class="line"><span class="function">benchmark</span>(<span class="string">"Snappy insert perf"</span>, <span class="number">1</span>, <span class="number">0</span>) &#123;testDF.write.<span class="function">insertInto</span>(<span class="string">"snappyTable"</span>) &#125;</span><br><span class="line"><span class="function">benchmark</span>(<span class="string">"Snappy perf"</span>) &#123;snappy.<span class="function">sql</span>(<span class="string">"select sym, avg(id) from snappyTable group by sym"</span>).<span class="function">collect</span>()&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="单机模式">单机模式</h3><p>左图为本地模式，右图为伪分布式模式：分别启动locator（左下）、server（DataServer，右上）、<br>leader（左上），quickstartdir为右下（share-nothing store）.</p>
<p><img src="http://snappydatainc.github.io/snappydata/Images/SnappyLocalMode.png" alt="snappy"><br><img src="http://snappydatainc.github.io/snappydata/Images/SnappyEmbeddedMode.png" alt="snappy"></p>
<p>伪分布式模式的三个组件都在本机启动，使用不同的文件夹。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cd snappydata-0.9-bin</span><br><span class="line">$ mkdir -p node-a/locator1 node-b/server1 node-c/lead1</span><br><span class="line"></span><br><span class="line">$ bin/snappy locator <span class="operator"><span class="keyword">start</span> -dir=node-a/locator1</span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> SnappyData <span class="keyword">Locator</span> <span class="keyword">using</span> peer discovery <span class="keyword">on</span>: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>[<span class="number">10334</span>]</span><br><span class="line"><span class="keyword">Starting</span> Thrift <span class="keyword">server</span> <span class="keyword">for</span> SnappyData <span class="keyword">at</span> address localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>[<span class="number">1527</span>]</span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/node-a/locator1/snappylocator.<span class="keyword">log</span></span><br><span class="line">SnappyData <span class="keyword">Locator</span> pid: <span class="number">27651</span> <span class="keyword">status</span>: running</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">bin</span>/snappy <span class="keyword">server</span> <span class="keyword">start</span> -dir=node-b/server1 -locators=dp0652:<span class="number">10334</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> SnappyData <span class="keyword">Server</span> <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: dp0652:<span class="number">10334</span></span><br><span class="line"><span class="keyword">Starting</span> Thrift <span class="keyword">server</span> <span class="keyword">for</span> SnappyData <span class="keyword">at</span> address localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>[<span class="number">1528</span>]</span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/node-b/server1/snappyserver.<span class="keyword">log</span></span><br><span class="line">SnappyData <span class="keyword">Server</span> pid: <span class="number">29595</span> <span class="keyword">status</span>: running</span><br><span class="line">  <span class="keyword">Distributed</span> <span class="keyword">system</span> <span class="keyword">now</span> has <span class="number">2</span> members.</span><br><span class="line">  Other members: dp0652(<span class="number">27651</span>:<span class="keyword">locator</span>)&lt;v0&gt;:<span class="number">32709</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">bin</span>/snappy leader <span class="keyword">start</span> -dir=node-<span class="keyword">c</span>/lead1 -locators=dp0652:<span class="number">10334</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> SnappyData Leader <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: localhost:<span class="number">10334</span></span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/node-<span class="keyword">c</span>/lead1/snappyleader.<span class="keyword">log</span></span><br><span class="line">SnappyData Leader pid: <span class="number">29860</span> <span class="keyword">status</span>: running</span><br><span class="line">  <span class="keyword">Distributed</span> <span class="keyword">system</span> <span class="keyword">now</span> has <span class="number">3</span> members.</span><br><span class="line">  Other members: dp0652(<span class="number">27651</span>:<span class="keyword">locator</span>)&lt;v0&gt;:<span class="number">32709</span>, dp0652(<span class="number">29595</span>:datastore)&lt;v7&gt;:<span class="number">9553</span></span></span><br></pre></td></tr></table></figure>
<p>如果要修改地址，可以用xx=xx的方式，<br>比如(修改locator的地址)[<a href="https://snappydatainc.github.io/snappydata/reference/configuration_parameters/start-locator/" target="_blank" rel="external">https://snappydatainc.github.io/snappydata/reference/configuration_parameters/start-locator/</a>]</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/snappy locator <span class="literal">start</span> -<span class="variable">dir=</span><span class="keyword">node</span><span class="identifier"></span><span class="title">-a</span>/locator1 -<span class="variable">start-locator=</span><span class="number">192.168</span>.<span class="number">6.52</span>[<span class="number">1529</span>]</span><br></pre></td></tr></table></figure>
<p>关闭各个组件：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/snappy locator <span class="literal">stop</span> -<span class="variable">dir=</span><span class="keyword">node</span><span class="identifier"></span><span class="title">-a</span>/locator1</span><br><span class="line">bin/snappy server <span class="literal">stop</span> -<span class="variable">dir=</span><span class="keyword">node</span><span class="identifier"></span><span class="title">-b</span>/server1</span><br><span class="line">bin/snappy leader <span class="literal">stop</span> -<span class="variable">dir=</span><span class="keyword">node</span><span class="identifier"></span><span class="title">-c</span>/lead1</span><br></pre></td></tr></table></figure>
<p>执行spark-shell，并指定snappydata的连接地址为<code>localhost:1527</code>.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-shell --driver-memory=<span class="number">4</span>g \</span><br><span class="line">  --conf spark<span class="class">.snappydata</span><span class="class">.connection</span>=localhost:<span class="number">1527</span> \</span><br><span class="line">  --conf spark<span class="class">.snappydata</span><span class="class">.store</span><span class="class">.sys-disk-dir</span>=quickstartdatadir2 \</span><br><span class="line">  --conf spark<span class="class">.snappydata</span><span class="class">.store</span><span class="class">.log-file</span>=quickstartdatadir2/quickstart<span class="class">.log</span> \</span><br><span class="line">  --driver-java-options=<span class="string">"-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSClassUnloadingEnabled -XX:MaxNewSize=1g"</span></span><br></pre></td></tr></table></figure>
<p>如果打开<a href="http://192.168.6.52:4042" target="_blank" rel="external">http://192.168.6.52:4042</a>，有spark app的页面，但是没有dashboard的页面。<br>打开<a href="http://192.168.6.52:5050/dashboard/" target="_blank" rel="external">http://192.168.6.52:5050/dashboard/</a>，可以查看snappydata的web ui。</p>
<blockquote>
<p>5050类似于spark standalone的8082 web-ui，4040类似于spark app的ui。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170714120810617" alt="snappy2"></p>
<h3 id="一键启动三个组件">一键启动三个组件</h3><p>上面三个启动脚本可以用一个脚本执行,这种情况默认的文件夹在work下。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbin/snappy-start-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">sbin/snappy-<span class="keyword">stop</span>-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">sbin/snappy-status-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>snappy-start-all.sh会在本地启动一个locator,一个server,一个leader.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sbin/snappy-<span class="operator"><span class="keyword">start</span>-all.sh</span><br><span class="line"><span class="keyword">Starting</span> SnappyData <span class="keyword">Locator</span> <span class="keyword">using</span> peer discovery <span class="keyword">on</span>: localhost[<span class="number">10334</span>], other locators: localhost[<span class="number">10334</span>]</span><br><span class="line"><span class="keyword">Starting</span> Thrift <span class="keyword">server</span> <span class="keyword">for</span> SnappyData <span class="keyword">at</span> address localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>[<span class="number">1527</span>]</span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/<span class="keyword">work</span>/localhost-<span class="keyword">locator</span>-<span class="number">1</span>/snappylocator.<span class="keyword">log</span></span><br><span class="line">SnappyData <span class="keyword">Locator</span> pid: <span class="number">7949</span> <span class="keyword">status</span>: running</span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> SnappyData <span class="keyword">Server</span> <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: localhost[<span class="number">10334</span>]</span><br><span class="line"><span class="keyword">Starting</span> Thrift <span class="keyword">server</span> <span class="keyword">for</span> SnappyData <span class="keyword">at</span> address localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>[<span class="number">1528</span>]</span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/<span class="keyword">work</span>/localhost-<span class="keyword">server</span>-<span class="number">1</span>/snappyserver.<span class="keyword">log</span></span><br><span class="line">SnappyData <span class="keyword">Server</span> pid: <span class="number">8176</span> <span class="keyword">status</span>: running</span><br><span class="line">  <span class="keyword">Distributed</span> <span class="keyword">system</span> <span class="keyword">now</span> has <span class="number">2</span> members.</span><br><span class="line">  Other members: localhost(<span class="number">7949</span>:<span class="keyword">locator</span>)&lt;v0&gt;:<span class="number">37846</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> SnappyData Leader <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: localhost[<span class="number">10334</span>]</span><br><span class="line"><span class="keyword">Logs</span> <span class="keyword">generated</span> <span class="keyword">in</span> /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-<span class="keyword">bin</span>/<span class="keyword">work</span>/localhost-<span class="keyword">lead</span>-<span class="number">1</span>/snappyleader.<span class="keyword">log</span></span><br><span class="line">SnappyData Leader pid: <span class="number">8488</span> <span class="keyword">status</span>: running</span><br><span class="line">  <span class="keyword">Distributed</span> <span class="keyword">system</span> <span class="keyword">now</span> has <span class="number">3</span> members.</span><br><span class="line">  Other members: localhost(<span class="number">7949</span>:<span class="keyword">locator</span>)&lt;v0&gt;:<span class="number">37846</span>, dp0652(<span class="number">8176</span>:datastore)&lt;v1&gt;:<span class="number">24462</span></span></span><br></pre></td></tr></table></figure>
<p>查看默认work下的目录</p>
<ul>
<li>lead：类似于Spark的Driver，文件夹是spark-jobserver，放了作业和jar包</li>
<li>locator：</li>
<li>server：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ tree work/</span><br><span class="line">work/</span><br><span class="line">├── localhost-lead-<span class="number">1</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   ├── DRLK_IFGFXD-DEFAULT-DISKSTORE<span class="class">.lk</span></span><br><span class="line">│   ├── snappyleader<span class="class">.gfs</span></span><br><span class="line">│   ├── snappyleader<span class="class">.log</span></span><br><span class="line">│   ├── snappyleader<span class="class">.pid</span></span><br><span class="line">│   ├── spark-jobserver</span><br><span class="line">│   │   ├── filedao</span><br><span class="line">│   │   │   └── data</span><br><span class="line">│   │   │       ├── configs<span class="class">.data</span></span><br><span class="line">│   │   │       ├── jars<span class="class">.data</span></span><br><span class="line">│   │   │       └── jobs<span class="class">.data</span></span><br><span class="line">│   │   └── upload</span><br><span class="line">│   │       └── files<span class="class">.data</span></span><br><span class="line">│   └── start_snappyleader<span class="class">.log</span></span><br><span class="line">├── localhost-locator-<span class="number">1</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   ├── datadictionary</span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   │   └── DRLK_IFGFXD-DD-DISKSTORE<span class="class">.lk</span></span><br><span class="line">│   ├── DRLK_IFGFXD-DEFAULT-DISKSTORE<span class="class">.lk</span></span><br><span class="line">│   ├── locator10334state<span class="class">.dat</span></span><br><span class="line">│   ├── locator10334views<span class="class">.log</span></span><br><span class="line">│   ├── snappylocator<span class="class">.gfs</span></span><br><span class="line">│   ├── snappylocator<span class="class">.log</span></span><br><span class="line">│   ├── snappylocator<span class="class">.pid</span></span><br><span class="line">│   └── start_snappylocator<span class="class">.log</span></span><br><span class="line">├── localhost-server-<span class="number">1</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">│   ├── BACKUPGFXD-DEFAULT-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   ├── datadictionary</span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.crf</span></span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE_1<span class="class">.drf</span></span><br><span class="line">│   │   ├── BACKUPGFXD-DD-DISKSTORE<span class="class">.if</span></span><br><span class="line">│   │   └── DRLK_IFGFXD-DD-DISKSTORE<span class="class">.lk</span></span><br><span class="line">│   ├── DRLK_IFGFXD-DEFAULT-DISKSTORE<span class="class">.lk</span></span><br><span class="line">│   ├── snappyserver<span class="class">.gfs</span></span><br><span class="line">│   ├── snappyserver<span class="class">.log</span></span><br><span class="line">│   ├── snappyserver<span class="class">.pid</span></span><br><span class="line">│   └── start_snappyserver<span class="class">.log</span></span><br><span class="line">└── members.txt</span><br></pre></td></tr></table></figure>
<h2 id="client">client</h2><p>先停止snappydata，然后修改远程机器conf下的servers, locators, leads.<br>将localhost改为主机地址:192.168.6.52，再重启snappydata。</p>
<p>注意：默认启动时，使用的是localhost，work下的文件夹页是localhost开头。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0652 snappydata-<span class="number">0.9</span>-bin]$ sbin/snappy-start-all.sh</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Starting SnappyData Locator <span class="keyword">using</span> peer discovery on: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>[<span class="number">10334</span>], other locators: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Starting Thrift server <span class="keyword">for</span> SnappyData at address /<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>[<span class="number">1527</span>]</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Logs generated in /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-bin/work/<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>-locator-<span class="number">1</span>/snappylocator.<span class="built_in">log</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: SnappyData Locator pid: <span class="number">45151</span> status: running</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Starting SnappyData Server <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Starting Thrift server <span class="keyword">for</span> SnappyData at address /<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>[<span class="number">1528</span>]</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Logs generated in /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-bin/work/<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>-server-<span class="number">1</span>/snappyserver.<span class="built_in">log</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: SnappyData Server pid: <span class="number">45860</span> status: running</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:   Distributed system now has <span class="number">2</span> members.</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:   Other members: dp0652(<span class="number">45151</span>:locator)&lt;v0&gt;:<span class="number">48205</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Starting SnappyData Leader <span class="keyword">using</span> locators <span class="keyword">for</span> peer discovery: <span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: Logs generated in /home/qihuang.zheng/snappydata-<span class="number">0.9</span>-bin/work/<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>-lead-<span class="number">1</span>/snappyleader.<span class="built_in">log</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>: SnappyData Leader pid: <span class="number">46726</span> status: running</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:   Distributed system now has <span class="number">3</span> members.</span><br><span class="line"><span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:   Other members: dp0652(<span class="number">45860</span>:datastore)&lt;v1&gt;:<span class="number">8287</span>, dp0652(<span class="number">45151</span>:locator)&lt;v0&gt;:<span class="number">48205</span></span><br></pre></td></tr></table></figure>
<p>查看进程</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45860</span> io.snappydata.tools.ServerLauncher server -critical-heap-percentage=<span class="number">90</span> -eviction-heap-percentage=<span class="number">81</span> locators=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span> <span class="built_in">log</span>-file=snappyserver.<span class="built_in">log</span> -client-bind-address=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span></span><br><span class="line"><span class="number">46726</span> io.snappydata.tools.LeaderLauncher server locators=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span> <span class="built_in">log</span>-file=snappyleader.<span class="built_in">log</span> -run-netserver=<span class="literal">false</span></span><br><span class="line"><span class="number">45151</span> io.snappydata.tools.LocatorLauncher server locators=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span> start-locator=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span>:<span class="number">10334</span> <span class="built_in">log</span>-file=snappylocator.<span class="built_in">log</span> -client-bind-address=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span> -peer-discovery-address=<span class="number">192.168</span><span class="number">.6</span><span class="number">.52</span> jmx-manager=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>本机下载snappydata的二进制包，并启动snappy脚本，通过thrift/jdbc连接远程的snappydata cluster</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  snappydata-0.9-bin bin/snappy</span><br><span class="line">SnappyData 版本 0.9</span><br><span class="line">snappy&gt; connect client '192.168.6.52:1527';</span><br><span class="line">九月 14, 2017 3:43:43 下午 java.util.logging.LogManager$RootLogger log</span><br><span class="line">信息: Starting client on '10.57.4.219' with ID='7059|<span class="string">2017/09/14 15:43:43.185 CST'</span><br><span class="line">Using CONNECTION0</span><br><span class="line">snappy&gt; show connections ;</span><br><span class="line">CONNECTION0* -  jdbc:snappydata:thrift://192.168.6.52[1527]</span><br><span class="line">* = 当前连接</span><br><span class="line">snappy&gt; show tables;</span><br><span class="line">TABLE_SCHEM          </span>|<span class="string">TABLE_NAME                    </span>|<span class="string">TABLE_TYPE  </span>|REMARKS</span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">SYS                  |<span class="string">ASYNCEVENTLISTENERS           </span>|<span class="string">SYSTEM TABLE</span>|</span><br><span class="line">SYS                  |<span class="string">GATEWAYRECEIVERS              </span>|<span class="string">SYSTEM TABLE</span>|</span><br><span class="line">SYS                  |<span class="string">GATEWAYSENDERS                </span>|<span class="string">SYSTEM TABLE</span>|</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SnappyData®&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://github.com/zqhxuyuan/categories/bigdata/"/>
    
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>CarbonData</title>
    <link href="http://github.com/zqhxuyuan/2017/07/13/CarbonData-In-Action/"/>
    <id>http://github.com/zqhxuyuan/2017/07/13/CarbonData-In-Action/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-09-13T07:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache CarbonData</p>
<a id="more"></a>
<h2 id="Apache_CarbonData">Apache CarbonData</h2><p>版本：carbondata-1.1.0，spark-2.1.1，hadoop-2.6.0</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -DskipTests -Pspark-<span class="number">2.1</span> -Dspark.version=<span class="number">2.1</span><span class="number">.1</span> -Dhadoop.version=<span class="number">2.6</span><span class="number">.0</span> clean package</span><br><span class="line"></span><br><span class="line">$ ll assembly/target/scala-<span class="number">2.11</span></span><br><span class="line"><span class="number">8.9</span>M  <span class="number">7</span> <span class="number">12</span> <span class="number">16</span>:<span class="number">14</span> carbondata_2<span class="number">.11</span>-<span class="number">1.1</span><span class="number">.1</span>-shade-hadoop2<span class="number">.6</span><span class="number">.0</span>.jar</span><br></pre></td></tr></table></figure>
<p>本地模式测试，创建CarbonSession的第一个参数为本地文件系统</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-shell --jars ~/Github/carbondata-parent-<span class="number">1.1</span>.<span class="number">0</span>/assembly/target/scala-<span class="number">2.11</span>/carbondata_2.<span class="number">11</span>-<span class="number">1.1</span>.<span class="number">1</span>-shade-hadoop2.<span class="number">6.0</span><span class="class">.jar</span></span><br><span class="line"></span><br><span class="line">import org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.sql</span><span class="class">.SparkSession</span></span><br><span class="line">import org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.sql</span><span class="class">.CarbonSession</span>._</span><br><span class="line">val carbon = SparkSession.<span class="function"><span class="title">builder</span><span class="params">()</span></span>.<span class="function"><span class="title">config</span><span class="params">(sc.getConf)</span></span>.<span class="function"><span class="title">getOrCreateCarbonSession</span><span class="params">(<span class="string">"/tmp/carbon"</span>)</span></span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"CREATE TABLE IF NOT EXISTS test_table(id string,name string,city string,age Int)STORED BY 'carbondata'"</span>)</span></span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"LOAD DATA INPATH '/Users/zhengqh/Downloads/spark-2.1.1-bin-hadoop2.7/sample.csv' INTO TABLE test_table"</span>)</span></span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"SELECT city, avg(age), sum(age) FROM test_table GROUP BY city"</span>)</span></span>.<span class="function"><span class="title">show</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>本地文件系统的文件夹包括Fact（表数据）、Metadata(表结构)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  carbondata-parent-<span class="number">1.1</span><span class="number">.0</span> tree /tmp/carbon</span><br><span class="line">/tmp/carbon</span><br><span class="line">├── <span class="keyword">default</span></span><br><span class="line">│   └── test_table</span><br><span class="line">│       ├── Fact</span><br><span class="line">│       │   └── Part0</span><br><span class="line">│       │       └── Segment_0</span><br><span class="line">│       │           ├── <span class="number">0</span>_batchno0-<span class="number">0</span>-<span class="number">1499845043969.</span>carbonindex</span><br><span class="line">│       │           └── part-<span class="number">0</span>-<span class="number">0</span>_batchno0-<span class="number">0</span>-<span class="number">1499845043969.</span>carbondata</span><br><span class="line">│       └── Metadata</span><br><span class="line">│           ├── <span class="number">3</span>d8bd318-a620-<span class="number">419</span>b-b0fd-c276936375e2.dict</span><br><span class="line">│           ├── <span class="number">3</span>d8bd318-a620-<span class="number">419</span>b-b0fd-c276936375e2.dictmeta</span><br><span class="line">│           ├── <span class="number">3</span>d8bd318-a620-<span class="number">419</span>b-b0fd-c276936375e2_27.sortindex</span><br><span class="line">│           ├── f2f45986-<span class="number">6f</span>b6-<span class="number">42</span>af-b991-<span class="number">513</span>ee43aad01.dict</span><br><span class="line">│           ├── f2f45986-<span class="number">6f</span>b6-<span class="number">42</span>af-b991-<span class="number">513</span>ee43aad01.dictmeta</span><br><span class="line">│           ├── f2f45986-<span class="number">6f</span>b6-<span class="number">42</span>af-b991-<span class="number">513</span>ee43aad01_18.sortindex</span><br><span class="line">│           ├── f93ce55d-b82a-<span class="number">4</span>eca-<span class="number">9076</span>-e21dcd819218.dict</span><br><span class="line">│           ├── f93ce55d-b82a-<span class="number">4</span>eca-<span class="number">9076</span>-e21dcd819218.dictmeta</span><br><span class="line">│           ├── f93ce55d-b82a-<span class="number">4</span>eca-<span class="number">9076</span>-e21dcd819218_30.sortindex</span><br><span class="line">│           ├── schema</span><br><span class="line">│           └── tablestatus</span><br><span class="line">└── modifiedTime.mdt</span><br></pre></td></tr></table></figure>
<p>yarn模式按照官网部署<a href="http://carbondata.apache.org/installation-guide.html" target="_blank" rel="external">http://carbondata.apache.org/installation-guide.html</a></p>
<blockquote>
<p>注意：使用yarn模式，不需要把carbondata通过scp分发到各个节点，只需要在Driver端有就可以。另外，当前版本不依赖kettle</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd spark-<span class="number">2.1</span><span class="number">.1</span>*</span><br><span class="line">mkdir carbonlib</span><br><span class="line">cp ~/carbondata_2<span class="number">.11</span>-<span class="number">1.1</span><span class="number">.1</span>-shade-hadoop2<span class="number">.6</span><span class="number">.0</span>.jar carbonlib</span><br><span class="line">cp ~/carbon.properties conf</span><br><span class="line"></span><br><span class="line">tar -zcvf carbondata.tar.gz carbonlib/</span><br><span class="line">mv carbondata.tar.gz carbonlib/</span><br><span class="line"></span><br><span class="line">$ vi conf/spark-defaults.conf</span><br><span class="line">spark.executor.extraJavaOptions -Dcarbon.properties.filepath=/usr/install/spark-<span class="number">2.1</span><span class="number">.1</span>-bin-<span class="number">2.6</span><span class="number">.0</span>-cdh5<span class="number">.9</span><span class="number">.0</span>/conf/carbon.properties</span><br><span class="line">spark.driver.extraJavaOptions   -Dcarbon.properties.filepath=/usr/install/spark-<span class="number">2.1</span><span class="number">.1</span>-bin-<span class="number">2.6</span><span class="number">.0</span>-cdh5<span class="number">.9</span><span class="number">.0</span>/conf/carbon.properties</span><br><span class="line">spark.driver.extraClassPath     /usr/install/spark-<span class="number">2.1</span><span class="number">.1</span>-bin-<span class="number">2.6</span><span class="number">.0</span>-cdh5<span class="number">.9</span><span class="number">.0</span>/carbonlib<span class="comment">/*</span><br><span class="line">spark.executor.extraClassPath   /usr/install/spark-2.1.1-bin-2.6.0-cdh5.9.0/carbonlib<span class="comment">/*</span><br><span class="line">spark.yarn.dist.files           /usr/install/spark-2.1.1-bin-2.6.0-cdh5.9.0/conf/carbon.properties</span><br><span class="line">spark.yarn.dist.archives        /usr/install/spark-2.1.1-bin-2.6.0-cdh5.9.0/carbonlib/carbondata.tar.gz</span></span></span><br></pre></td></tr></table></figure>
<p>启动spark-shell还需要加上<code>--jars</code>。注意创建CarbonSession时第一个参数必须加上hdfs前缀，否则会报错找不到文件</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ bin/spark-shell <span class="comment">--jars /home/admin/carbondata_2.11-1.1.1-shade-hadoop2.6.0.jar</span></span><br><span class="line"></span><br><span class="line">sql("<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test_table1(<span class="keyword">id</span> <span class="keyword">string</span>,<span class="keyword">name</span> <span class="keyword">string</span>,city <span class="keyword">string</span>,age <span class="built_in">Int</span>)<span class="string">")</span><br><span class="line">sql("</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> test_table1 <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'david'</span>,<span class="string">'shenzhen'</span>,<span class="number">31</span>)<span class="string">")</span><br><span class="line">sql("</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> test_table1 <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'eason'</span>,<span class="string">'shenzhen'</span>,<span class="number">20</span>)<span class="string">")</span><br><span class="line">sql("</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> test_table1 <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'jarry'</span>,<span class="string">'wuhan'</span>,<span class="number">35</span>)<span class="string">")</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.sql.CarbonSession._</span><br><span class="line">val carbon = SparkSession.builder().config(sc.getConf).getOrCreateCarbonSession("</span>hdfs://tdhdfs/<span class="keyword">user</span>/tongdun/carbon<span class="string">","</span>/home/<span class="keyword">admin</span>/carbon<span class="string">")</span><br><span class="line"></span><br><span class="line">carbon.sql("</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test_table2(<span class="keyword">id</span> <span class="keyword">string</span>,<span class="keyword">name</span> <span class="keyword">string</span>,city <span class="keyword">string</span>,age <span class="built_in">Int</span>)<span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'carbondata'</span><span class="string">")</span><br><span class="line">carbon.sql("</span><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table2 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_table1<span class="string">") // insert #1</span><br><span class="line">carbon.sql("</span><span class="keyword">select</span> * <span class="keyword">from</span> test_table2<span class="string">").show</span><br><span class="line">carbon.sql("</span><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table2 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_table1<span class="string">") // insert again</span><br><span class="line">carbon.sql("</span><span class="keyword">select</span> * <span class="keyword">from</span> test_table2<span class="string">").show</span><br><span class="line"></span><br><span class="line">carbon.sql("</span><span class="keyword">INSERT</span> overwrite <span class="keyword">table</span> test_table2 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_table1<span class="string">") // overwrite</span></span></span><br></pre></td></tr></table></figure>
<p>carbondata运行在HDFS时，它的事实数据与元数据保存在HDFS上。</p>
<p><img src="http://img.blog.csdn.net/20170713222930582" alt="carbon"></p>
<p>将hdfs表数据导入到carbondata建立的表后，执行一些查询语句，观察ui。</p>
<blockquote>
<p>注意：导入数据时，carbondata分为两个步骤：全局字典（GlobalDictionary）和CarbonDataRDD。<br>其中全局字典会在Metadata下生产索引文件，CarbonDataRDD会在Fact下生成数据文件。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170713222957886" alt="carbon1"></p>
<h3 id="CarbonData数据导入与查询">CarbonData数据导入与查询</h3><p>建立crosspartner carbondata表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.sql.CarbonSession._</span><br><span class="line">val carbon = SparkSession.builder().config(sc.getConf).getOrCreateCarbonSession("hdfs://tdhdfs/user/tongdun/carbon","/home/admin/carbon")</span><br><span class="line"></span><br><span class="line">carbon.sql("<span class="operator"><span class="keyword">drop</span> <span class="keyword">table</span> cross_partner_carbon<span class="string">")</span><br><span class="line">carbon.sql("""</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> cross_partner_carbon(</span><br><span class="line">  partnerCode <span class="keyword">string</span>,</span><br><span class="line">  eventType <span class="keyword">string</span>,</span><br><span class="line">  idNumber <span class="keyword">string</span>,</span><br><span class="line">  accountMobile <span class="keyword">string</span>,</span><br><span class="line">  accountEmail <span class="keyword">string</span>,</span><br><span class="line">  accountPhone <span class="keyword">string</span>,</span><br><span class="line">  deviceId <span class="keyword">string</span>,</span><br><span class="line">  cardNumber <span class="keyword">string</span>,</span><br><span class="line">  contact1Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact2Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact3Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact4Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact5Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact1IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact2IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact3IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact4IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact5IdNumber <span class="keyword">string</span>,</span><br><span class="line">  sequenceId <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'carbondata'</span></span><br><span class="line">TBLPROPERTIES (<span class="string">'DICTIONARY_EXCLUDE'</span>=<span class="string">'sequenceId'</span>)</span><br><span class="line"><span class="string">""")</span></span></span><br></pre></td></tr></table></figure>
<p>再生成carbondata表：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"insert into cross_partner_carbon select * from crosspartner"</span>)</span></span></span><br><span class="line"></span><br><span class="line">spark.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select count(*) from cross2partner_dt"</span>)</span></span><span class="class">.show</span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select count(*) from cross_partner_carbon_dm"</span>)</span></span><span class="class">.show</span></span><br><span class="line"></span><br><span class="line">spark.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select * from cross2partner_dt"</span>)</span></span><span class="class">.show</span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select * from cross_partner_carbon_dm"</span>)</span></span><span class="class">.show</span></span><br><span class="line"></span><br><span class="line">val idnumber=<span class="string">""</span></span><br><span class="line">spark.<span class="function"><span class="title">sql</span><span class="params">(s<span class="string">"select sequenceId from cross2partner_dt where partnerCode='007fenqi' and eventType='Loan' and idNumber='$idnumber'"</span>)</span></span><span class="class">.show</span></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(s<span class="string">"select sequenceId from cross_partner_carbon_dm where partnerCode='007fenqi' and eventType='Loan' and idNumber='$idnumber'"</span>)</span></span>.show</span><br></pre></td></tr></table></figure>
<p>比较crosspartner_hdfs的过滤与carbondata的查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carbon.sql("<span class="operator"><span class="keyword">select</span> sequenceId <span class="keyword">from</span> cross_partner_carbon <span class="keyword">where</span> partnerCode=<span class="string">'qufenqi'</span> <span class="keyword">and</span> eventType=<span class="string">'Loan'</span> <span class="keyword">and</span> idNumber=<span class="string">''</span><span class="string">").show</span></span></span><br></pre></td></tr></table></figure>
<h3 id="实验结果">实验结果</h3><p>创建carbondata表时，如果默认所有字段都加上索引，导入数据时Executor会报错OOM。<br>如果去掉所有字段的索引，导入数据很快，但是查询速度就满了。</p>
<p>比较磁盘空间的大小，没有索引下，Parquet和Carbondata差不多</p>
<p><img src="http://img.blog.csdn.net/20170721100001741" alt="1"></p>
<h3 id="问题">问题</h3><h4 id="1-_Hive表与CarbonData表">1. Hive表与CarbonData表</h4><p>activity事件数据,只取借贷和放贷的数据，并保存成临时表crosspartner_hdfs</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">spark.sql("""<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> crosspartner_hdfs(</span><br><span class="line">  partnerCode <span class="keyword">string</span>,</span><br><span class="line">  eventType <span class="keyword">string</span>,</span><br><span class="line">  idNumber <span class="keyword">string</span>,</span><br><span class="line">  accountMobile <span class="keyword">string</span>,</span><br><span class="line">  accountEmail <span class="keyword">string</span>,</span><br><span class="line">  accountPhone <span class="keyword">string</span>,</span><br><span class="line">  deviceId <span class="keyword">string</span>,</span><br><span class="line">  cardNumber <span class="keyword">string</span>,</span><br><span class="line">  contact1Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact2Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact3Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact4Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact5Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact1IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact2IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact3IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact4IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact5IdNumber <span class="keyword">string</span>,</span><br><span class="line">  sequenceId <span class="keyword">string</span></span><br><span class="line">) partitioned <span class="keyword">by</span>(ds <span class="keyword">string</span>)</span><br><span class="line"><span class="string">""")</span><br><span class="line"></span><br><span class="line">spark.sql("""</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> crosspartner_hdfs <span class="keyword">partition</span>(ds=<span class="string">'201706'</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  activity_map.partnerCode <span class="keyword">as</span> partnerCode,</span><br><span class="line">  activity_map.eventType <span class="keyword">as</span> eventType,</span><br><span class="line">  activity_map.idNumber <span class="keyword">as</span> idNumber,</span><br><span class="line">  activity_map.accountMobile <span class="keyword">as</span> accountMobile,</span><br><span class="line">  activity_map.accountEmail <span class="keyword">as</span> accountEmail,</span><br><span class="line">  activity_map.accountPhone <span class="keyword">as</span> accountPhone,</span><br><span class="line">  activity_map.deviceId <span class="keyword">as</span> deviceId,</span><br><span class="line">  activity_map.cardNumber <span class="keyword">as</span> cardNumber,</span><br><span class="line">  activity_map.contact1Mobile <span class="keyword">as</span> contact1Mobile,</span><br><span class="line">  activity_map.contact2Mobile <span class="keyword">as</span> contact2Mobile,</span><br><span class="line">  activity_map.contact3Mobile <span class="keyword">as</span> contact3Mobile,</span><br><span class="line">  activity_map.contact4Mobile <span class="keyword">as</span> contact4Mobile,</span><br><span class="line">  activity_map.contact5Mobile <span class="keyword">as</span> contact5Mobile,</span><br><span class="line">  activity_map.contact1IdNumber <span class="keyword">as</span> contact1IdNumber,</span><br><span class="line">  activity_map.contact2IdNumber <span class="keyword">as</span> contact2IdNumber,</span><br><span class="line">  activity_map.contact3IdNumber <span class="keyword">as</span> contact3IdNumber,</span><br><span class="line">  activity_map.contact4IdNumber <span class="keyword">as</span> contact4IdNumber,</span><br><span class="line">  activity_map.contact5IdNumber <span class="keyword">as</span> contact5IdNumber,</span><br><span class="line">  activity_map.sequenceId <span class="keyword">as</span> sequenceId</span><br><span class="line"><span class="keyword">from</span> activity </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>=<span class="number">2017</span> <span class="keyword">and</span> <span class="keyword">month</span>=<span class="number">6</span></span><br><span class="line"><span class="keyword">and</span> activity_map.eventType <span class="keyword">in</span>(<span class="string">'Loan'</span>,<span class="string">'Lending'</span>)</span><br><span class="line"><span class="string">""")</span></span></span><br></pre></td></tr></table></figure>
<p>上面如果建表时没有指定存储为parquet,最后是part-xxx。<br>而且即使指定了parquet,insert sql也不能指定分区数量。  </p>
<p><strong>下面改用parquet文件夹加上手动分区的形式:cross_partner_hdfs</strong>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Calendar</span>,<span class="type">Date</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">year</span>(</span>ymd: <span class="type">String</span>) = ymd.substring(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">month</span>(</span>ymd: <span class="type">String</span>) = &#123;</span><br><span class="line">  <span class="keyword">var</span> month=ymd.substring(<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">  <span class="keyword">if</span>(month.startsWith(<span class="string">"0"</span>)) month=ymd.substring(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">  month</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">day</span>(</span>ymd: <span class="type">String</span>) = &#123;</span><br><span class="line">  <span class="keyword">var</span> d=ymd.substring(<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">  <span class="keyword">if</span>(d.startsWith(<span class="string">"0"</span>)) d=ymd.substring(<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">  d</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写成parquet文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genCrossData</span>(</span>beg: <span class="type">String</span>, end: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="keyword">var</span> cal = <span class="type">Calendar</span>.getInstance()</span><br><span class="line">    <span class="keyword">var</span> datef=<span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMMdd"</span>)</span><br><span class="line">    <span class="keyword">var</span> beginTime=datef.parse(beg)</span><br><span class="line">    <span class="keyword">var</span> endTime=datef.parse(end)</span><br><span class="line">    <span class="keyword">while</span>(beginTime.compareTo(endTime)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      cal.setTime(beginTime);</span><br><span class="line">      <span class="keyword">var</span> ymd=datef.format(beginTime)</span><br><span class="line">      println(ymd)</span><br><span class="line">      <span class="keyword">var</span> y=year(ymd)</span><br><span class="line">      <span class="keyword">var</span> m=month(ymd)</span><br><span class="line">      <span class="keyword">var</span> d=day(ymd)</span><br><span class="line">      spark.sql(s<span class="string">"""</span><br><span class="line">        select </span><br><span class="line">          activity_map.partnerCode as partnerCode,</span><br><span class="line">          activity_map.eventType as eventType,</span><br><span class="line">          activity_map.idNumber as idNumber,</span><br><span class="line">          activity_map.accountMobile as accountMobile,</span><br><span class="line">          activity_map.accountEmail as accountEmail,</span><br><span class="line">          activity_map.accountPhone as accountPhone,</span><br><span class="line">          activity_map.deviceId as deviceId,</span><br><span class="line">          activity_map.cardNumber as cardNumber,</span><br><span class="line">          activity_map.contact1Mobile as contact1Mobile,</span><br><span class="line">          activity_map.contact2Mobile as contact2Mobile,</span><br><span class="line">          activity_map.contact3Mobile as contact3Mobile,</span><br><span class="line">          activity_map.contact4Mobile as contact4Mobile,</span><br><span class="line">          activity_map.contact5Mobile as contact5Mobile,</span><br><span class="line">          activity_map.contact1IdNumber as contact1IdNumber,</span><br><span class="line">          activity_map.contact2IdNumber as contact2IdNumber,</span><br><span class="line">          activity_map.contact3IdNumber as contact3IdNumber,</span><br><span class="line">          activity_map.contact4IdNumber as contact4IdNumber,</span><br><span class="line">          activity_map.contact5IdNumber as contact5IdNumber,</span><br><span class="line">          activity_map.sequenceId as sequenceId</span><br><span class="line">        from activity </span><br><span class="line">        where year=$y and month=$m and day=$d </span><br><span class="line">        and activity_map.eventType in('Loan','Lending')</span><br><span class="line">        """</span>).repartition(<span class="number">1</span>).write.mode(<span class="string">"overwrite"</span>).parquet(s<span class="string">"/user/hive/warehouse/cross_partner_hdfs/ds=$ymd"</span>)</span><br><span class="line">      cal.add(<span class="type">Calendar</span>.<span class="type">DATE</span>,<span class="number">1</span>);</span><br><span class="line">      beginTime=cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">genCrossData(<span class="string">"20170101"</span>,<span class="string">"20170630"</span>)</span><br><span class="line"></span><br><span class="line">genCrossData(<span class="string">"20170621"</span>,<span class="string">"20170630"</span>)</span><br></pre></td></tr></table></figure>
<p>查询parquet，建立临时表，使用SparkSQL查询</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val df=spark<span class="class">.read</span><span class="class">.parquet</span>(<span class="string">"/user/hive/warehouse/cross_partner_hdfs/*"</span>)</span><br><span class="line">df.<span class="function"><span class="title">createOrReplaceTempView</span><span class="params">(<span class="string">"cross_partner_hdfs"</span>)</span></span></span><br><span class="line"></span><br><span class="line">spark.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select * from cross_partner_hdfs"</span>)</span></span><span class="class">.show</span></span><br><span class="line"></span><br><span class="line">spark.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"select sequenceId from cross_partner_hdfs where partnerCode='qufenqi' and eventType='Loan' and idNumber=''"</span>)</span></span>.show</span><br></pre></td></tr></table></figure>
<p>使用临时表的数据插入到carbondata table</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val df=spark<span class="class">.read</span><span class="class">.parquet</span>(<span class="string">"/user/hive/warehouse/cross_partner_hdfs/*"</span>)</span><br><span class="line">df.<span class="function"><span class="title">createOrReplaceTempView</span><span class="params">(<span class="string">"cross_partner_hdfs"</span>)</span></span></span><br><span class="line"></span><br><span class="line">carbon.<span class="function"><span class="title">sql</span><span class="params">(<span class="string">"insert into cross_partner_carbon select * from cross_partner_hdfs"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>carbondata不认识用df注册的临时表：</p>
<p><img src="http://img.blog.csdn.net/20170714085833872" alt="10"></p>
<p>创建hive表时指定parquet格式，并从parquet文件夹的数据直接生成表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">spark.sql("""<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> crosspartner(</span><br><span class="line">  partnerCode <span class="keyword">string</span>,</span><br><span class="line">  eventType <span class="keyword">string</span>,</span><br><span class="line">  idNumber <span class="keyword">string</span>,</span><br><span class="line">  accountMobile <span class="keyword">string</span>,</span><br><span class="line">  accountEmail <span class="keyword">string</span>,</span><br><span class="line">  accountPhone <span class="keyword">string</span>,</span><br><span class="line">  deviceId <span class="keyword">string</span>,</span><br><span class="line">  cardNumber <span class="keyword">string</span>,</span><br><span class="line">  contact1Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact2Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact3Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact4Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact5Mobile <span class="keyword">string</span>,</span><br><span class="line">  contact1IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact2IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact3IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact4IdNumber <span class="keyword">string</span>,</span><br><span class="line">  contact5IdNumber <span class="keyword">string</span>,</span><br><span class="line">  sequenceId <span class="keyword">string</span></span><br><span class="line">) partitioned <span class="keyword">by</span>(ds <span class="keyword">string</span>) <span class="keyword">stored</span> <span class="keyword">as</span> parquet</span><br><span class="line"><span class="string">""")</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat</span><br><span class="line">import java.util.&#123;Calendar,Date&#125;</span><br><span class="line">def genCrossData(beg: String, end: String) = &#123;</span><br><span class="line">    var cal = Calendar.getInstance()</span><br><span class="line">    var datef=new SimpleDateFormat("</span>yyyyMMdd<span class="string">")</span><br><span class="line">    var beginTime=datef.parse(beg)</span><br><span class="line">    var endTime=datef.parse(end)</span><br><span class="line">    while(beginTime.compareTo(endTime)&lt;=0)&#123;</span><br><span class="line">      cal.setTime(beginTime);</span><br><span class="line">      var ymd=datef.format(beginTime)</span><br><span class="line">      var df = spark.read.parquet(s"</span>/<span class="keyword">user</span>/hive/warehouse/cross_partner_hdfs/ds=$ymd<span class="string">")</span><br><span class="line">      df.repartition(1).write.mode("</span>overwrite<span class="string">").parquet(s"</span>/<span class="keyword">user</span>/hive/warehouse/crosspartner/ds=$ymd<span class="string">")</span><br><span class="line">      spark.sql(s"</span><span class="keyword">alter</span> <span class="keyword">table</span> crosspartner <span class="keyword">add</span> <span class="keyword">partition</span>(ds=<span class="string">'$ymd'</span>)<span class="string">")</span><br><span class="line">      cal.add(Calendar.DATE,1);</span><br><span class="line">      beginTime=cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">genCrossData("</span><span class="number">20170101</span><span class="string">","</span><span class="number">20170630</span><span class="string">")</span></span></span><br></pre></td></tr></table></figure>
<p>或者直接用parquet文件创建外部表：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">spark.sql(<span class="string">"""</span><br><span class="line">create external table cross2partner_dt(</span><br><span class="line">  partnerCode string,</span><br><span class="line">  eventType string,</span><br><span class="line">  idNumber string,</span><br><span class="line">  accountMobile string,</span><br><span class="line">  accountEmail string,</span><br><span class="line">  accountPhone string,</span><br><span class="line">  deviceId string,</span><br><span class="line">  cardNumber string,</span><br><span class="line">  contact1Mobile string,</span><br><span class="line">  contact2Mobile string,</span><br><span class="line">  contact3Mobile string,</span><br><span class="line">  contact4Mobile string,</span><br><span class="line">  contact5Mobile string,</span><br><span class="line">  contact1IdNumber string,</span><br><span class="line">  contact2IdNumber string,</span><br><span class="line">  contact3IdNumber string,</span><br><span class="line">  contact4IdNumber string,</span><br><span class="line">  contact5IdNumber string,</span><br><span class="line">  sequenceId string    </span><br><span class="line">) </span><br><span class="line">partitioned by (ds string)</span><br><span class="line">stored as parquet</span><br><span class="line">location '/user/hive/warehouse/cross_partner_hdfs'</span><br><span class="line">"""</span>)</span><br><span class="line">spark.sql(s<span class="string">"alter table cross2partner_dt add partition(ds='20170101')"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Calendar</span>,<span class="type">Date</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genCrossData</span>(</span>beg: <span class="type">String</span>, end: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="keyword">var</span> cal = <span class="type">Calendar</span>.getInstance()</span><br><span class="line">    <span class="keyword">var</span> datef=<span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMMdd"</span>)</span><br><span class="line">    <span class="keyword">var</span> beginTime=datef.parse(beg)</span><br><span class="line">    <span class="keyword">var</span> endTime=datef.parse(end)</span><br><span class="line">    <span class="keyword">while</span>(beginTime.compareTo(endTime)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      cal.setTime(beginTime);</span><br><span class="line">      <span class="keyword">var</span> ymd=datef.format(beginTime)</span><br><span class="line">      spark.sql(s<span class="string">"alter table cross2partner_dt add partition(ds='$ymd')"</span>)</span><br><span class="line">      cal.add(<span class="type">Calendar</span>.<span class="type">DATE</span>,<span class="number">1</span>);</span><br><span class="line">      beginTime=cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">genCrossData(<span class="string">"20170102"</span>,<span class="string">"20170630"</span>)</span><br></pre></td></tr></table></figure>
<p>一次性将所有数据插入carbondata太慢了</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carbon.sql(s"<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> cross_partner_carbon <span class="keyword">select</span> * <span class="keyword">from</span> crosspartner <span class="keyword">where</span> ds <span class="keyword">like</span> <span class="string">'$ymd%'</span><span class="string">")</span></span></span><br></pre></td></tr></table></figure>
<p><strong>改用按月/天插入carbondata表</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Calendar</span>,<span class="type">Date</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genCrossCarbonData</span>(</span>beg: <span class="type">String</span>, end: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="keyword">var</span> cal = <span class="type">Calendar</span>.getInstance()</span><br><span class="line">    <span class="keyword">var</span> datef=<span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMM"</span>)</span><br><span class="line">    <span class="keyword">var</span> beginTime=datef.parse(beg)</span><br><span class="line">    <span class="keyword">var</span> endTime=datef.parse(end)</span><br><span class="line">    <span class="keyword">while</span>(beginTime.compareTo(endTime)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      cal.setTime(beginTime);</span><br><span class="line">      <span class="keyword">var</span> ymd=datef.format(beginTime)</span><br><span class="line">      println(ymd) </span><br><span class="line">      carbon.sql(s<span class="string">"insert into cross_partner_carbon select * from cross2partner_dt where ds like '$ymd%'"</span>)</span><br><span class="line">      cal.add(<span class="type">Calendar</span>.<span class="type">DATE</span>,<span class="number">1</span>);</span><br><span class="line">      beginTime=cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">genCrossCarbonData(<span class="string">"201701"</span>,<span class="string">"201706"</span>)</span><br></pre></td></tr></table></figure>
<p>导入数据时还是会报错：</p>
<p>增加内存：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/spark/shell \</span><br><span class="line">--conf spark<span class="class">.executor</span><span class="class">.instances</span>=<span class="number">15</span> \</span><br><span class="line">--conf spark<span class="class">.executor</span><span class="class">.cores</span>=<span class="number">2</span> \</span><br><span class="line">--conf spark<span class="class">.executor</span><span class="class">.memory</span>=<span class="number">8</span>g \</span><br><span class="line">--conf spark<span class="class">.driver</span><span class="class">.memory</span>=<span class="number">8</span>g \</span><br></pre></td></tr></table></figure>
<h4 id="2-_carbondata其他设置">2. carbondata其他设置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">carbon.sql("""<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> crosspartner1(</span><br><span class="line">...</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'carbondata'</span></span><br><span class="line">TBLPROPERTIES (<span class="string">'DICTIONARY_EXCLUDE'</span>=<span class="string">'sequenceId,idNumber,accountMobile,accountEmail,accountPhone,deviceId,cardNumber,contact1Mobile,contact2Mobile,contact3Mobile,contact4Mobile,contact5Mobile,contact1IdNumber,contact2IdNumber,contact3IdNumber,contact4IdNumber,contact5IdNumber'</span>)</span><br><span class="line"><span class="string">""")</span><br><span class="line"></span><br><span class="line">carbon.sql("</span><span class="keyword">insert</span> <span class="keyword">into</span> crosspartner1 <span class="keyword">select</span> * <span class="keyword">from</span> cross_partner_hdfs<span class="string">")</span></span></span><br></pre></td></tr></table></figure>
<h4 id="3-_carbon_thrift_server">3. carbon thrift server</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="stylus">bin/spark-submit \</span><br><span class="line">--conf spark<span class="class">.sql</span><span class="class">.hive</span><span class="class">.thriftServer</span><span class="class">.singleSession</span>=true \</span><br><span class="line">--hiveconf hive<span class="class">.server2</span><span class="class">.thrift</span><span class="class">.port</span>=<span class="number">10002</span> \</span><br><span class="line">--hiveconf hive<span class="class">.server2</span><span class="class">.thrift</span><span class="class">.bind</span><span class="class">.host</span>=<span class="string">"192.168.39.25"</span> \</span><br><span class="line">--class org<span class="class">.apache</span><span class="class">.carbondata</span><span class="class">.spark</span><span class="class">.thriftserver</span><span class="class">.CarbonThriftServer</span> \</span><br><span class="line">carbonlib/carbondata_2.<span class="number">11</span>-<span class="number">1.1</span>.<span class="number">1</span>-shade-hadoop2.<span class="number">6.0</span><span class="class">.jar</span> \</span><br><span class="line">hdfs:<span class="comment">//tdhdfs/user/tongdun/carbon</span></span><br><span class="line">hdfs:<span class="comment">//tdhdfs/user/hive/warehouse/carbon.store</span></span><br><span class="line">hdfs:<span class="comment">//tdhdfs/user/tongdun/carbondata/CarbonStore</span></span></span><br></pre></td></tr></table></figure>
<h4 id="4-_spark-2-2-0">4. spark-2.2.0</h4><p>carbondata-1.1.1目前不支持spark2.2。如果加上profile，更改spark版本为2.2.0，编译不通过</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -DskipTests -Pspark-2.2 -Dspark.version=2.2.0 -Dhadoop.version=2.6.0 clean package</span><br><span class="line"></span><br><span class="line"><span class="comment">[WARNING]</span> /Users/zhengqh/Github/carbondata-parent-1.1.1/integration/spark-common/src/main/scala/org/apache/carbondata/spark/rdd/UpdateCoalescedRDD.scala:23: warning: imported `RDD' <span class="keyword">is</span> permanently hidden by definition <span class="keyword">of</span> class RDD in package rdd</span><br><span class="line"><span class="comment">[INFO]</span> import org.apache.spark.rdd.&#123;CoalescedRDDPartition, DataLoadPartitionCoalescer, RDD&#125;</span><br><span class="line"><span class="comment">[INFO]</span>                                                                                 ^</span><br><span class="line"><span class="comment">[WARNING]</span> /Users/zhengqh/Github/carbondata-parent-1.1.1/integration/spark-common/src/main/scala/org/apache/carbondata/spark/util/CarbonScalaUtil.scala:125: warning: non-variable type argument Any in type pattern scala.collection.Map<span class="comment">[Any,Any]</span> <span class="keyword">is</span> unchecked since it <span class="keyword">is</span> eliminated by erasure</span><br><span class="line"><span class="comment">[INFO]</span>         case m: scala.collection.Map<span class="comment">[Any, Any]</span> =&gt;</span><br><span class="line"><span class="comment">[INFO]</span>                                  ^</span><br><span class="line"><span class="comment">[ERROR]</span> /Users/zhengqh/Github/carbondata-parent-1.1.1/integration/spark-common/src/main/scala/org/apache/spark/sql/optimizer/CarbonDecoderOptimizerHelper.scala:87: error: value child <span class="keyword">is</span> not a member <span class="keyword">of</span> org.apache.spark.sql.catalyst.plans.logical.InsertIntoTable</span><br><span class="line"><span class="comment">[INFO]</span>       case i: InsertIntoTable =&gt; process(i.child, nodeList)</span><br><span class="line"><span class="comment">[INFO]</span>                                            ^</span><br><span class="line"><span class="comment">[WARNING]</span> 11 warnings found</span><br><span class="line"><span class="comment">[ERROR]</span> one error found</span><br><span class="line"><span class="comment">[INFO]</span> ------------------------------------------------------------------------</span><br><span class="line"><span class="comment">[INFO]</span> Reactor Summary:</span><br><span class="line"><span class="comment">[INFO]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Parent ........................ SUCCESS <span class="comment">[  5.140 s]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Common ........................ SUCCESS <span class="comment">[ 10.114 s]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Core .......................... SUCCESS <span class="comment">[ 29.232 s]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Processing .................... SUCCESS <span class="comment">[  9.828 s]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Hadoop ........................ SUCCESS <span class="comment">[  5.719 s]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Spark Common .................. FAILURE <span class="comment">[01:10 min]</span></span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Spark Common Test ............. SKIPPED</span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Assembly ...................... SKIPPED</span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Spark2 ........................ SKIPPED</span><br><span class="line"><span class="comment">[INFO]</span> Apache CarbonData :: Spark2 Examples ............... SKIPPED</span><br><span class="line"><span class="comment">[INFO]</span> ------------------------------------------------------------------------</span><br><span class="line"><span class="comment">[INFO]</span> BUILD FAILURE</span><br><span class="line"><span class="comment">[INFO]</span> ------------------------------------------------------------------------</span><br><span class="line"><span class="comment">[INFO]</span> Total time: 02:10 min</span><br><span class="line"><span class="comment">[INFO]</span> Finished at: 2017-08-03T14:39:55+08:00</span><br><span class="line"><span class="comment">[INFO]</span> Final Memory: 72M/786M</span><br><span class="line"><span class="comment">[INFO]</span> ------------------------------------------------------------------------</span><br><span class="line"><span class="comment">[ERROR]</span> Failed to execute goal org.scala-tools:maven-scala-plugin:2.15.2:compile (default) on project carbondata-spark-common: wrap: org.apache.commons.exec.ExecuteException: Process exited with an error: 1(Exit value: 1) -&gt; <span class="comment">[Help 1]</span></span><br><span class="line"><span class="comment">[ERROR]</span></span><br><span class="line"><span class="comment">[ERROR]</span> To see the full stack trace <span class="keyword">of</span> the errors, re-run Maven with the -e switch.</span><br><span class="line"><span class="comment">[ERROR]</span> Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line"><span class="comment">[ERROR]</span></span><br><span class="line"><span class="comment">[ERROR]</span> For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line"><span class="comment">[ERROR]</span> <span class="comment">[Help 1]</span> http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br><span class="line"><span class="comment">[ERROR]</span></span><br><span class="line"><span class="comment">[ERROR]</span> After correcting the problems, you can resume the build with the command</span><br><span class="line"><span class="comment">[ERROR]</span>   mvn &lt;goals&gt; -rf :carbondata-spark-common</span><br></pre></td></tr></table></figure>
<p>如果使用spark2.1.1编译的二进制包，放到spark2.2.0下，也会报错：</p>
<p><img src="http://img.blog.csdn.net/20170803143703134" alt="car"></p>
<p>spark-1.6.2</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertIntoTable</span>(</span></span><br><span class="line">    table: <span class="type">LogicalPlan</span>,</span><br><span class="line">    partition: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Option</span>[<span class="type">String</span>]],</span><br><span class="line">    child: <span class="type">LogicalPlan</span>,</span><br><span class="line">    overwrite: <span class="type">Boolean</span>,</span><br><span class="line">    ifNotExists: <span class="type">Boolean</span>)</span><br><span class="line">  <span class="keyword">extends</span> <span class="type">LogicalPlan</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">children</span>:</span> <span class="type">Seq</span>[<span class="type">LogicalPlan</span>] = child :: <span class="type">Nil</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">output</span>:</span> <span class="type">Seq</span>[<span class="type">Attribute</span>] = <span class="type">Seq</span>.empty</span><br><span class="line"></span><br><span class="line">  assert(overwrite || !ifNotExists)</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">lazy</span> <span class="keyword">val</span> resolved: <span class="type">Boolean</span> = childrenResolved &amp;&amp; child.output.zip(table.output).forall &#123;</span><br><span class="line">    <span class="keyword">case</span> (childAttr, tableAttr) =&gt;</span><br><span class="line">      <span class="type">DataType</span>.equalsIgnoreCompatibleNullability(childAttr.dataType, tableAttr.dataType)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spark-2.2.0</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertIntoTable</span>(</span></span><br><span class="line">    table: <span class="type">LogicalPlan</span>,</span><br><span class="line">    partition: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Option</span>[<span class="type">String</span>]],</span><br><span class="line">    query: <span class="type">LogicalPlan</span>,</span><br><span class="line">    overwrite: <span class="type">Boolean</span>,</span><br><span class="line">    ifPartitionNotExists: <span class="type">Boolean</span>)</span><br><span class="line">  <span class="keyword">extends</span> <span class="type">LogicalPlan</span> &#123;</span><br><span class="line">  <span class="comment">// We don't want `table` in children as sometimes we don't want to transform it.</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">children</span>:</span> <span class="type">Seq</span>[<span class="type">LogicalPlan</span>] = query :: <span class="type">Nil</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">output</span>:</span> <span class="type">Seq</span>[<span class="type">Attribute</span>] = <span class="type">Seq</span>.empty</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">lazy</span> <span class="keyword">val</span> resolved: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改为i.query后，重新编译：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Apache CarbonData :: Assembly ...................... FAILURE [  2.180 s]</span><br><span class="line">[INFO] Apache CarbonData :: Spark2 ........................ SKIPPED</span><br><span class="line">[INFO] Apache CarbonData :: Spark2 Examples ............... SKIPPED</span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO] Total time: 01:57 min</span><br><span class="line">[INFO] Finished at: 2017-08-03T15:33:59+08:00</span><br><span class="line">[INFO] Final Memory: 83M/728M</span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[ERROR] Failed to <span class="operator"><span class="keyword">execute</span> goal <span class="keyword">on</span> <span class="keyword">project</span> carbondata-<span class="keyword">assembly</span>: Could <span class="keyword">not</span> resolve dependencies <span class="keyword">for</span> <span class="keyword">project</span> org.apache.carbondata:carbondata-<span class="keyword">assembly</span>:pom:<span class="number">1.1</span><span class="number">.1</span>: Could <span class="keyword">not</span> find artifact org.apache.carbondata:carbondata-spark:jar:<span class="number">1.1</span><span class="number">.1</span> <span class="keyword">in</span> central (<span class="keyword">http</span>://repo1.maven.org/maven2) -&gt; [<span class="keyword">Help</span> <span class="number">1</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] <span class="keyword">To</span> see the <span class="keyword">full</span> stack <span class="keyword">trace</span> <span class="keyword">of</span> the <span class="keyword">errors</span>, re-run Maven <span class="keyword">with</span> the -<span class="keyword">e</span> <span class="keyword">switch</span>.</span><br><span class="line">[<span class="keyword">ERROR</span>] Re-run Maven <span class="keyword">using</span> the -X <span class="keyword">switch</span> <span class="keyword">to</span> <span class="keyword">enable</span> <span class="keyword">full</span> debug <span class="keyword">logging</span>.</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] <span class="keyword">For</span> more information about the <span class="keyword">errors</span> <span class="keyword">and</span> possible solutions, please <span class="keyword">read</span> the <span class="keyword">following</span> articles:</span><br><span class="line">[<span class="keyword">ERROR</span>] [<span class="keyword">Help</span> <span class="number">1</span>] <span class="keyword">http</span>://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] <span class="keyword">After</span> correcting the problems, you can <span class="keyword">resume</span> the <span class="keyword">build</span> <span class="keyword">with</span> the command</span><br><span class="line">[<span class="keyword">ERROR</span>]   mvn &lt;goals&gt; -rf :carbondata-<span class="keyword">assembly</span></span></span><br></pre></td></tr></table></figure>
<p>默认1.6版本的assembly无法下载1.1.1的pom,将默认版本改为(添加)2.2.0</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">id</span>&gt;</span>spark-2.2<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="title">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.carbondata<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>carbondata-spark2<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache CarbonData&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://github.com/zqhxuyuan/categories/bigdata/"/>
    
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Deep into Apache Gearpump</title>
    <link href="http://github.com/zqhxuyuan/2017/06/25/2017-06-24-Gearpump/"/>
    <id>http://github.com/zqhxuyuan/2017/06/25/2017-06-24-Gearpump/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2017-06-25T15:24:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Deep into Apache Gearpump<br><a id="more"></a></p>
<p><strong>Prefix</strong>: I’ve heard Gearpump nearly one or two years ago, but never take a deep look inside. Until recently I’m almost done writing my chinese book about kafka internal implimentation, and decide to add some kafka relation opensouce system to my book’s appendix, such as spark streaming,storm,flink, and gearpump! So I finaly have a chance to deep into Gearpump.</p>
<h2 id="Introduce">Introduce</h2><p>According to offical documentation: “Gearpump is a 100% Akka based platform. We model big data streaming within the Akka actor hierarchy”. Below It’s Gearpump Actor Hierarchy architecture. PS: If you don’t know Actor right now, It’s fine, just think that’s another RPC layer or message transformer.</p>
<p><img src="http://gearpump.apache.org/releases/latest/img/actor_hierarchy.png" alt="geararch"></p>
<p>Everything in the diagram is an actor; they fall into two categories, Cluster Actors and Application Actors.</p>
<p><strong>Cluster Actors</strong></p>
<p><em>Worker</em>: Maps to a physical worker machine. It is responsible for <span style="border-bottom:1px dashed red;">managing resources</span> and report metrics on that machine.</p>
<p><em>Master</em>: Heart of the cluster, which <span style="border-bottom:1px dashed red;">manages workers, resources, and applications</span>. The main function is delegated to three child actors, App Manager, Worker Manager, and Resource Scheduler.</p>
<p><strong>Application Actors</strong></p>
<p><em>AppMaster</em>: Responsible to <span style="border-bottom:1px dashed red;">schedule the tasks to workers</span> and manage the state of the application. Different applications have different AppMaster instances and are isolated.</p>
<p><em>Executor</em>: Child of AppMaster, represents a JVM process. Its job is to <span style="border-bottom:1px dashed red;">manage the life cycle of tasks</span> and recover the tasks in case of failure.</p>
<p><em>Task</em>: Child of Executor, does the real job. Every task actor has a global unique address. One task actor can send data to any other task actors. This gives us great flexibility of how the computation DAG is distributed.</p>
<blockquote>
<p>All actors in the graph are weaved together with actor supervision, and actor watching and every error is handled properly via supervisors. In a master, a risky job is isolated and delegated to child actors, so it’s more robust. In the application, an extra intermediate layer “Executor” is created so that we can do fine-grained and fast recovery in case of task failure. A master watches the lifecycle of AppMaster and worker to handle the failures, but the life cycle of Worker and AppMaster are not bound to a Master Actor by supervision, so that Master node can fail independently. Several Master Actors form an Akka cluster, the Master state is exchanged using the Gossip protocol in a conflict-free consistent way so that there is no single point of failure. With this hierarchy design, we are able to achieve high availability.</p>
</blockquote>
<p>Next It’s a good entrance to knowing some <a href="http://gearpump.apache.org/releases/latest/introduction/basic-concepts/index.html" target="_blank" rel="external">basic concepts</a>. It’s very necessary, you should first take a detail/serious look at if you want to know how gearpump works.</p>
<p><strong>Master &amp; Worker</strong></p>
<blockquote>
<p>Gearpump follow <strong>master slave architecture</strong>. Every cluster contains one or more Master node, and several worker nodes. Worker node is responsible to manage local resources on single machine, and Master node is responsible to manage global resources of the whole cluster.</p>
</blockquote>
<p>If you have already know hadoop/spark such bigdata system, you should familiar those terminology. Here is the first comparison about gearpump and other system.</p>
<table>
<thead>
<tr>
<th>bigdata system</th>
<th>Master</th>
<th>Slave</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hadoop HDFS</td>
<td>NameNode</td>
<td>DataNode</td>
</tr>
<tr>
<td>Hadoop YARN</td>
<td>ReourceManager</td>
<td>NodeManager</td>
</tr>
<tr>
<td>Spark</td>
<td>ClusterManagement</td>
<td>Worker</td>
</tr>
<tr>
<td>Storm</td>
<td>Nimbus</td>
<td>Supervisor</td>
</tr>
<tr>
<td>Gearpump</td>
<td>Master</td>
<td>Worker</td>
</tr>
</tbody>
</table>
<p><strong>Application &amp; AppMaster &amp; Executor</strong></p>
<blockquote>
<p><strong>Application</strong> is what we want to parallel and run on the cluster. There are different application types, for example MapReduce application and streaming application are different application types. Gearpump natively supports Streaming Application types, it also contains several templates to help user to create custom application types, like distributedShell.</p>
<p>In runtime, every application instance is represented by a single <strong>AppMaster</strong> and a list of <strong>Executors</strong>. AppMaster represents the command and controls center of the Application instance. It communicates with user, master, worker, and executor to get the job done. Each executor is a parallel unit for distributed application. Typically AppMaster and Executor will be started as JVM processes on worker nodes.</p>
</blockquote>
<p>Now we have talking all important components in gearpump. Notice here we did’t mentioned Task as appeared in previous actor hierarchy. Also notice that Application is not an actor but an Java main class. Next take a look at Application Submission Flow in gearpump.</p>
<blockquote>
<p>When user submits an application to Master, Master will first find an available worker to start the AppMaster. After AppMaster is started, AppMaster will request Master for more resources (worker) to start executors. The Executor now is only an empty container. After the executors are started, the AppMaster will then distribute real computation tasks to the executor and run them in parallel way.</p>
<p>To submit an application, a Gearpump client specifies a computation defined within a DAG and submits this to an active master. The SubmitApplication message is sent to the Master who then forwards this to an AppManager. </p>
</blockquote>
<p><img src="http://gearpump.apache.org/releases/latest/img/submit.png" alt="submit app"> </p>
<blockquote>
<p>The AppManager locates an available worker and launches an AppMaster in a sub-process JVM of the worker. The AppMaster will then negotiate with the Master for Resource allocation in order to distribute the DAG as defined within the Application. The allocated workers will then launch Executors (new JVMs).</p>
</blockquote>
<p><img src="http://gearpump.apache.org/releases/latest/img/submit2.png" alt="launch"></p>
<p>Here I summary basic steps of submit application. notice the step number below are’t corresponding to the official pictures above.</p>
<ol>
<li>User(client) submits an streaming application to gearpump Master;</li>
<li>Master forward <code>SubmitApplication</code> request to AppManager;</li>
<li>Master will first find an available worker to start the AppMaster;</li>
<li>AppMaster started(as Executor) on one of worker which master specified, until now, AppManager on Master can send  <code>SubmitApplicationResult</code> to client;</li>
<li>AppMaster send <code>RequestResource</code> to master, the purpose of this step is ask resources to run/launch Tasks which doing real job. After all, AppMaster is not responsible to running job, but instead let Tasks doing the job. Notice the lifecycle of both AppMaster and Tasks all resides in Executors. So If you want to start AppMaster or Task, you first must start Executor, then let Executor start AppMaster and Task;</li>
<li>Once AppMaster receive <code>ResouceAllocated</code> response, it’ll send <code>LaunchExecutor</code> to workers which Master pointing out where to go. For ex, the ResouceAllocated response says by Master to AppMaster: you can run executors on workers #1 and #2. Then AppMaster will send LaunchExecutor request to this two workers;</li>
<li>The Workers receive LaunchExecutor request from AppMaster, it then spawn an Executor as a java process. The reason why spawn a new process here is that the Executor and Worker thread should separate, which means the working process of Executor and Worker shouldn’t affect each other;</li>
<li>Just like Worker register to Master for reporting resources, the Executor also register to AppMaster by sending <code>RegisterExecutor</code> request. If someone regist to other-one, that means someone wants to be managed/controlled by other-one. for example, students regist to school, company regist to Mainland China, employee regist to company and so on;</li>
<li>The AppMaster receive <code>RegisterExecutor</code> request from Executor on Worker, it then ask Executor to start Task;</li>
<li>As AppMaster may getting more than one resouce at step6, and each Executor all register to AppMaster, so AppMaster can start multi task on this registerd Executor;</li>
<li>Each Task reside in Executor has DAG information defined within Application, so every Task can doing real job.</li>
</ol>
<p>The workflow above was extraordinary like yarn application below. I take the picture and description from <a href="https://hortonworks.com/blog/apache-hadoop-yarn-concepts-and-applications/" target="_blank" rel="external">this excellent hortonworks blog</a>.</p>
<ol>
<li>A client program <em>submits</em> the application, including the necessary specifications to launch the application-specific <strong>ApplicationMaster</strong> itself.</li>
<li>The <strong>ResourceManager</strong> assumes the responsibility to negotiate a specified container in which to <em>start</em> the ApplicationMaster and then <em>launches</em> the ApplicationMaster.</li>
<li>The ApplicationMaster, on boot-up, <em>registers</em> with the ResourceManager – the registration allows the client program to query the ResourceManager for details, which allow it to  directly communicate with its own ApplicationMaster.</li>
<li>During normal operation the ApplicationMaster negotiates appropriate resource containers via the <em>resource-request </em>protocol.</li>
<li>On successful <em>container allocations</em>, the ApplicationMaster <em>launches</em> the container by providing the container launch specification to the NodeManager. The launch specification, typically, includes the necessary information to allow the container to communicate with the ApplicationMaster itself.</li>
<li>The application code executing within the container then provides necessary information (progress, status etc.) to its ApplicationMaster via an application-specific protocol.</li>
<li>During the application execution, the client that submitted the program communicates directly with the ApplicationMaster to get status, progress updates etc. via an application-specific protocol.</li>
<li>Once the application is complete, and all necessary work has been finished, the ApplicationMaster deregisters with the ResourceManager and shuts down, allowing its own container to be repurposed.</li>
</ol>
<p><img src="https://2xbbhjxc6wk3v21p62t8n4d4-wpengine.netdna-ssl.com/wp-content/uploads/2012/08/yarnflow.png" alt="yarn"></p>
<p>The picture above start two client application to yarn cluster, the ApplicationMaster reside on node2 of red one start three containers on node1 and node3, the ApplicationMaster reside on node1 of blue one only start one container. </p>
<p>In yarn, ResouceManager take responsible to launch ApplicationManager on one of container, and launching Tasks on containers is the responsibility of ApplicationManager. But as you know, the ApplicationManager did’t know cluster resources, so he ask ResouceManager to give him the information of where to start tasks. Now we summary some conclusions:</p>
<ol>
<li>ResouceManager launch ApplicationManager on one of NodeManager.</li>
<li>ApplicationManager launch Tasks on multi NodeManagers.</li>
<li>NodeManagers report resouce to ResouceManager.</li>
<li>Containers report task execution progress to ApplicationManager.  </li>
<li>ResouceManager manager ApplicationManager, and ApplicationManager manager tasks. If all tasks monitored by ApplicationManager was finished, then Application registered to ReousceManager was completed.</li>
</ol>
<p>Step into gearpump, there are similiarity idea inspired from yarn. We could take yarn’s container as gearpump’s Executor, and yarn’s NodeManager as gearpump’s Worker. Because Containers reside in NodeManager at yarn world, and Executors reside in Worker at gearpump world.</p>
<p><img src="http://img.blog.csdn.net/20170624165428321" alt="yarn-gp"></p>
<p>We could also consider yarn’s ResouceManager as gearpump’s AppManager. Note that AppManager is different from AppMaster, which the former is at Master side, and the latter is at Worker side.</p>
<p>The Master in Gearpump have three main components: AppManager,Scheduler,Worker Manager. In reality, there are non WorkerManager class around gearpump source code,but Master indeed has a map which mapping Worker ActorRef to WorkerId. </p>
<p>After oveview gearpump architecture, Let’s begin explore gearpump inside now.</p>
<h2 id="Part-1:_Application">Part-1: Application</h2><p>First given a WordCount example, We sumbit an StreamApplication through ClientContext. Inside the application() method, we create three <code>Processor</code> and connect by <code>~</code> to construct a DAG graph.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AkkaApp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">application</span>(</span>config: <span class="type">ParseResult</span>, system: <span class="type">ActorSystem</span>): </span><br><span class="line">      <span class="type">StreamApplication</span> = &#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> actorSystem = system</span><br><span class="line">    <span class="keyword">val</span> split = <span class="keyword">new</span> <span class="type">Split</span></span><br><span class="line">    <span class="keyword">val</span> sourceProcessor = <span class="type">DataSourceProcessor</span>(split, <span class="number">2</span>, <span class="string">"Split"</span>)</span><br><span class="line">    <span class="keyword">val</span> sum = <span class="type">Processor</span>[<span class="type">Sum</span>](<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> computation = sourceProcessor ~ <span class="type">HashPartitioner</span> ~&gt; sum</span><br><span class="line">    <span class="keyword">val</span> app = <span class="type">StreamApplication</span>(<span class="string">"wordCount"</span>, <span class="type">Graph</span>(computation))</span><br><span class="line">    app</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(</span>akkaConf: <span class="type">Config</span>, args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> context: <span class="type">ClientContext</span> = <span class="type">ClientContext</span>(akkaConf)</span><br><span class="line">    <span class="keyword">val</span> app = application(config, context.system)</span><br><span class="line">    context.submit(app)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StreamApplication is one of gearpump supported application type, there’re other applications such as MapReduce could run in gearpump. Each Application type has special appMaster class, StreamApplication’s appMaster is AppMaster. There’re some other ApplicationMaster actor implementation embeded: DistShellAppMaster,DistServiceAppMaster,and AppMaster.</p>
<p>Note Application is a scala App, but ApplicationMaster is an Actor. So what’s different between an App and and Actor? Well, App normaly has a main method doing what you want, but actor doing much more complicate thing.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Application</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span>:</span> <span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">userConfig</span>(</span><span class="keyword">implicit</span> system: <span class="type">ActorSystem</span>): <span class="type">UserConfig</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">appMaster</span>:</span> <span class="type">Class</span>[_ &lt;: <span class="type">ApplicationMaster</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationMaster</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Actor</span></span><br><span class="line"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamApplication</span>(</span>) <span class="keyword">extends</span> <span class="type">Application</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">appMaster</span>:</span> <span class="type">Class</span>[_ &lt;: <span class="type">ApplicationMaster</span>] = classOf[<span class="type">AppMaster</span>] </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppMaster</span>(</span>appContext: <span class="type">AppMasterContext</span>, app: <span class="type">AppDescription</span>) </span><br><span class="line">  <span class="keyword">extends</span> <span class="type">ApplicationMaster</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>ClientContext is a user facing util to submit/manage an application. The AppDescription describe application metadata such as appMaster name(here is AppMaster).</p>
<p>In the Akka world, Actor is the king. Client send SubmitApplication request to Master Actor, and expect get SubmitApplicationResult response from Master. Messages are sent to an Actor through one of the following methods.</p>
<ul>
<li><code>!</code> means “fire-and-forget”, e.g. send a message asynchronously and return immediately. Also known as tell.</li>
<li><code>?</code> sends a message asynchronously and returns a Future representing a possible reply. Also known as ask. That’s the way client submit application doing here.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientContext</span>(</span>config: <span class="type">Config</span>, sys: <span class="type">ActorSystem</span>, _master: <span class="type">ActorRef</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(</span>app: <span class="type">Application</span>, jar: <span class="type">String</span>, executorNum: <span class="type">Int</span>)= &#123;</span><br><span class="line">    <span class="keyword">val</span> appName = ...</span><br><span class="line">    <span class="keyword">val</span> submissionConfig = ...</span><br><span class="line">    <span class="keyword">val</span> appDescription = <span class="type">AppDescription</span>(appName,app.appMaster.getName,...)</span><br><span class="line">    <span class="keyword">val</span> appJar = <span class="type">Option</span>(jar).map(loadFile)</span><br><span class="line">    submitApplication(<span class="type">SubmitApplication</span>(appDescription, appJar))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">submitApplication</span>(</span>submitApplication: <span class="type">SubmitApplication</span>)=&#123;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="type">ActorUtil</span>.askActor[<span class="type">SubmitApplicationResult</span>](</span><br><span class="line">        master, submitApplication, masterClientTimeout)</span><br><span class="line">    <span class="keyword">val</span> application = result.appId <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Success</span>(appId) =&gt;</span><br><span class="line">        <span class="type">Console</span>.println(s<span class="string">"Submit app succeed. The app id is $appId"</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="type">RunningApplication</span>(appId, master, masterClientTimeout)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Failure</span>(ex) =&gt; <span class="keyword">throw</span> ex</span><br><span class="line">    &#125;</span><br><span class="line">    application</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now Let’s see how Master deal with SubmitApplication. Before this, you should know that client only submit application when Master has started. Also note that when start Master, we also start some Workers to form a gearpump cluster. Only then the cluster is stabled, client then can submit application. We can see that when startup Master, in preStart() method, Master created an AppManager and Scheduler by invoking <code>context.actorOf(...)</code>. That means before client submit application, AppManager and Scheduler already exists in Master, and they both preparing to work.</p>
<p>We’re also seeing a <code>receiveHandler()</code> method return Receive object, and was invoked by <code>waitForNextWorkerId()</code> method. What <code>context.become()</code> and <code>orElse</code> meaning? well, normaly you define one receive method, but here you have seen there’re multi receive method, so become() method of ActorContext is used for switchover between different receive method.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[cluster] <span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Actor</span> <span class="keyword"><span class="keyword">with</span></span> <span class="title">Stash</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> kvService = context.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">InMemoryKVService</span>()))</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> appManager: <span class="type">ActorRef</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> scheduler: <span class="type">ActorRef</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> workers = <span class="keyword">new</span> immutable.<span class="type">HashMap</span>[<span class="type">ActorRef</span>, <span class="type">WorkerId</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// when start up Master, send GetKV to kvService immediatery</span></span><br><span class="line">  kvService ! <span class="type">GetKV</span>(<span class="type">MASTER_GROUP</span>, <span class="type">WORKER_ID</span>) </span><br><span class="line">  context.become(waitForNextWorkerId) <span class="comment">// wait for getting result </span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForNextWorkerId</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GetKVSuccess</span>(_, result) =&gt; <span class="comment">// receive GetKV response</span></span><br><span class="line">      context.become(receiveHandler) <span class="comment">// switchover to receiveHandler</span></span><br><span class="line">      unstashAll()</span><br><span class="line">    <span class="keyword">case</span> msg =&gt; stash() <span class="comment">// why do we stash here?</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receiveHandler</span>:</span> <span class="type">Receive</span> = workerMsgHandler orElse</span><br><span class="line">    appMasterMsgHandler orElse <span class="comment">// AppMaster to Master</span></span><br><span class="line">    onMasterListChange orElse <span class="comment">// Master change</span></span><br><span class="line">    clientMsgHandler orElse <span class="comment">// Client to Master. you'll see submit app here</span></span><br><span class="line">    kvServiceMsgHandler orElse <span class="type">ActorUtil</span>.defaultMsgHandler(self)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span>(</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    appManager = context.actorOf(</span><br><span class="line">        <span class="type">Props</span>(<span class="keyword">new</span> <span class="type">AppManager</span>(kvService, <span class="type">AppMasterLauncher</span>)),</span><br><span class="line">        classOf[<span class="type">AppManager</span>].getSimpleName)</span><br><span class="line">    scheduler = context.actorOf(<span class="type">Props</span>(schedulerClass))</span><br><span class="line">    context.system.eventStream.subscribe(self,classOf[<span class="type">DisassociatedEvent</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now you have overview the main function in Master, lets see how clientMsgHandler receive method response to client’s submit application request. I have omit other unimportance request only left submit and restart application. The Master delegate/forward reqeust to AppManager.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clientMsgHandler</span>:</span> Receive = &#123;</span><br><span class="line">  case app: SubmitApplication =&gt; appManager.forward(app)</span><br><span class="line">  case app: RestartApplication =&gt; appManager.forward(app)</span><br><span class="line">  case register: RegisterAppResultListener =&gt; appManager forward register</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AppManager is dedicated child of Master to manager all applications. The AppManager behaviour similar as Master.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[cluster] <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span>(</span></span><br><span class="line">    kvService: <span class="type">ActorRef</span>, launcher: <span class="type">AppMasterLauncherFactory</span>) </span><br><span class="line">    <span class="keyword">extends</span> <span class="type">Actor</span> <span class="keyword">with</span> <span class="type">Stash</span> <span class="keyword">with</span> <span class="type">TimeOutScheduler</span> &#123;</span><br><span class="line"></span><br><span class="line">  kvService ! <span class="type">GetKV</span>(<span class="type">MASTER_GROUP</span>, <span class="type">MASTER_STATE</span>)</span><br><span class="line">  context.become(waitForMasterState)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForMasterState</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GetKVSuccess</span>(_, result) =&gt;</span><br><span class="line">      context.become(receiveHandler)</span><br><span class="line">      unstashAll()</span><br><span class="line">    <span class="keyword">case</span> msg =&gt; stash()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receiveHandler</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    clientMsgHandler orElse <span class="comment">// Client to AppManager</span></span><br><span class="line">      appMasterMessage orElse <span class="comment">// AppMaster to AppManager</span></span><br><span class="line">      selfMsgHandler orElse</span><br><span class="line">      workerMessage orElse <span class="comment">// Worker to AppManager</span></span><br><span class="line">      appDataStoreService orElse terminationWatch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">clientMsgHandler</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">SubmitApplication</span>(app, jar, username) =&gt;</span><br><span class="line">      <span class="keyword">val</span> client = sender()</span><br><span class="line">      context.actorOf(launcher.props(</span><br><span class="line">        nextAppId, -<span class="number">1</span>, app, jar, username, context.parent, client))</span><br><span class="line">      <span class="comment">// ommit something like save application metadata to kv store</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Master create AppManager by invoke <code>context.actorOf(Props(...))</code>, here AppManager create AppMasterLauncher Actor by <code>context.actorOf(launcher.props(..))</code>. <strong><code>AppMasterLauncher</code> is a child Actor of <code>AppManager</code>, it is responsible to launch the <code>AppMaster</code> on the cluster.</strong> </p>
<p>When AppManager receive SubmitApplication from client, it create AppMasterLauncher, and send RequestResource to master then wait for ResourceAllocation. </p>
<p>When AppMasterLauncher receive ResourceAllocated response from master, it will Try to launch a executor for AppMaster on worker specified by ResourceAllocated response.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppMasterLauncher</span>(</span>...,master: <span class="type">ActorRef</span>, client: <span class="type">ActorRef</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">  <span class="type">LOG</span>.info(s<span class="string">"Ask Master resource to start AppMaster $appId..."</span>)</span><br><span class="line">  master ! <span class="type">RequestResource</span>(appId, <span class="type">ResourceRequest</span>(<span class="type">Resource</span>(<span class="number">1</span>))</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span>:</span> <span class="type">Receive</span> = waitForResourceAllocation</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForResourceAllocation</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ResourceAllocated</span>(allocations) =&gt;</span><br><span class="line">      <span class="keyword">val</span> <span class="type">ResourceAllocation</span>(resource, worker, workerId) = allocations(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> workerInfo = <span class="type">WorkerInfo</span>(workerId, worker)</span><br><span class="line">      <span class="keyword">val</span> appMasterContext = <span class="type">AppMasterContext</span>(...)</span><br><span class="line">      <span class="comment">// Try to launch a executor for AppMaster on worker for app</span></span><br><span class="line">      <span class="keyword">val</span> name = <span class="type">ActorUtil</span>.actorNameForExecutor(appId, executorId)</span><br><span class="line">      <span class="keyword">val</span> selfPath = <span class="type">ActorUtil</span>.getFullPath(context.system, self.path)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> executorJVM = <span class="type">ExecutorJVMConfig</span>(</span><br><span class="line">        classOf[<span class="type">ActorSystemBooter</span>].getName, <span class="type">Array</span>(name, selfPath), jar,</span><br><span class="line">        username, appMasterAkkaConfig)</span><br><span class="line"></span><br><span class="line">      worker ! <span class="type">LaunchExecutor</span>(appId, executorId, resource, executorJVM)</span><br><span class="line">      context.become(waitForActorSystemToStart(worker, appMasterContext, resource))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let’s see how Worker deal with LaunchExecutor reqeust from AppMasterLauncher.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[cluster] <span class="class"><span class="keyword">class</span> <span class="title">Worker</span>(</span>masterProxy: <span class="type">ActorRef</span>) <span class="keyword">extends</span> <span class="type">Actor</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">service</span>:</span> <span class="type">Receive</span> = appMasterMsgHandler orElse clientMessageHandler </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">appMasterMsgHandler</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> launch: <span class="type">LaunchExecutor</span> =&gt;</span><br><span class="line">      <span class="keyword">val</span> executor = context.actorOf(<span class="type">Props</span>(classOf[<span class="type">ExecutorWatcher</span>], </span><br><span class="line">        launch, masterInfo, ioPool, jarStoreClient, executorProcLauncher))</span><br><span class="line">      context.watch(executor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The ExecutorWatcher create a java process and the main class <code>ActorSystemBooter</code> is coming from ExecutorJVMConfig which defined in AppMasterLauncher.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecutorWatcher</span>(</span>launch: <span class="type">LaunchExecutor</span>, </span><br><span class="line">    procLauncher: <span class="type">ExecutorProcessLauncher</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">  <span class="keyword">val</span> ctx = launch.executorJvmConfig</span><br><span class="line">  procLauncher.createProcess(ctx.mainClass, ctx.arguments)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExecutorWatcher is an Actor, ActorSystemBooter is an pure scala app. But inside ActorSystemBooter’s main method, it create another actor: Daemon.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorSystemBooter</span>(</span>config: <span class="type">Config</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">boot</span>(</span>name: <span class="type">String</span>, reportBackActor: <span class="type">String</span>): <span class="type">ActorSystem</span> = &#123;</span><br><span class="line">    system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Daemon</span>], name, reportBackActor), <span class="string">"daemon"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorSystemBooter</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span>(</span>config: <span class="type">Config</span>): <span class="type">ActorSystemBooter</span> = <span class="keyword">new</span> <span class="type">ActorSystemBooter</span>(config)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span>(</span>args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> name = args(<span class="number">0</span>) <span class="comment">// The parameter was passed when construnct </span></span><br><span class="line">    <span class="keyword">val</span> reportBack = args(<span class="number">1</span>) <span class="comment">// ExecutorJVMConfig at AppMasterLauncher</span></span><br><span class="line">    apply(config).boot(name, reportBack)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Daemon</span>(</span><span class="keyword">val</span> name: <span class="type">String</span>, reportBack: <span class="type">String</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> reportBackActor = context.actorSelection(reportBack)</span><br><span class="line">    reportBackActor ! <span class="type">RegisterActorSystem</span>(</span><br><span class="line">        <span class="type">ActorUtil</span>.getSystemAddress(context.system).toString)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Those many Actor headache me, and the invoke chain nest and nest again. So I draw a picture to help me understand what happend all the way around. To make my picture looks vividly, I use gear to indicate an Actor, you can see except ActorSystemBooter, all others are Actor. The underline character means request. Let me outlines some import steps.</p>
<ol>
<li>AppManager create AppMasterLauncher which then send RequestResource to Master</li>
<li>After AppMasterLauncher receive ResourceAllocated, it send LauncherExecutor request to Worker</li>
<li>Worker create an ExecutorWatcher and create a java Daemon process which send RegisterActorSystem request back to Master</li>
</ol>
<p><img src="http://img.blog.csdn.net/20170624205039225" alt="9"></p>
<p>Now the AppMasterLauncher is going to deal with RegisterActorSystem request. If you backward to check AppMasterLauncher, you can find that: after AppMasterLauncher send LaunchExecutor, it is waiting for ActorSystem to start.</p>
<p>After Daemon actor in Worker send <code>RegisterActorSystem</code> request to <code>AppMasterLauncher</code>, the AppMasterLauncher finally have chance to receive RegisterActorSystem event, first it send <code>ActorSystemRegistered</code> request to Daemon, and then send another request <code>CreateActor</code> to Daemon again.</p>
<ol>
<li>Daemon on Worker send RegisterActorSystem request to AppMasterLauncher</li>
<li>AppMasterLauncher on Master send ActorSystemRegistered to Daemon on Worker</li>
<li>AppMasterLauncher on Master send CreateActor to Daemon on Worker</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppMasterLauncher</span>(</span>...,master: <span class="type">ActorRef</span>, client: <span class="type">ActorRef</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForResourceAllocation</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    worker ! <span class="type">LaunchExecutor</span>(appId, executorId, resource, executorJVM)</span><br><span class="line">    context.become(</span><br><span class="line">        waitForActorSystemToStart(worker, appMasterContext, resource))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForActorSystemToStart</span>(</span>worker: <span class="type">ActorRef</span>, appContext: <span class="type">AppMasterContext</span>,</span><br><span class="line">      resource: <span class="type">Resource</span>): <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">RegisterActorSystem</span>(systemPath) =&gt;</span><br><span class="line">      sender ! <span class="type">ActorSystemRegistered</span>(worker)</span><br><span class="line">      <span class="comment">// There're many masters construct Master HA in case of fault</span></span><br><span class="line">      <span class="keyword">val</span> masterAddress = systemConfig.getStringList(<span class="type">GEARPUMP_CLUSTER_MASTERS</span>)</span><br><span class="line">        .asScala.map(<span class="type">HostPort</span>(_)).map(<span class="type">ActorUtil</span>.getMasterActorPath)</span><br><span class="line"></span><br><span class="line">      sender ! <span class="type">CreateActor</span>(</span><br><span class="line">        <span class="type">AppMasterRuntimeEnvironment</span>.props(masterAddress, app, appContext))</span><br><span class="line">      context.become(waitForAppMasterToStart(worker, appMasterTimeout))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForAppMasterToStart</span>(</span>worker: <span class="type">ActorRef</span>, cancel: <span class="type">Cancellable</span>)= &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ActorCreated</span>(appMaster, _) =&gt;</span><br><span class="line">      cancel.cancel()</span><br><span class="line">      sender ! <span class="type">BindLifeCycle</span>(appMaster)</span><br><span class="line">      <span class="type">LOG</span>.info(s<span class="string">"AppMaster is created, mission complete..."</span>)</span><br><span class="line">      replyToClient(<span class="type">SubmitApplicationResult</span>(<span class="type">Success</span>(appId)))</span><br><span class="line">      context.stop(self)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Seems AppMasterLauncher and Daemon are playing ping-pong, and they both back and forth many times. Finally after Daemon create another Actor which we’ll talk about later, it then send ActorCreated back to AppMasterLauncher. </p>
<ol>
<li>Daemon on Worker send ActorCreated reqeust to AppMasterLauncher on Master</li>
<li>AppMasterLauncher send BindLifeCycle request back to Daemon on Worker</li>
<li>and then send SubmitApplicationResult back to Client</li>
<li>Daemon on Worker receive BindLifeCycle request from AppMasterLauncher and watch the actor. this actor being watched by Daemon is AppMaster.</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daemon</span>(</span><span class="keyword">val</span> name: <span class="type">String</span>, reportBack: <span class="type">String</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitForRegisterResult</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ActorSystemRegistered</span>(parent) =&gt;</span><br><span class="line">      timeout.cancel()</span><br><span class="line">      context.watch(parent)</span><br><span class="line">      context.become(waitCommand)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">waitCommand</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">BindLifeCycle</span>(actor) =&gt;</span><br><span class="line">      <span class="type">LOG</span>.info(s<span class="string">"ActorSystem $name Binding life cycle with actor: $actor"</span>)</span><br><span class="line">      context.watch(actor)</span><br><span class="line">    <span class="keyword">case</span> create<span class="annotation">@CreateActor</span>(props: <span class="type">Props</span>, name: <span class="type">String</span>) =&gt;</span><br><span class="line">      <span class="keyword">val</span> actor = <span class="type">Try</span>(context.actorOf(props, name)) <span class="comment">// create another actor</span></span><br><span class="line">      actor <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Success</span>(actor) =&gt; sender ! <span class="type">ActorCreated</span>(actor, name)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Failure</span>(e) =&gt; sender ! <span class="type">CreateActorFailed</span>(props.clazz.getName, e)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">PoisonPill</span> =&gt;</span><br><span class="line">      context.stop(self)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Terminated</span>(actor) =&gt;</span><br><span class="line">      <span class="type">LOG</span>.info(s<span class="string">"System $name Watched actor is terminated $actor"</span>)</span><br><span class="line">      context.stop(self)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20170624212741793" alt="9"></p>
<p>Daemon create an Actor which defined in RegisterActorSystem on AppMasterLauncher. This Actor is <code>AppMasterRuntimeEnvironment</code>, it’ll create AppMaster. </p>
<p>We know that create Actor can use <code>context.actorOf(props)</code> method, here the props is passed from AppMasterLauncher to Daemon, but not created on Daemon side. Why do we doing this way? Because only AppMasterLauncher know how to create an AppMaster. Passing the props inside CreateActor is just like passing other request. Now the mainpoint focus transfer to AppMasterRuntimeEnvironment.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AppMasterRuntimeEnvironment</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">props</span>(</span>masters: <span class="type">Iterable</span>[<span class="type">ActorPath</span>], </span><br><span class="line">      app: <span class="type">AppDescription</span>, appContextInput: <span class="type">AppMasterContext</span></span><br><span class="line">      ): <span class="type">Props</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> master = (appId: <span class="type">AppId</span>, masterProxy: <span class="type">MasterActorRef</span>) =&gt;</span><br><span class="line">      <span class="type">MasterWithExecutorSystemProvider</span>.props(appId, masterProxy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> appMaster = (appContext: <span class="type">AppMasterContext</span>, app: <span class="type">AppDescription</span>) =&gt;</span><br><span class="line">      <span class="type">LazyStartAppMaster</span>.props(appContext, app)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> masterConnectionKeeper = (master: <span class="type">MasterActorRef</span>, registerAppMaster:</span><br><span class="line">      <span class="type">RegisterAppMaster</span>, listener: <span class="type">ListenerActorRef</span>) =&gt; <span class="type">Props</span>(<span class="keyword">new</span> <span class="type">MasterConnectionKeeper</span>(</span><br><span class="line">        registerAppMaster, master, masterStatusListener = listener))</span><br><span class="line"></span><br><span class="line">    <span class="type">Props</span>(<span class="keyword">new</span> <span class="type">AppMasterRuntimeEnvironment</span>(appContextInput, app, masters,</span><br><span class="line">      master, appMaster, masterConnectionKeeper))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AppMasterRuntimeEnvironment will create three Actor once it’s created. It serves as runtime environment for AppMaster. When starting an AppMaster, we need to setup the connection to master(an MasterProxy which substitute to Master), and prepare other environments.</p>
<p>The MasterProxy also extend the function of Master, by providing a scheduler service for Executor System. AppMaster can ask Master for executor system directly. details like requesting resource, contacting worker to start a process, and then starting an executor system is hidden from AppMaster.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[appmaster] <span class="class"><span class="keyword">class</span> <span class="title">AppMasterRuntimeEnvironment</span>(</span></span><br><span class="line">    appContextInput: <span class="type">AppMasterContext</span>,</span><br><span class="line">    app: <span class="type">AppDescription</span>,</span><br><span class="line">    masters: <span class="type">Iterable</span>[<span class="type">ActorPath</span>],</span><br><span class="line">    masterFactory: (<span class="type">AppId</span>, <span class="type">MasterActorRef</span>) =&gt; <span class="type">Props</span>,</span><br><span class="line">    appMasterFactory: (<span class="type">AppMasterContext</span>, <span class="type">AppDescription</span>) =&gt; <span class="type">Props</span>,</span><br><span class="line">    masterConnectionKeeperFactory: (<span class="type">MasterActorRef</span>, <span class="type">RegisterAppMaster</span>, <span class="type">ListenerActorRef</span>) =&gt; <span class="type">Props</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> master = context.actorOf(</span><br><span class="line">    masterFactory(appId, context.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">MasterProxy</span>(masters, <span class="number">30.</span>seconds)))))</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> appContext = appContextInput.copy(masterProxy = master)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create appMaster proxy to receive command and forward to appmaster</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> appMaster = context.actorOf(appMasterFactory(appContext, app))</span><br><span class="line">  context.watch(appMaster)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> registerAppMaster = <span class="type">RegisterAppMaster</span>(</span><br><span class="line">    appId, appMaster, appContext.workerInfo)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> masterConnectionKeeper = context.actorOf(</span><br><span class="line">    masterConnectionKeeperFactory(master, registerAppMaster, self))</span><br><span class="line">  context.watch(masterConnectionKeeper)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">MasterConnected</span> =&gt;</span><br><span class="line">      <span class="type">LOG</span>.info(s<span class="string">"Master is connected, start AppMaster $appId..."</span>)</span><br><span class="line">      appMaster ! <span class="type">StartAppMaster</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">MasterStopped</span> =&gt;</span><br><span class="line">      <span class="type">LOG</span>.error(s<span class="string">"Master is stopped, stop AppMaster $appId..."</span>)</span><br><span class="line">      context.stop(self)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Terminated</span>(actor) =&gt; actor <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> `appMaster` =&gt;</span><br><span class="line">        <span class="type">LOG</span>.error(s<span class="string">"AppMaster $appId is stopped, shutdown myself"</span>)</span><br><span class="line">        context.stop(self)</span><br><span class="line">      <span class="keyword">case</span> `masterConnectionKeeper` =&gt;</span><br><span class="line">        <span class="type">LOG</span>.error(s<span class="string">"Master connection keeper is stopped, appId: $appId, shutdown myself"</span>)</span><br><span class="line">        context.stop(self)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="comment">// Skip</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>The workflow from creating <code>AppMasterRuntimeEnvironment</code> to create <code>AppMaster</code> is trigged through <code>MasterConnectionKeeper</code> by sending <code>RegisterAppMaster</code> request to <code>AppMasterLauncher</code>. Finally when <code>AppMasterRuntimeEnvironment</code> receive <code>MasterConnected</code> from <code>MasterConnectionKeeper</code>, it send <code>StartAppMaster</code> to <code>AppMaster</code>. happy now! Take long long way bring up to AppMaster.</p>
<p><img src="http://img.blog.csdn.net/20170624220921664" alt="9"></p>
<p>Note AppMasterRuntimeEnvironment did not send StartAppMaster directory to AppMaster but to LazyStartAppMaster. and Every message send to LazyStartAppMaster will forward to AppMaster. Why do we need a Lazy AppMaster? If you take look at LazyStartAppMaster, you’ll notice that LazyStartAppMaster is not really an AppMaster but it’s responsible to create AppMaster only when it receive StartAppMaster request from AppMasterRuntimeEnvironment. So you wont’t find StartAppMaster on AppMaster.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyStartAppMaster</span>(</span>appId: <span class="type">Int</span>, appMasterProps: <span class="type">Props</span>) </span><br><span class="line">    <span class="keyword">extends</span> <span class="type">Actor</span> <span class="keyword">with</span> <span class="type">Stash</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span>:</span> <span class="type">Receive</span> = <span class="literal">null</span></span><br><span class="line">  context.become(startAppMaster)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">startAppMaster</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">StartAppMaster</span> =&gt;</span><br><span class="line">      <span class="keyword">val</span> appMaster = context.actorOf(appMasterProps, <span class="string">"appmaster"</span>)</span><br><span class="line">      context.watch(appMaster)</span><br><span class="line">      context.become(terminationWatch(appMaster) orElse </span><br><span class="line">        appMasterService(appMaster))</span><br><span class="line">      unstashAll()</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; stash()</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">appMasterService</span>(</span>appMaster: <span class="type">ActorRef</span>): <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> msg =&gt; appMaster forward msg</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>[appmaster] <span class="class"><span class="keyword">object</span> <span class="title">LazyStartAppMaster</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">props</span>(</span>appContext: <span class="type">AppMasterContext</span>, app: <span class="type">AppDescription</span>): <span class="type">Props</span> = &#123;</span><br><span class="line">    <span class="comment">// the class name of app.appMaster is AppMaster </span></span><br><span class="line">    <span class="comment">// which will create when receive StartAppMaster</span></span><br><span class="line">    <span class="keyword">val</span> appMasterProps = <span class="type">Props</span>(<span class="type">Class</span>.forName(app.appMaster), appContext, app)</span><br><span class="line">    <span class="type">Props</span>(<span class="keyword">new</span> <span class="type">LazyStartAppMaster</span>(appContext.appId, appMasterProps))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The AppMaster is the head of a streaming application. It contains:</p>
<ol>
<li>ExecutorManager to manage all executors.</li>
<li>TaskManager to manage all tasks,</li>
<li>ClockService to track the global clock for this streaming application.</li>
<li>Scheduler to decide which a task should be scheduled to.</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppMaster</span>(</span>appContext: <span class="type">AppMasterContext</span>, app: <span class="type">AppDescription</span>) </span><br><span class="line">    <span class="keyword">extends</span> <span class="type">ApplicationMaster</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> dagManager = context.actorOf(<span class="type">Props</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="type">DagManager</span>(appContext.appId, userConfig, store,</span><br><span class="line">    <span class="type">Some</span>(getUpdatedDAG))))</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> taskManager: <span class="type">Option</span>[<span class="type">ActorRef</span>] = <span class="type">None</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> clockService: <span class="type">Option</span>[<span class="type">ActorRef</span>] = <span class="type">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> executorManager: <span class="type">ActorRef</span> =</span><br><span class="line">    context.actorOf(<span class="type">ExecutorManager</span>.props(userConfig, appContext, app.clusterConfig, app.name),</span><br><span class="line">      <span class="type">ActorPathUtil</span>.executorManagerActorName)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (dag &lt;- getDAG) &#123;</span><br><span class="line">    clockService = <span class="type">Some</span>(context.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">ClockService</span>(dag, self, store))))</span><br><span class="line">    <span class="keyword">val</span> jarScheduler = <span class="keyword">new</span> <span class="type">JarScheduler</span>(appId, app.name, systemConfig, context)</span><br><span class="line">    taskManager = <span class="type">Some</span>(context.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">TaskManager</span>(appContext.appId, dagManager,</span><br><span class="line">      jarScheduler, executorManager, clockService.get, self, app.name))))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span>:</span> <span class="type">Receive</span> = &#123;</span><br><span class="line">    taskMessageHandler orElse</span><br><span class="line">      executorMessageHandler orElse</span><br><span class="line">      ready orElse</span><br><span class="line">      recover orElse</span><br><span class="line">      appMasterService orElse</span><br><span class="line">      <span class="type">ActorUtil</span>.defaultMsgHandler(self)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>At now I lost my line of argument, as there’re no request send trigger inside AppMaster, so what’s the entry of AppMaster?</p>
<p>Keep in mind, once create AppMaster, it will create <code>ExecutorManager</code> and <code>TaskManager</code>. Althrough we did’t see request send directory from AppMaster, we could find if there’re something inside ExecutorManager or TaskManager.</p>
<p>Suddenly comeup so many Managers make me unprepared. But unlike <code>AppManager</code> reside in Master, <code>ExecutorManager</code> and <code>TaskManager</code> both reside in Worker! </p>
<p><img src="http://img.blog.csdn.net/20170624224944769" alt="9"></p>
<h2 id="Processor,_OP,_Task">Processor, OP, Task</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Planner</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Converts Dag of Op to Dag of TaskDescription. TaskDescription is part of the low level Graph API.</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">plan</span>(</span>dag: <span class="type">Graph</span>[<span class="type">Op</span>, <span class="type">OpEdge</span>])</span><br><span class="line">    (<span class="keyword">implicit</span> system: <span class="type">ActorSystem</span>): <span class="type">Graph</span>[<span class="type">Processor</span>[_ &lt;: <span class="type">Task</span>], _ &lt;: <span class="type">Partitioner</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> graph = optimize(dag)</span><br><span class="line">    graph.mapEdge &#123; (node1, edge, node2) =&gt;</span><br><span class="line">      edge <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Shuffle</span> =&gt;</span><br><span class="line">          node2 <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> op: <span class="type">GroupByOp</span>[_, _] =&gt;</span><br><span class="line">              <span class="keyword">new</span> <span class="type">GroupByPartitioner</span>(op.groupBy.groupByFn)</span><br><span class="line">            <span class="keyword">case</span> _ =&gt; <span class="keyword">new</span> <span class="type">HashPartitioner</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Direct</span> =&gt;</span><br><span class="line">          <span class="keyword">new</span> <span class="type">CoLocationPartitioner</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.mapVertex(_.getProcessor)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">optimize</span>(</span>dag: <span class="type">Graph</span>[<span class="type">Op</span>, <span class="type">OpEdge</span>])</span><br><span class="line">    (<span class="keyword">implicit</span> system: <span class="type">ActorSystem</span>): <span class="type">Graph</span>[<span class="type">Op</span>, <span class="type">OpEdge</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> graph = dag.copy</span><br><span class="line">    <span class="keyword">val</span> nodes = graph.topologicalOrderWithCirclesIterator.toList.reverse</span><br><span class="line">    <span class="keyword">for</span> (node &lt;- nodes) &#123;</span><br><span class="line">      <span class="keyword">val</span> outGoingEdges = graph.outgoingEdgesOf(node)</span><br><span class="line">      <span class="keyword">for</span> (edge &lt;- outGoingEdges) &#123;</span><br><span class="line">        merge(graph, edge._1, edge._3)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    graph</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(</span>graph: <span class="type">Graph</span>[<span class="type">Op</span>, <span class="type">OpEdge</span>], node1: <span class="type">Op</span>, node2: <span class="type">Op</span>)</span><br><span class="line">    (<span class="keyword">implicit</span> system: <span class="type">ActorSystem</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (graph.outDegreeOf(node1) == <span class="number">1</span> &amp;&amp;</span><br><span class="line">      graph.inDegreeOf(node2) == <span class="number">1</span> &amp;&amp;</span><br><span class="line">      <span class="comment">// For processor node, we don't allow it to merge with downstream operators</span></span><br><span class="line">      !node1.isInstanceOf[<span class="type">ProcessorOp</span>[_ &lt;: <span class="type">Task</span>]] &amp;&amp;</span><br><span class="line">      !node2.isInstanceOf[<span class="type">ProcessorOp</span>[_ &lt;: <span class="type">Task</span>]]) &#123;</span><br><span class="line">      <span class="keyword">val</span> (_, edge, _) = graph.outgoingEdgesOf(node1).head</span><br><span class="line">      <span class="keyword">if</span> (edge == <span class="type">Direct</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> chainedOp = node1.chain(node2)</span><br><span class="line">        graph.addVertex(chainedOp)</span><br><span class="line">        <span class="keyword">for</span> (incomingEdge &lt;- graph.incomingEdgesOf(node1)) &#123;</span><br><span class="line">          graph.addEdge(incomingEdge._1, incomingEdge._2, chainedOp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (outgoingEdge &lt;- graph.outgoingEdgesOf(node2)) &#123;</span><br><span class="line">          graph.addEdge(chainedOp, outgoingEdge._2, outgoingEdge._3)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove the old vertex</span></span><br><span class="line">        graph.removeVertex(node1)</span><br><span class="line">        graph.removeVertex(node2)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="keyword">class</span> DataSourceOp(</span><br><span class="line">    dataSource: DataSource,</span><br><span class="line">    parallelism: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">    userConfig: UserConfig = UserConfig.empty,</span><br><span class="line">    description: String = <span class="string">"source"</span>)</span><br><span class="line">  <span class="keyword">extends</span> Op &#123;</span><br><span class="line"></span><br><span class="line">  override def chain(other: Op)(<span class="type">implicit</span> system: ActorSystem): Op = &#123;</span><br><span class="line">    DataSourceOp(dataSource, parallelism,</span><br><span class="line">      userConfig.withValue(Constants.GEARPUMP_STREAMING_OPERATOR, other.fn),</span><br><span class="line">      description)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override def getProcessor(<span class="type">implicit</span> system: ActorSystem): Processor[_ &lt;: Task] = &#123;</span><br><span class="line">    Processor[DataSourceTask[<span class="built_in">Any</span>, <span class="built_in">Any</span>]](parallelism, description,</span><br><span class="line">      userConfig.withValue(GEARPUMP_STREAMING_SOURCE, dataSource))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">TaskWrapper</span><span class="container">(</span><br><span class="line">    <span class="title">val</span> <span class="title">taskId</span>: <span class="type">TaskId</span>, <span class="title">val</span> <span class="title">taskClass</span>: <span class="type">Class</span>[<span class="title">_</span> &lt;: <span class="type">Task</span>], <span class="title">context</span>: <span class="type">TaskContextData</span>,</span><br><span class="line">    <span class="title">userConf</span>: <span class="type">UserConfig</span>)</span> extends <span class="type">TaskContext</span> with <span class="type">TaskInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">  private var task: <span class="type">Option</span>[<span class="type">Task</span>] = <span class="type">None</span></span><br><span class="line"></span><br><span class="line">  override def onStart<span class="container">(<span class="title">startTime</span>: <span class="type">Instant</span>)</span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    val constructor = taskClass.getConstructor<span class="container">(</span><br><span class="line">        <span class="title">classOf</span>[<span class="type">TaskContext</span>], <span class="title">classOf</span>[<span class="type">UserConfig</span>])</span></span><br><span class="line">    task = <span class="type">Some</span><span class="container">(<span class="title">constructor</span>.<span class="title">newInstance</span>(<span class="title">this</span>, <span class="title">userConf</span>)</span>)</span><br><span class="line">    task.foreach<span class="container">(<span class="title">_</span>.<span class="title">onStart</span>(<span class="title">startTime</span>)</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Utility that helps user to create a DAG starting with [[DataSourceTask]] user should pass in a [[DataSource]]</p>
<p>Here is an example to build a DAG that reads from Kafka source followed by word count</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> source = <span class="keyword">new</span> <span class="type">KafkaSource</span>()</span><br><span class="line"><span class="keyword">val</span> sourceProcessor =  <span class="type">DataSourceProcessor</span>(source, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> split = <span class="type">Processor</span>[<span class="type">Split</span>](<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> sum = <span class="type">Processor</span>[<span class="type">Sum</span>](<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> dag = sourceProcessor ~&gt; split ~&gt; sum</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataSourceProcessor</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span>(</span></span><br><span class="line">      dataSource: <span class="type">DataSource</span>,</span><br><span class="line">      parallelism: <span class="type">Int</span> = <span class="number">1</span>,</span><br><span class="line">      description: <span class="type">String</span> = <span class="string">""</span>,</span><br><span class="line">      taskConf: <span class="type">UserConfig</span> = <span class="type">UserConfig</span>.empty)(<span class="keyword">implicit</span> system: <span class="type">ActorSystem</span>)</span><br><span class="line">    : <span class="type">Processor</span>[<span class="type">DataSourceTask</span>[<span class="type">Any</span>, <span class="type">Any</span>]] = &#123;</span><br><span class="line">    <span class="type">Processor</span>[<span class="type">DataSourceTask</span>[<span class="type">Any</span>, <span class="type">Any</span>]](parallelism, description,</span><br><span class="line">      taskConf.withValue[<span class="type">DataSource</span>](<span class="type">Constants</span>.<span class="type">GEARPUMP_STREAMING_SOURCE</span>, dataSource))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Default Task container for [[org.apache.gearpump.streaming.source.DataSource]] that reads from DataSource in batch</p>
<p>DataSourceTask calls:</p>
<ul>
<li><code>DataSource.open()</code> in <code>onStart</code> and pass in [[org.apache.gearpump.streaming.task.TaskContext]]</li>
</ul>
<p>and application start time</p>
<ul>
<li><code>DataSource.read()</code> in each <code>onNext</code>, which reads a batch of messages</li>
<li><code>DataSource.close()</code> in <code>onStop</code></li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSourceTask</span>[</span><span class="type">IN</span>, <span class="type">OUT</span>] <span class="keyword">private</span>[source](</span><br><span class="line">    context: <span class="type">TaskContext</span>,</span><br><span class="line">    conf: <span class="type">UserConfig</span>,</span><br><span class="line">    source: <span class="type">DataSource</span>,</span><br><span class="line">    transform: <span class="type">Transform</span>[<span class="type">IN</span>, <span class="type">OUT</span>])</span><br><span class="line">  <span class="keyword">extends</span> <span class="type">Task</span>(context, conf) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span>(</span>context: <span class="type">TaskContext</span>, conf: <span class="type">UserConfig</span>) = &#123;</span><br><span class="line">    <span class="keyword">this</span>(context, conf,</span><br><span class="line">      conf.getValue[<span class="type">DataSource</span>](<span class="type">GEARPUMP_STREAMING_SOURCE</span>)(context.system).get,</span><br><span class="line">      <span class="keyword">new</span> <span class="type">Transform</span>[<span class="type">IN</span>, <span class="type">OUT</span>](context,</span><br><span class="line">        conf.getValue[<span class="type">FunctionRunner</span>[<span class="type">IN</span>, <span class="type">OUT</span>]](<span class="type">GEARPUMP_STREAMING_OPERATOR</span>)(context.system))</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Deep into Apache Gearpump&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://github.com/zqhxuyuan/categories/bigdata/"/>
    
    
      <category term="流处理" scheme="http://github.com/zqhxuyuan/tags/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Apache Kafka JIRA</title>
    <link href="http://github.com/zqhxuyuan/2017/06/20/JIRA_KAFKA/"/>
    <id>http://github.com/zqhxuyuan/2017/06/20/JIRA_KAFKA/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2017-06-24T14:57:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Kafka JIRA<br><a id="more"></a></p>
<p><a href="https://issues.apache.org/jira/browse/KAFKA" target="_blank" rel="external">https://issues.apache.org/jira/browse/KAFKA</a></p>
<h2 id="2944">2944</h2><p><a href="https://github.com/apache/kafka/pull/723">https://github.com/apache/kafka/pull/723</a></p>
<p>最后来分析<code>KafkaBasedLog</code>的<code>readToLogEnd()</code>方法如何读取到日志的最末尾，具体步骤如下。</p>
<ol>
<li>定位到分区的最末尾，通过消费者的<code>seekToEnd()</code>只是声明了重置策略为<code>LATEST</code>，并没有真正定位。客户端还需要调用消费者的轮询方法，才能保证发送拉取请求，并更新消费者的当前位置；</li>
<li>比较消费者的当前位置（<code>endOffset</code>）与上一次还没定位到最末尾时的位置（<code>startOffset</code>），如果前者大于后者，客户端需要调用<code>seek()</code>方法定位到旧的位置（<code>startOffset</code>）；</li>
<li>如果步骤(2)回退到旧的位置，需要调用轮询方法消费消息，直到当前位置是分区的最末尾位置。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaBasedLog</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readToLogEnd</span><span class="params">()</span> </span>&#123; <span class="comment">// 读取到日志的最末尾</span></span><br><span class="line">    <span class="comment">// 1. 定位到分区的最末尾（logEndOffset）</span></span><br><span class="line">    Set&lt;TopicPartition&gt; assignment = consumer.assignment();</span><br><span class="line">    Map&lt;TopicPartition, Long&gt; offsets = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TopicPartition tp : assignment) &#123;</span><br><span class="line">      <span class="keyword">long</span> offset = consumer.position(tp); <span class="comment">// 获取当前的消费位置</span></span><br><span class="line">      offsets.put(tp, offset); <span class="comment">// 暂存起来</span></span><br><span class="line">      consumer.seekToEnd(singleton(tp)); <span class="comment">// 定位到最末尾的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 回退到开始位置</span></span><br><span class="line">    Map&lt;TopicPartition, Long&gt; endOffsets = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      poll(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (TopicPartition tp : assignment) &#123;</span><br><span class="line">        <span class="keyword">long</span> startOffset = offsets.get(tp); <span class="comment">// 旧的消费位置</span></span><br><span class="line">        <span class="keyword">long</span> endOffset = consumer.position(tp); <span class="comment">// 当前的偏移量等于最末尾的位置</span></span><br><span class="line">        <span class="keyword">if</span> (endOffset &gt; startOffset) &#123; </span><br><span class="line">          endOffsets.put(tp, endOffset); </span><br><span class="line">          consumer.seek(tp, startOffset);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 开始读取，直到读取到分区的最末尾位置</span></span><br><span class="line">    <span class="keyword">while</span> (!endOffsets.isEmpty()) &#123;</span><br><span class="line">      poll(Integer.MAX_VALUE);</span><br><span class="line">      Iterator it = endOffsets.entrySet().iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;TopicPartition, Long&gt; entry = it.next();</span><br><span class="line">        <span class="keyword">if</span> (consumer.position(entry.getKey()) &lt; entry.getValue()) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> it.remove();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端调用<code>readToLogEnd()</code>之前，如果还有新的消息没有消费，当调用<code>readToLogEnd()</code>方法时，可以保证客户端会完全消费新写入的消息。如图8-31（左图）所示，偏移量从<code>3</code>到<code>6</code>是新写入的消息（比如一个连接器配置、两个任务配置、一个提交日志的配置，总共四条消息）。客户端为了读取到分区最近的位置，先定位到最近的位置（<code>7</code>）。注意这时不能立即调用轮询方法，因为如果客户端在最近的位置，调用轮询不会有任何的新消息。客户端应该再定位到上次消费的位置（<code>3</code>），然后才能调用轮询方法，直到消费者的当前位置大于等于最近位置时，就说明客户端读取到了日志的最末尾。右图中，假设客户端已经消费到了日志的最末尾，那么调用<code>readToLogEnd()</code>方法会立即返回。</p>
<p><img src="http://img.blog.csdn.net/20170520193000243" alt="8"></p>
<p>图8-31 读取到分区最末尾的位置</p>
<blockquote>
<p><strong>注意：</strong>上面的<code>readToLogEnd()</code>方法用到了Kafka新消费者的三个方法。（1）：<code>postion()</code>方法返回消费者当前的位置，即消费进度，这个值比客户端真正消费过的位置要大<code>1</code>。比如客户端消费了两条消息，<code>postion()</code>方法的返回值就等于<code>3</code>。（2）：<code>seekToEnd(tp)</code>方法定位到日志的最末尾，同样，这个值也是实际的偏移量加上<code>1</code>（即<code>nextOffset</code>）。比如分区实际只有六条消息，最末尾的偏移量等于<code>7</code>。（3）：<code>seekTo(tp,offset)</code>方法定位到日志的指定位置。客户端定位到指定位置后，下一步一般是要调用轮询方法，并从这个位置拉取消息。所以如果客户端已经消费了偏移量等于<code>1</code>和<code>2</code>的两条消息，定位的位置是<code>3</code>，表示要拉取第三条的消息。不能定位到<code>2</code>，那样的话，从位置<code>2</code>开始拉取消息，就重复拉取了第二条消息。</p>
</blockquote>
<h2 id="2500/2076/KIP-17">2500/2076/KIP-17</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache Kafka JIRA&lt;br&gt;
    
    </summary>
    
      <category term="kafka" scheme="http://github.com/zqhxuyuan/categories/kafka/"/>
    
    
      <category term="流处理" scheme="http://github.com/zqhxuyuan/tags/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://github.com/zqhxuyuan/2017/05/10/2017-05-10-Spark2-SQL/"/>
    <id>http://github.com/zqhxuyuan/2017/05/10/2017-05-10-Spark2-SQL/</id>
    <published>2017-05-10T09:41:16.000Z</published>
    <updated>2017-05-10T09:41:16.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spark Metrics</title>
    <link href="http://github.com/zqhxuyuan/2017/05/01/Spark-Metrics/"/>
    <id>http://github.com/zqhxuyuan/2017/05/01/Spark-Metrics/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2017-09-01T03:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark Metrics<br><a id="more"></a></p>
<ul>
<li><a href="http://www.hammerlab.org/2015/02/27/monitoring-spark-with-graphite-and-grafana/" target="_blank" rel="external">http://www.hammerlab.org/2015/02/27/monitoring-spark-with-graphite-and-grafana/</a></li>
</ul>
<h2 id="命令行添加监控">命令行添加监控</h2><p>直接添加到命令行后</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--files=/yourPath/metrics<span class="class">.properties</span> --conf spark<span class="class">.metrics</span><span class="class">.conf</span>=metrics.properties</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The –files flag will cause /path/to/metrics.properties to be sent to every executor,<br>and spark.metrics.conf=metrics.properties will tell all executors to load that file<br>when initializing their respective MetricsSystems.</p>
</blockquote>
<p>或者用conf的形式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--conf spark<span class="class">.metrics</span><span class="class">.conf</span>.*<span class="class">.sink</span><span class="class">.graphite</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.sink</span><span class="class">.GraphiteSink</span> \</span><br><span class="line">--conf spark<span class="class">.metrics</span><span class="class">.conf</span>.*<span class="class">.sink</span><span class="class">.graphite</span><span class="class">.host</span>=...</span><br></pre></td></tr></table></figure>
<h2 id="Spark_Metrics">Spark Metrics</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*<span class="class">.sink</span><span class="class">.console</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.sink</span><span class="class">.ConsoleSink</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.console</span><span class="class">.period</span>=<span class="number">10</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.console</span><span class="class">.unit</span>=seconds</span><br><span class="line">*<span class="class">.sink</span><span class="class">.csv</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.sink</span><span class="class">.CsvSink</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.csv</span><span class="class">.period</span>=<span class="number">1</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.csv</span><span class="class">.unit</span>=minutes</span><br><span class="line">*<span class="class">.sink</span><span class="class">.csv</span><span class="class">.directory</span>=/tmp/</span><br></pre></td></tr></table></figure>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">➜  spark-<span class="number">2.0</span><span class="number">.1</span>-bin-hadoop2<span class="number">.7</span> bin/spark-<span class="built_in">shell</span></span><br><span class="line">Spark context Web UI available <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">10.57</span><span class="number">.2</span><span class="number">.5</span>:<span class="number">4040</span></span><br><span class="line">Spark context available <span class="keyword">as</span> <span class="string">'sc'</span> (master = <span class="built_in">local</span>[*], app id = <span class="built_in">local</span>-<span class="number">1495078254084</span>).</span><br><span class="line">Spark session available <span class="keyword">as</span> <span class="string">'spark'</span>.</span><br><span class="line">scala&gt; <span class="number">17</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">05</span> ===============================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Gauges ----------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.BlockManager.disk.diskSpaceUsed_MB <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.BlockManager.memory.maxMem_MB <span class="built_in">value</span> = <span class="number">366</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.BlockManager.memory.memUsed_MB <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.BlockManager.memory.remainingMem_MB <span class="built_in">value</span> = <span class="number">366</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.job.activeJobs <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.job.allJobs <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.failedStages <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.runningStages <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.waitingStages <span class="built_in">value</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Histograms ------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.CodeGenerator.compilationTime</span><br><span class="line">             count = <span class="number">0</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">              mean = <span class="number">0.00</span></span><br><span class="line">            stddev = <span class="number">0.00</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.00</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">0.00</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.CodeGenerator.generatedClassSize</span><br><span class="line">             count = <span class="number">0</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">              mean = <span class="number">0.00</span></span><br><span class="line">            stddev = <span class="number">0.00</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.00</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">0.00</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.CodeGenerator.generatedMethodSize</span><br><span class="line">             count = <span class="number">0</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">              mean = <span class="number">0.00</span></span><br><span class="line">            stddev = <span class="number">0.00</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.00</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">0.00</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.CodeGenerator.sourceCodeSize</span><br><span class="line">             count = <span class="number">0</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">              mean = <span class="number">0.00</span></span><br><span class="line">            stddev = <span class="number">0.00</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.00</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">0.00</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Timers ----------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.messageProcessingTime</span><br><span class="line">             count = <span class="number">0</span></span><br><span class="line">         mean rate = <span class="number">0.00</span> calls/<span class="keyword">second</span></span><br><span class="line">     <span class="number">1</span>-minute rate = <span class="number">0.00</span> calls/<span class="keyword">second</span></span><br><span class="line">     <span class="number">5</span>-minute rate = <span class="number">0.00</span> calls/<span class="keyword">second</span></span><br><span class="line">    <span class="number">15</span>-minute rate = <span class="number">0.00</span> calls/<span class="keyword">second</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">              mean = <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">            stddev = <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">0.00</span> <span class="built_in">milliseconds</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">17</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">11</span>:<span class="number">31</span>:<span class="number">15</span> ===============================================================</span><br><span class="line"></span><br><span class="line">scala&gt; sc.parallelize(List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)).count</span><br><span class="line">res1: Long = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="number">17</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">11</span>:<span class="number">33</span>:<span class="number">15</span> ===============================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Timers ----------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">local</span>-<span class="number">1495078254084.</span>driver.DAGScheduler.messageProcessingTime</span><br><span class="line">             count = <span class="number">10</span></span><br><span class="line">         mean rate = <span class="number">0.07</span> calls/<span class="keyword">second</span></span><br><span class="line">     <span class="number">1</span>-minute rate = <span class="number">0.16</span> calls/<span class="keyword">second</span></span><br><span class="line">     <span class="number">5</span>-minute rate = <span class="number">0.03</span> calls/<span class="keyword">second</span></span><br><span class="line">    <span class="number">15</span>-minute rate = <span class="number">0.01</span> calls/<span class="keyword">second</span></span><br><span class="line">               <span class="built_in">min</span> = <span class="number">0.03</span> <span class="built_in">milliseconds</span></span><br><span class="line">               <span class="built_in">max</span> = <span class="number">1207.28</span> <span class="built_in">milliseconds</span></span><br><span class="line">              mean = <span class="number">125.02</span> <span class="built_in">milliseconds</span></span><br><span class="line">            stddev = <span class="number">358.42</span> <span class="built_in">milliseconds</span></span><br><span class="line">            <span class="built_in">median</span> = <span class="number">0.32</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">75</span>% &lt;= <span class="number">16.58</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">95</span>% &lt;= <span class="number">1207.28</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">98</span>% &lt;= <span class="number">1207.28</span> <span class="built_in">milliseconds</span></span><br><span class="line">              <span class="number">99</span>% &lt;= <span class="number">1207.28</span> <span class="built_in">milliseconds</span></span><br><span class="line">            <span class="number">99.9</span>% &lt;= <span class="number">1207.28</span> <span class="built_in">milliseconds</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ll /tmp/ -rth</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.waitingStages.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.runningStages.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.stage.failedStages.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">1.3</span>K  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.messageProcessingTime.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.job.allJobs.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.DAGScheduler.job.activeJobs.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">676</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.CodeGenerator.sourceCodeSize.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">676</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.CodeGenerator.generatedMethodSize.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">676</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.CodeGenerator.generatedClassSize.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">676</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.CodeGenerator.compilationTime.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">113</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.BlockManager.memory.remainingMem_MB.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.BlockManager.memory.memUsed_MB.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel   <span class="number">113</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.BlockManager.memory.maxMem_MB.csv</span><br><span class="line">-rw-r--r--   <span class="number">1</span> zhengqh  wheel    <span class="number">99</span>B  <span class="number">5</span> <span class="number">18</span> <span class="number">11</span>:<span class="number">36</span> local-<span class="number">1495078254084.</span>driver.BlockManager.disk.diskSpaceUsed_MB.csv</span><br><span class="line"></span><br><span class="line">➜  /tmp cat local-<span class="number">1495078254084.</span>driver.DAGScheduler.messageProcessingTime.csv</span><br><span class="line">t,count,max,mean,min,stddev,p50,p75,p95,p98,p99,p999,mean_rate,m1_rate,m5_rate,m15_rate,rate_unit,duration_unit</span><br><span class="line"><span class="number">1495078315</span>,<span class="number">0</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078375</span>,<span class="number">0</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,<span class="number">0.000000</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078435</span>,<span class="number">10</span>,<span class="number">1207.284400</span>,<span class="number">125.017564</span>,<span class="number">0.027442</span>,<span class="number">358.422668</span>,<span class="number">0.317114</span>,<span class="number">16.580495</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">0.055257</span>,<span class="number">0.082101</span>,<span class="number">0.028931</span>,<span class="number">0.010599</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078495</span>,<span class="number">10</span>,<span class="number">1207.284400</span>,<span class="number">125.017564</span>,<span class="number">0.027442</span>,<span class="number">358.422668</span>,<span class="number">0.317114</span>,<span class="number">16.580495</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">0.041499</span>,<span class="number">0.030203</span>,<span class="number">0.023686</span>,<span class="number">0.009915</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078555</span>,<span class="number">10</span>,<span class="number">1207.284400</span>,<span class="number">125.017564</span>,<span class="number">0.027442</span>,<span class="number">358.422668</span>,<span class="number">0.317114</span>,<span class="number">16.580495</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">0.033225</span>,<span class="number">0.011111</span>,<span class="number">0.019393</span>,<span class="number">0.009276</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078577</span>,<span class="number">10</span>,<span class="number">1207.284400</span>,<span class="number">125.017564</span>,<span class="number">0.027442</span>,<span class="number">358.422668</span>,<span class="number">0.317114</span>,<span class="number">16.580495</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">0.030895</span>,<span class="number">0.007962</span>,<span class="number">0.018142</span>,<span class="number">0.009072</span>,calls/second,milliseconds</span><br><span class="line"><span class="number">1495078577</span>,<span class="number">10</span>,<span class="number">1207.284400</span>,<span class="number">125.017564</span>,<span class="number">0.027442</span>,<span class="number">358.422668</span>,<span class="number">0.317114</span>,<span class="number">16.580495</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">1207.284400</span>,<span class="number">0.030890</span>,<span class="number">0.007962</span>,<span class="number">0.018142</span>,<span class="number">0.009072</span>,calls/second,milliseconds</span><br></pre></td></tr></table></figure>
<h2 id="Spark_Cassandra_Metrics">Spark Cassandra Metrics</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">executor<span class="class">.source</span><span class="class">.cassandra-connector</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.CassandraConnectorSource</span></span><br><span class="line">driver<span class="class">.source</span><span class="class">.cassandra-connector</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.CassandraConnectorSource</span></span><br></pre></td></tr></table></figure>
<h2 id="Spark_Influx_Metrics">Spark Influx Metrics</h2><p><a href="https://github.com/palantir/spark-influx-sink">https://github.com/palantir/spark-influx-sink</a></p>
<p>spark.driver.extraClassPath=spark-influx-sink.jar:metrics-influxdb.jar<br>spark.executor.extraClassPath=spark-influx-sink.jar:metrics-influxdb.jar</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.class</span>=org<span class="class">.apache</span><span class="class">.spark</span><span class="class">.metrics</span><span class="class">.sink</span><span class="class">.InfluxDbSink</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.protocol</span>=https</span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.host</span>=localhost</span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.port</span>=<span class="number">8086</span></span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.database</span>=my_metrics</span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.auth</span>=metric_client:PASSWORD</span><br><span class="line">*<span class="class">.sink</span><span class="class">.influx</span><span class="class">.tags</span>=product:my_product,parent:my_service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark Metrics&lt;br&gt;
    
    </summary>
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/categories/spark/"/>
    
    
      <category term="spark" scheme="http://github.com/zqhxuyuan/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>开源大数据ETL工具</title>
    <link href="http://github.com/zqhxuyuan/2017/02/15/2017-02-17-BigData-ETL/"/>
    <id>http://github.com/zqhxuyuan/2017/02/15/2017-02-17-BigData-ETL/</id>
    <published>2017-02-14T16:00:00.000Z</published>
    <updated>2017-02-25T07:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>BigData ETL Tools<br><a id="more"></a></p>
<h2 id="datatorrent(apex)">datatorrent(apex)</h2><p>执行<code>./datatorrent-rts-community-3.7.0.bin --help</code>打印帮助项</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[qihuang.zheng@dp0653 <span class="operator"><span class="keyword">install</span>]$ sudo -u <span class="keyword">admin</span> ./datatorrent-rts-community-<span class="number">3.7</span><span class="number">.0</span>.<span class="keyword">bin</span> \</span><br><span class="line">-B /usr/<span class="keyword">install</span>/datatorrent-rts -<span class="keyword">g</span> <span class="number">9094</span> \</span><br><span class="line">-<span class="keyword">E</span> DT_LOG_DIR=/home/<span class="keyword">admin</span>/datatorrent \</span><br><span class="line">-<span class="keyword">E</span> DT_RUN_DIR=/home/<span class="keyword">admin</span>/run/datatorrent</span><br><span class="line"></span><br><span class="line">Verifying <span class="keyword">archive</span> integrity... All good.</span><br><span class="line">Uncompressing DataTorrent Distribution  <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">DataTorrent Platform <span class="number">3.7</span><span class="number">.0</span> will be installed <span class="keyword">under</span> /usr/<span class="keyword">install</span>/datatorrent-rts/releases/<span class="number">3.7</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">dtGateway can be <span class="keyword">managed</span> <span class="keyword">with</span>: /usr/<span class="keyword">install</span>/datatorrent-rts/releases/<span class="number">3.7</span><span class="number">.0</span>/<span class="keyword">bin</span>/dtgateway [<span class="keyword">start</span>|<span class="keyword">stop</span>|<span class="keyword">status</span>]</span><br><span class="line">DTGateway <span class="keyword">is</span> running <span class="keyword">as</span> pid <span class="number">24571</span> <span class="keyword">and</span> listening <span class="keyword">on</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9094</span></span><br><span class="line"></span><br><span class="line">Please <span class="keyword">finish</span> the remaining installation steps via DataTorrent Console <span class="keyword">at</span>: <span class="keyword">http</span>://dp0653:<span class="number">9094</span>/</span></span><br></pre></td></tr></table></figure>
<p>创建apex项目，并打包</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name=salesapp</span><br><span class="line">version=3.5.0</span><br><span class="line"></span><br><span class="line">mvn -B archetype:generate \</span><br><span class="line">  -<span class="ruby"><span class="constant">DarchetypeGroupId</span>=org.apache.apex \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DarchetypeArtifactId</span>=apex-app-archetype \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DarchetypeVersion</span>=<span class="variable">$version</span>  \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DgroupId</span>=com.example \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dpackage</span>=com.example.<span class="variable">$name</span> \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DartifactId</span>=<span class="variable">$name</span> \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dversion</span>=<span class="number">1.0</span>-<span class="constant">SNAPSHOT</span></span></span><br></pre></td></tr></table></figure>
<p>上传到datatorrent平台</p>
<h2 id="StreamSets(https://github-com/streamsets/datacollector)">StreamSets(<a href="https://github.com/streamsets/datacollector">https://github.com/streamsets/datacollector</a>)</h2><h2 id="StreamFlow(https://github-com/lmco/streamflow)">StreamFlow(<a href="https://github.com/lmco/streamflow">https://github.com/lmco/streamflow</a>)</h2><h2 id="CDAP(https://github-com/caskdata/cdap)">CDAP(<a href="https://github.com/caskdata/cdap">https://github.com/caskdata/cdap</a>)</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BigData ETL Tools&lt;br&gt;
    
    </summary>
    
      <category term="work" scheme="http://github.com/zqhxuyuan/categories/work/"/>
    
    
      <category term="bigdata" scheme="http://github.com/zqhxuyuan/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>开发者构建工具</title>
    <link href="http://github.com/zqhxuyuan/2017/01/01/Tools-Build/"/>
    <id>http://github.com/zqhxuyuan/2017/01/01/Tools-Build/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-07-18T07:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Maven,SBT构建工具<br><a id="more"></a></p>
<h2 id="Maven">Maven</h2><h3 id="assembly">assembly</h3><p>maven-assembly-plugin</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="title">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">descriptorRefs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>maven-shade-plugin</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">goal</span>&gt;</span></span><br><span class="line">                    shade</span><br><span class="line">                <span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">minimizeJar</span>&gt;</span>true<span class="tag">&lt;/<span class="title">minimizeJar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shadedArtifactAttached</span>&gt;</span>true<span class="tag">&lt;/<span class="title">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shadedClassifierName</span>&gt;</span>fat<span class="tag">&lt;/<span class="title">shadedClassifierName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">relocations</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">relocation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">pattern</span>&gt;</span>com.google<span class="tag">&lt;/<span class="title">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">shadedPattern</span>&gt;</span>shaded.guava<span class="tag">&lt;/<span class="title">shadedPattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">include</span>&gt;</span>com.google.**<span class="tag">&lt;/<span class="title">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>com.google.common.base.Optional<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>com.google.common.base.Absent<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>com.google.common.base.Present<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">relocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">relocations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="title">artifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-jar-plugin:<span class="number">2.4</span>:jar (<span class="keyword">default</span>-jar) @ test ---</span><br><span class="line">[INFO] Building jar: /Users/zhengqh/Github/test/target/test-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line">[INFO] --- maven-assembly-plugin:<span class="number">2.2</span>-beta-<span class="number">5</span>:single (make-assembly) @ test ---</span><br><span class="line">...</span><br><span class="line">[INFO] Building jar: /Users/zhengqh/Github/test/target/test-<span class="number">1.0</span>-SNAPSHOT-jar-with-dependencies.jar</span><br><span class="line">[INFO] Minimizing jar test:test:jar:<span class="number">1.0</span>-SNAPSHOT</span><br><span class="line"></span><br><span class="line">$ ll target</span><br><span class="line">-rw-r--r--  <span class="number">1</span> zhengqh  staff   <span class="number">8.1</span>M  <span class="number">6</span> <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span> test-<span class="number">1.0</span>-SNAPSHOT-fat.jar</span><br><span class="line">-rw-r--r--  <span class="number">1</span> zhengqh  staff    <span class="number">29</span>M  <span class="number">6</span> <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span> test-<span class="number">1.0</span>-SNAPSHOT-jar-with-dependencies.jar</span><br><span class="line">-rw-r--r--  <span class="number">1</span> zhengqh  staff   <span class="number">9.2</span>K  <span class="number">6</span> <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span> test-<span class="number">1.0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>maven-assembly-plugin生成test-1.0-SNAPSHOT-jar-with-dependencies.jar<br>maven-shade-plugin的shadedClassifierName为<code>fat</code>，结果：test-1.0-SNAPSHOT-fat.jar</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  test jar -tvf target/test-<span class="number">1.0</span>-SNAPSHOT-jar-with-dependencies.jar|grep shaded</span><br><span class="line">assembly并不会重命令，只有shade才可以</span><br><span class="line"></span><br><span class="line">➜  test jar -tvf target/test-<span class="number">1.0</span>-SNAPSHOT-fat.jar|grep shaded</span><br><span class="line">     <span class="number">0</span> Thu Jun <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">42</span> CST <span class="number">2017</span> shaded/</span><br><span class="line">     <span class="number">0</span> Thu Jun <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">42</span> CST <span class="number">2017</span> shaded/guava/</span><br><span class="line">     <span class="number">0</span> Thu Jun <span class="number">22</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">42</span> CST <span class="number">2017</span> shaded/guava/common/</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>
<h3 id="install">install</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="operator"><span class="keyword">install</span>:<span class="keyword">install</span>-<span class="keyword">file</span> -Dfile=~/Downloads/ojdbc6-<span class="number">11.2</span><span class="number">.0</span><span class="number">.3</span>.jar -DgroupId=com.<span class="keyword">oracle</span> -DartifactId=ojdbc6 -Dversion=<span class="number">11.2</span><span class="number">.0</span> -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">mvn <span class="keyword">install</span>:<span class="keyword">install</span>-<span class="keyword">file</span> -Dfile=pontus-api_2<span class="number">.11</span>-<span class="number">0.0</span><span class="number">.1</span>.jar -DgroupId=cn.fraudmetrix.pontus -DartifactId=pontus-api_2<span class="number">.11</span> -Dversion=<span class="number">0.0</span><span class="number">.1</span> -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO] Building Maven Stub <span class="keyword">Project</span> (<span class="keyword">No</span> POM) <span class="number">1</span></span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO]</span><br><span class="line">[INFO] <span class="comment">--- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---</span></span><br><span class="line">[INFO] Installing /<span class="keyword">Users</span>/zhengqh/pontus-api_2<span class="number">.11</span>-<span class="number">0.0</span><span class="number">.1</span>.jar <span class="keyword">to</span> /<span class="keyword">Users</span>/zhengqh/.m2/repository/cn/fraudmetrix/pontus/pontus-api_2<span class="number">.11</span>/<span class="number">0.0</span><span class="number">.1</span>/pontus-api_2<span class="number">.11</span>-<span class="number">0.0</span><span class="number">.1</span>.jar</span><br><span class="line">[INFO] Installing /<span class="keyword">var</span>/folders/xc/x0b8crk9667ddh1zhfs29_zr0000gn/<span class="keyword">T</span>/mvninstall1940592568391629100.pom <span class="keyword">to</span> /<span class="keyword">Users</span>/zhengqh/.m2/repository/cn/fraudmetrix/pontus/pontus-api_2<span class="number">.11</span>/<span class="number">0.0</span><span class="number">.1</span>/pontus-api_2<span class="number">.11</span>-<span class="number">0.0</span><span class="number">.1</span>.pom</span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO] <span class="keyword">BUILD</span> <span class="keyword">SUCCESS</span></span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span><br><span class="line">[INFO] Total <span class="keyword">time</span>: <span class="number">1.088</span> s</span><br><span class="line">[INFO] Finished <span class="keyword">at</span>: <span class="number">2017</span>-<span class="number">07</span>-<span class="number">17</span>T11:<span class="number">50</span>:<span class="number">49</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] <span class="keyword">Final</span> <span class="keyword">Memory</span>: <span class="number">6</span><span class="keyword">M</span>/<span class="number">64</span><span class="keyword">M</span></span><br><span class="line">[INFO] <span class="comment">------------------------------------------------------------------------</span></span></span><br></pre></td></tr></table></figure>
<h3 id="deploy">deploy</h3><p>源码包上传</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>deploy</span><br></pre></td></tr></table></figure>
<p>本地包上传到nexus</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=&lt;group-id&gt; \</span><br><span class="line">  -<span class="ruby"><span class="constant">DartifactId</span>=&lt;artifact-id&gt; \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dversion</span>=&lt;version&gt; \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dpackaging</span>=&lt;type-of-packaging&gt; \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dfile</span>=&lt;path-to-file&gt; \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DrepositoryId</span>=&lt;id-to-map-on-server-section-of-settings.xml&gt; \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Durl</span>=&lt;url-of-the-repository-to-deploy&gt;</span><br><span class="line"></span></span><br><span class="line">mvn deploy:deploy-file -DgroupId=依赖项的GroupID \</span><br><span class="line">  -<span class="ruby"><span class="constant">DartifactId</span>=依赖项名称 \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dversion</span>=依赖版本 \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dpackaging</span>=jar \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Dfile</span>=三方库的文件路径 \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">DrepositoryId</span>=fraudmetrixRepo \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Durl</span>=<span class="symbol">http:</span>/<span class="regexp">/maven.fraudmetrix.cn/nexus</span><span class="regexp">/content/repositories</span><span class="regexp">/releases/</span></span><br><span class="line"></span></span><br><span class="line">repositoryId对应~/.m2/setting.xml中的server配置</span><br><span class="line"></span><br><span class="line">&lt;server&gt;</span><br><span class="line">  &lt;id&gt;fraudmetrixRepo&lt;/id&gt;</span><br><span class="line">  &lt;username&gt;xxx&lt;/username&gt;</span><br><span class="line">  &lt;password&gt;xxx&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line"></span><br><span class="line">部署pontus-api.jar</span><br><span class="line">mvn deploy:deploy-file -DgroupId=cn.fraudmetrix.pontus -DartifactId=pontus-api_2.11 -Dversion=0.0.1 \</span><br><span class="line"> -<span class="ruby"><span class="constant">Dpackaging</span>=jar -<span class="constant">Dfile</span>=pontus-api_2.<span class="number">11</span>-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>.jar \</span><br><span class="line"></span> -<span class="ruby"><span class="constant">Durl</span>=<span class="symbol">http:</span>/<span class="regexp">/maven.fraudmetrix.cn/nexus</span><span class="regexp">/content/repositories</span><span class="regexp">/releases/</span> -<span class="constant">DrepositoryId</span>=fraudmetrixRepo  </span><br><span class="line"></span></span><br><span class="line">部署ojdbc.jar</span><br><span class="line">mvn deploy:deploy-file -Dfile=/Users/zhengqh/Downloads/install/ojdbc6-11.2.0.3.jar \</span><br><span class="line">  -<span class="ruby"><span class="constant">DgroupId</span>=com.oracle -<span class="constant">DartifactId</span>=ojdbc6 -<span class="constant">Dversion</span>=<span class="number">11.2</span>.<span class="number">0</span> -<span class="constant">Dpackaging</span>=jar \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Durl</span>=<span class="symbol">http:</span>/<span class="regexp">/maven.fraudmetrix.cn/nexus</span><span class="regexp">/content/repositories</span><span class="regexp">/releases/</span> -<span class="constant">DrepositoryId</span>=fraudmetrixRepo</span></span><br></pre></td></tr></table></figure>
<p>以-数字开头或者-V开头生成准备文件：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> files = <span class="keyword">new</span> java.io.<span class="type">File</span>(<span class="string">"/Users/zhengqh/Downloads/V100R002C60U20CP003/common/lib"</span>).listFiles.map(_.getName).filter(_.startsWith(<span class="string">"h"</span>)).toList</span><br><span class="line"><span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line"><span class="keyword">val</span> numitemPattern = <span class="string">"(.*)(-[0-9|V].*)"</span>.r</span><br><span class="line">files.foreach(file =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> numitemPattern(art, version) = file</span><br><span class="line">  println(file + <span class="string">" "</span> + art + <span class="string">" "</span> + version.substring(<span class="number">1</span>).replace(<span class="string">".jar"</span>,<span class="string">""</span>))    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>导入到maven仓库：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat genMaven.txt | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  jar=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">  art=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>2`</span><br><span class="line">  ver=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>3`</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$jar</span> <span class="variable">$art</span> <span class="variable">$ver</span>"</span></span><br><span class="line">  mvn deploy:deploy-file -Dfile=<span class="variable">$jar</span> \</span><br><span class="line">  -DgroupId=com.huawei.fusion -DartifactId=<span class="variable">$art</span> -Dversion=<span class="string">"<span class="variable">$ver</span>-FSV100R002C60U20CP003"</span> -Dpackaging=jar \</span><br><span class="line">  -Durl=http://maven.fraudmetrix.cn/nexus/content/repositories/releases/ -DrepositoryId=fraudmetrixRepo</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>不更改groupId,从MANIFEST中获取groupId</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cat genMaven.txt | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  jarName=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">  art=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>2`</span><br><span class="line">  ver=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>3`</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">"<span class="variable">$jarName</span> <span class="variable">$art</span> <span class="variable">$ver</span> "</span></span><br><span class="line">  jar xf <span class="variable">$jarName</span> META-INF/MANIFEST.MF</span><br><span class="line">  group=$(cat META-INF/MANIFEST.MF |grep Implementation-Vendor-Id |cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>2)</span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$group</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">printf</span> <span class="string">"<span class="variable">$group</span>"</span></span><br><span class="line">   <span class="built_in">print</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  rm -rf META-INF</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cat genFS.txt | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  jarName=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">  art=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>2`</span><br><span class="line">  ver=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>3`</span><br><span class="line">  group=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>4`</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$jarName</span> <span class="variable">$art</span> <span class="variable">$ver</span> <span class="variable">$group</span>"</span></span><br><span class="line">  mvn deploy:deploy-file -Dfile=<span class="variable">$jarName</span> \</span><br><span class="line">    -DgroupId=<span class="variable">$group</span> -DartifactId=<span class="variable">$art</span> -Dversion=<span class="string">"<span class="variable">$ver</span>-FSV100R002C60U20CP003"</span> -Dpackaging=jar \</span><br><span class="line">    -Durl=http://maven.fraudmetrix.cn/nexus/content/repositories/releases/ -DrepositoryId=fraudmetrixRepo  </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>找不到的jar包改版本后重新上传</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=hadoop-yarn-server-tests-2.7.2.jar \</span><br><span class="line">  -<span class="ruby"><span class="constant">DgroupId</span>=org.apache.hadoop -<span class="constant">DartifactId</span>=hadoop-yarn-server-tests -<span class="constant">Dversion</span>=<span class="number">2.7</span>.<span class="number">2</span>-<span class="constant">FSV100R002C60U20CP003</span> -<span class="constant">Dpackaging</span>=jar \</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Durl</span>=<span class="symbol">http:</span>/<span class="regexp">/maven.fraudmetrix.cn/nexus</span><span class="regexp">/content/repositories</span><span class="regexp">/releases/</span> -<span class="constant">DrepositoryId</span>=fraudmetrixRepo</span><br><span class="line"></span>  </span><br><span class="line">find ~/.m2/ -name "*.lastUpdated" | xargs rm</span><br></pre></td></tr></table></figure>
<h2 id="SBT">SBT</h2><h2 id="Ref">Ref</h2><ul>
<li><a href="https://stackoverflow.com/questions/13620281/what-is-the-maven-shade-plugin-used-for-and-why-would-you-want-to-relocate-java" target="_blank" rel="external">https://stackoverflow.com/questions/13620281/what-is-the-maven-shade-plugin-used-for-and-why-would-you-want-to-relocate-java</a></li>
<li><a href="https://www.elastic.co/blog/to-shade-or-not-to-shade#sthash.CRl8HKfN.dpbs" target="_blank" rel="external">https://www.elastic.co/blog/to-shade-or-not-to-shade#sthash.CRl8HKfN.dpbs</a></li>
<li><a href="http://ju.outofmemory.cn/entry/67085" target="_blank" rel="external">http://ju.outofmemory.cn/entry/67085</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven,SBT构建工具&lt;br&gt;
    
    </summary>
    
      <category term="tool" scheme="http://github.com/zqhxuyuan/categories/tool/"/>
    
    
      <category term="work" scheme="http://github.com/zqhxuyuan/tags/work/"/>
    
  </entry>
  
</feed>
